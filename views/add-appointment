<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book an Appointment - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
        }

        /* Sidebar */
        .sidebar {
            width: 180px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            padding: 0;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
            color: #4A90E2;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 2px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        /* Main Content */
        .main-content {
            margin-left: 180px;
            flex: 1;
            background: white;
            border-radius: 20px 0 0 20px;
            min-height: 100vh;
            position: relative;
            overflow: hidden;
        }

        /* Header */
        .header {
            background: white;
            padding: 20px 30px;
            border-bottom: 1px solid #e1e5e9;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .header-left h1 {
            font-size: 28px;
            color: #333;
            margin: 0;
            font-weight: 600;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .notification-container {
            position: relative;
        }

        .notification-icon {
            position: relative;
            width: 24px;
            height: 24px;
            cursor: pointer;
            color: #666;
            transition: color 0.3s ease;
        }

        .notification-icon:hover {
            color: #4A90E2;
        }

        .notification-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff4757;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: 600;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 12px;
            cursor: pointer;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 16px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .user-info h4 {
            margin: 0;
            font-size: 14px;
            color: #333;
        }

        .user-info p {
            margin: 0;
            font-size: 12px;
            color: #666;
        }

        /* Content Area */
        .content {
            padding: 30px;
            height: calc(100vh - 100px);
            display: flex;
            flex-direction: column;
        }

        /* Calendar Navigation */
        .calendar-nav {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
        }

        .nav-btn {
            background: #f8f9fa;
            border: 1px solid #e1e5e9;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #666;
            transition: all 0.3s ease;
        }

        .nav-btn:hover {
            background: #4A90E2;
            color: white;
            border-color: #4A90E2;
        }

        .current-date {
            font-size: 24px;
            font-weight: 600;
            color: #333;
            min-width: 200px;
            text-align: center;
        }

        .today-btn {
            background: #4A90E2;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .today-btn:hover {
            background: #357abd;
        }

        /* Schedule Grid */
        .schedule-container {
            flex: 1;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .schedule-header {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 20px;
            border-bottom: 1px solid #e1e5e9;
        }

        .schedule-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .schedule-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }

        .legend {
            display: flex;
            gap: 20px;
            font-size: 12px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
        }

        .legend-available { background: #28a745; }
        .legend-booked { background: #dc3545; }
        .legend-selected { background: #4A90E2; }

        .schedule-grid {
            flex: 1;
            overflow-y: auto;
            background: white;
        }

        .time-slots {
            display: grid;
            grid-template-columns: 80px 1fr;
            min-height: 100%;
        }

        .time-labels {
            background: #f8f9fa;
            border-right: 1px solid #e1e5e9;
        }

        .time-label {
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: #666;
            border-bottom: 1px solid #e1e5e9;
            font-weight: 500;
        }

        .appointments-column {
            position: relative;
        }

        .appointment-slot {
            height: 60px;
            border-bottom: 1px solid #e1e5e9;
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .appointment-slot:hover {
            background: rgba(74, 144, 226, 0.05);
        }

        .appointment-block {
            position: absolute;
            left: 4px;
            right: 4px;
            top: 4px;
            bottom: 4px;
            border-radius: 8px;
            padding: 8px;
            font-size: 12px;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .appointment-block:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .appointment-available {
            background: linear-gradient(135deg, #28a745, #20c997);
            border: 2px solid transparent;
        }

        .appointment-booked {
            background: linear-gradient(135deg, #dc3545, #e74c3c);
            border: 2px solid transparent;
        }

        .appointment-selected {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            border: 2px solid #fff;
            box-shadow: 0 0 0 2px #4A90E2;
        }

        .appointment-title {
            font-weight: 600;
            margin-bottom: 2px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .appointment-time {
            font-size: 10px;
            opacity: 0.9;
        }

        .appointment-dentist {
            font-size: 10px;
            opacity: 0.8;
            margin-top: 2px;
        }

        /* Booking Form Modal */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 16px;
            padding: 0;
            max-width: 500px;
            width: 90%;
            max-height: 90%;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: slideUp 0.3s ease;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            padding: 24px;
            border-radius: 16px 16px 0 0;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
            margin: 0;
        }

        .modal-subtitle {
            font-size: 14px;
            opacity: 0.9;
            margin: 8px 0 0 0;
        }

        .modal-body {
            padding: 24px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }

        .selected-slot-info {
            background: linear-gradient(135deg, #e8f5e8, #f0f8f0);
            border: 1px solid #20c997;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 20px;
        }

        .selected-slot-info h4 {
            color: #155724;
            margin: 0 0 8px 0;
            font-size: 16px;
        }

        .selected-slot-info p {
            color: #155724;
            margin: 4px 0;
            font-size: 14px;
        }

        .modal-footer {
            padding: 20px 24px;
            border-top: 1px solid #e1e5e9;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 1px solid #e1e5e9;
        }

        .btn-secondary:hover {
            background: #e2e6ea;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #357abd, #2691e6);
            transform: translateY(-1px);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 60px;
            color: #666;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(74, 144, 226, 0.1);
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 24px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 3000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease;
            max-width: 400px;
        }

        .toast.success {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .toast.error {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .toast.info {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }
            
            .sidebar.active {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .content {
                padding: 20px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .schedule-info {
                flex-direction: column;
                gap: 16px;
                align-items: flex-start;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/admin/dashboard"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
            <li class="active"><a href="/admin/appointments"><i class="fas fa-hospital"></i> Appointments</a></li>
            <li><a href="/admin/dentists"><i class="fas fa-user-md"></i> Dentists</a></li>
            <li><a href="/admin/patients"><i class="fas fa-users"></i> Patients</a></li>
            <li><a href="/admin/treatments"><i class="fas fa-tooth"></i> Treatments</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="header">
            <div class="header-left">
                <h1>Book an Appointment</h1>
            </div>
            <div class="header-right">
                <div class="notification-container">
                    <i class="fas fa-bell notification-icon" onclick="toggleNotifications()"></i>
                    <div class="notification-badge" id="notificationBadge">3</div>
                </div>
                
                <div class="user-profile" onclick="toggleUserMenu()">
                    <div class="user-avatar" id="userAvatar">A</div>
                    <div class="user-info">
                        <h4>Hello Admin</h4>
                        <p>administrator</p>
                    </div>
                    <i class="fas fa-caret-down"></i>
                </div>
            </div>
        </div>

        <!-- Content -->
        <div class="content">
            <!-- Calendar Navigation -->
            <div class="calendar-nav">
                <button class="nav-btn" onclick="previousDay()">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <div class="current-date" id="currentDate">April 4, 2025</div>
                <button class="nav-btn" onclick="nextDay()">
                    <i class="fas fa-chevron-right"></i>
                </button>
                <button class="today-btn" onclick="goToToday()">TODAY</button>
            </div>

            <!-- Schedule Container -->
            <div class="schedule-container">
                <div class="schedule-header">
                    <div class="schedule-info">
                        <div class="schedule-title">Available Time Slots</div>
                        <div class="legend">
                            <div class="legend-item">
                                <div class="legend-color legend-available"></div>
                                <span>Available</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color legend-booked"></div>
                                <span>Booked</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color legend-selected"></div>
                                <span>Selected</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="schedule-grid" id="scheduleGrid">
                    <!-- Loading initially -->
                    <div class="loading">
                        <div class="loading-spinner"></div>
                        <p>Loading available time slots...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Booking Modal -->
    <div class="modal" id="bookingModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Book Appointment</h2>
                <p class="modal-subtitle">Fill in the details to book your appointment</p>
            </div>
            <div class="modal-body">
                <div class="selected-slot-info" id="selectedSlotInfo">
                    <!-- Selected slot info will be displayed here -->
                </div>
                
                <form id="bookingForm">
                    <div class="form-group">
                        <label class="form-label">Patient</label>
                        <select class="form-control" id="patientSelect" required>
                            <option value="">Select a patient...</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Treatment</label>
                        <select class="form-control" id="treatmentSelect" required>
                            <option value="">Select a treatment...</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" id="notesTextarea" rows="3" placeholder="Any special notes or requests..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeBookingModal()">Cancel</button>
                <button type="submit" class="btn btn-primary" onclick="confirmBooking()" id="confirmBtn">
                    <i class="fas fa-calendar-check"></i> Book Appointment
                </button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentDate = new Date('2025-04-04'); // Default date from image
        let selectedSlot = null;
        let scheduleData = [];
        let patientsData = [];
        let treatmentsData = [];
        let userEmail = 'admin@clinic.com'; // Will be loaded from session

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadUserProfile();
            loadScheduleData();
            loadPatientsData();
            loadTreatmentsData();
            updateDateDisplay();
        });

        // Load user profile and set avatar
        async function loadUserProfile() {
            try {
                const response = await fetch('/admin/profile/api');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        userEmail = data.email;
                        updateUserAvatar();
                    }
                }
            } catch (error) {
                console.error('Error loading user profile:', error);
            }
        }

        // Update user avatar with first letter of email
        function updateUserAvatar() {
            const avatar = document.getElementById('userAvatar');
            const firstLetter = userEmail.charAt(0).toUpperCase();
            avatar.textContent = firstLetter;
        }

        // Load schedule data from database
        async function loadScheduleData() {
            try {
                const dateStr = currentDate.toISOString().split('T')[0];
                const response = await fetch(`/admin/api/schedule?start=${dateStr}&end=${dateStr}`);
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        scheduleData = data.events || [];
                        renderSchedule();
                    } else {
                        throw new Error(data.error || 'Failed to load schedule');
                    }
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
            } catch (error) {
                console.error('Error loading schedule:', error);
                showToast('Failed to load schedule data', 'error');
                renderEmptySchedule();
            }
        }

        // Load patients data
        async function loadPatientsData() {
            try {
                const response = await fetch('/admin/api/patients');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        patientsData = data.patients || [];
                        populatePatientSelect();
                    }
                }
            } catch (error) {
                console.error('Error loading patients:', error);
            }
        }

        // Load treatments data
        async function loadTreatmentsData() {
            try {
                const response = await fetch('/admin/api/treatments');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        treatmentsData = data.treatments || [];
                        populateTreatmentSelect();
                    }
                }
            } catch (error) {
                console.error('Error loading treatments:', error);
            }
        }

        // Populate patient select dropdown
        function populatePatientSelect() {
            const select = document.getElementById('patientSelect');
            select.innerHTML = '<option value="">Select a patient...</option>';
            
            patientsData.forEach(patient => {
                const option = document.createElement('option');
                option.value = patient.patient_id;
                option.textContent = `${patient.fname} ${patient.lname}`;
                select.appendChild(option);
            });
        }

        // Populate treatment select dropdown
        function populateTreatmentSelect() {
            const select = document.getElementById('treatmentSelect');
            select.innerHTML = '<option value="">Select a treatment...</option>';
            
            treatmentsData.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment.treatment_id;
                option.textContent = `${treatment.treatment_name} (${treatment.duration} min)`;
                select.appendChild(option);
            });
        }

        // Render schedule grid
        function renderSchedule() {
            const scheduleGrid = document.getElementById('scheduleGrid');
            
            // Generate time slots from 8 AM to 8 PM
            const timeSlots = [];
            for (let hour = 8; hour <= 20; hour++) {
                timeSlots.push({
                    hour: hour,
                    time: `${hour.toString().padStart(2, '0')}:00`,
                    display: formatHour(hour)
                });
            }

            let html = `
                <div class="time-slots">
                    <div class="time-labels">
                        ${timeSlots.map(slot => `
                            <div class="time-label">${slot.display}</div>
                        `).join('')}
                    </div>
                    <div class="appointments-column">
                        ${timeSlots.map(slot => renderTimeSlot(slot)).join('')}
                    </div>
                </div>
            `;

            scheduleGrid.innerHTML = html;
        }

        // Render individual time slot
        function renderTimeSlot(timeSlot) {
            const appointments = getAppointmentsForTime(timeSlot.hour);
            
            if (appointments.length === 0) {
                // No schedule for this time
                return `<div class="appointment-slot" data-hour="${timeSlot.hour}"></div>`;
            }

            return `
                <div class="appointment-slot" data-hour="${timeSlot.hour}">
                    ${appointments.map(apt => renderAppointmentBlock(apt, timeSlot)).join('')}
                </div>
            `;
        }

        // Render appointment block
        function renderAppointmentBlock(appointment, timeSlot) {
            const hasAppointments = appointment.extendedProps && appointment.extendedProps.hasAppointments;
            const appointmentCount = appointment.extendedProps ? appointment.extendedProps.appointmentCount : 0;
            
            let className = 'appointment-available';
            let title = 'Available';
            let subtitle = 'Click to book';
            
            if (hasAppointments) {
                className = 'appointment-booked';
                title = 'Booked';
                subtitle = `${appointmentCount} appointment${appointmentCount > 1 ? 's' : ''}`;
            }

            const isSelected = selectedSlot && 
                selectedSlot.hour === timeSlot.hour && 
                selectedSlot.dentist === appointment.extendedProps.dentist;

            if (isSelected) {
                className = 'appointment-selected';
            }

            return `
                <div class="appointment-block ${className}" 
                     onclick="selectTimeSlot(${timeSlot.hour}, '${appointment.extendedProps.dentist}', ${!hasAppointments})"
                     data-hour="${timeSlot.hour}"
                     data-dentist="${appointment.extendedProps.dentist}"
                     data-available="${!hasAppointments}">
                    <div class="appointment-title">${title}</div>
                    <div class="appointment-time">${timeSlot.time}</div>
                    <div class="appointment-dentist">Dr. ${appointment.extendedProps.dentist}</div>
                    <div class="appointment-time">${subtitle}</div>
                </div>
            `;
        }

        // Get appointments for specific time
        function getAppointmentsForTime(hour) {
            return scheduleData.filter(event => {
                if (!event.extendedProps || event.extendedProps.type !== 'working') return false;
                
                const startTime = event.extendedProps.startTime;
                const endTime = event.extendedProps.endTime;
                
                if (!startTime || !endTime) return false;
                
                const startHour = parseInt(startTime.split(':')[0]);
                const endHour = parseInt(endTime.split(':')[0]);
                
                return hour >= startHour && hour < endHour;
            });
        }

        // Format hour for display
        function formatHour(hour) {
            if (hour === 0) return '12am';
            if (hour < 12) return `${hour}am`;
            if (hour === 12) return '12pm';
            return `${hour - 12}pm`;
        }

        // Select time slot
        function selectTimeSlot(hour, dentist, available) {
            if (!available) {
                showToast('This time slot is already booked', 'error');
                return;
            }

            selectedSlot = {
                hour: hour,
                dentist: dentist,
                date: currentDate.toISOString().split('T')[0],
                time: `${hour.toString().padStart(2, '0')}:00`
            };

            // Update visual selection
            document.querySelectorAll('.appointment-block').forEach(block => {
                block.classList.remove('appointment-selected');
                block.classList.add(block.dataset.available === 'true' ? 'appointment-available' : 'appointment-booked');
            });

            const selectedBlock = document.querySelector(`[data-hour="${hour}"][data-dentist="${dentist}"]`);
            if (selectedBlock) {
                selectedBlock.classList.remove('appointment-available');
                selectedBlock.classList.add('appointment-selected');
            }

            showBookingModal();
        }

        // Show booking modal
        function showBookingModal() {
            if (!selectedSlot) return;

            const modal = document.getElementById('bookingModal');
            const slotInfo = document.getElementById('selectedSlotInfo');

            const dateStr = new Date(selectedSlot.date).toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            slotInfo.innerHTML = `
                <h4><i class="fas fa-calendar-check"></i> Selected Time Slot</h4>
                <p><strong>Date:</strong> ${dateStr}</p>
                <p><strong>Time:</strong> ${selectedSlot.time}</p>
                <p><strong>Dentist:</strong> Dr. ${selectedSlot.dentist}</p>
            `;

            modal.classList.add('active');
        }

        // Close booking modal
        function closeBookingModal() {
            const modal = document.getElementById('bookingModal');
            modal.classList.remove('active');
            
            // Reset form
            document.getElementById('bookingForm').reset();
            
            // Clear selection
            selectedSlot = null;
            document.querySelectorAll('.appointment-block').forEach(block => {
                block.classList.remove('appointment-selected');
                if (block.dataset.available === 'true') {
                    block.classList.add('appointment-available');
                } else {
                    block.classList.add('appointment-booked');
                }
            });
        }

        // Confirm booking
        async function confirmBooking() {
            if (!selectedSlot) {
                showToast('Please select a time slot first', 'error');
                return;
            }

            const patientId = document.getElementById('patientSelect').value;
            const treatmentId = document.getElementById('treatmentSelect').value;
            const notes = document.getElementById('notesTextarea').value;

            if (!patientId || !treatmentId) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            const confirmBtn = document.getElementById('confirmBtn');
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Booking...';

            try {
                // Find dentist ID
                const dentistData = scheduleData.find(event => 
                    event.extendedProps && 
                    event.extendedProps.dentist === selectedSlot.dentist
                );

                if (!dentistData) {
                    throw new Error('Dentist information not found');
                }

                // Create appointment datetime
                const appointmentTime = `${selectedSlot.date} ${selectedSlot.time}:00`;

                const bookingData = {
                    patient_id: parseInt(patientId),
                    treatment_id: parseInt(treatmentId),
                    dentist_id: 1, // Default dentist ID - should be extracted from schedule data
                    appointment_time: appointmentTime,
                    notes: notes
                };

                const response = await fetch('/admin/api/appointments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(bookingData)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    showToast('Appointment booked successfully!', 'success');
                    closeBookingModal();
                    loadScheduleData(); // Refresh schedule
                    
                    // Redirect to appointments page after short delay
                    setTimeout(() => {
                        window.location.href = '/admin/appointments';
                    }, 2000);
                } else {
                    throw new Error(result.error || 'Failed to book appointment');
                }

            } catch (error) {
                console.error('Error booking appointment:', error);
                showToast('Failed to book appointment: ' + error.message, 'error');
            } finally {
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Book Appointment';
            }
        }

        // Navigation functions
        function previousDay() {
            currentDate.setDate(currentDate.getDate() - 1);
            updateDateDisplay();
            loadScheduleData();
        }

        function nextDay() {
            currentDate.setDate(currentDate.getDate() + 1);
            updateDateDisplay();
            loadScheduleData();
        }

        function goToToday() {
            currentDate = new Date();
            updateDateDisplay();
            loadScheduleData();
        }

        function updateDateDisplay() {
            const dateStr = currentDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            document.getElementById('currentDate').textContent = dateStr;
        }

        // Render empty schedule
        function renderEmptySchedule() {
            const scheduleGrid = document.getElementById('scheduleGrid');
            scheduleGrid.innerHTML = `
                <div style="text-align: center; padding: 60px; color: #666;">
                    <i class="fas fa-calendar-times" style="font-size: 48px; color: #ddd; margin-bottom: 20px;"></i>
                    <h3 style="margin: 0 0 10px 0; color: #999;">No Schedule Available</h3>
                    <p style="margin: 0; color: #aaa;">No dentist schedules found for this date</p>
                </div>
            `;
        }

        // Notification functions
        function toggleNotifications() {
            showToast('Notification panel - Feature coming soon!', 'info');
        }

        function toggleUserMenu() {
            showToast('User menu - Feature coming soon!', 'info');
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                ${message}
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }, 4000);
        }

        // Close modal when clicking outside
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('bookingModal');
            if (event.target === modal) {
                closeBookingModal();
            }
        });

        // Handle keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeBookingModal();
            }
        });

        // Sample data for demonstration (will be replaced by real API calls)
        function createSampleScheduleData() {
            const sampleEvents = [
                {
                    id: 'work_1_2025-04-04',
                    title: 'Dr. Somchai Toothman\n10:00-16:00',
                    start: '2025-04-04',
                    extendedProps: {
                        type: 'working',
                        dentist: 'Somchai Toothman',
                        specialty: 'Tooth Extraction',
                        startTime: '10:00',
                        endTime: '16:00',
                        hasAppointments: false,
                        appointmentCount: 0
                    }
                },
                {
                    id: 'work_2_2025-04-04',
                    title: 'Dr. Somsri Sodsai\n09:00-17:00 (2 appointments)',
                    start: '2025-04-04',
                    extendedProps: {
                        type: 'working',
                        dentist: 'Somsri Sodsai',
                        specialty: 'General Dentistry',
                        startTime: '09:00',
                        endTime: '17:00',
                        hasAppointments: true,
                        appointmentCount: 2
                    }
                }
            ];
            
            scheduleData = sampleEvents;
            renderSchedule();
        }

        // Fallback to sample data if API fails
        function handleScheduleLoadError() {
            console.log('Using sample schedule data...');
            createSampleScheduleData();
        }
    </script>
</body>
</html>