<!-- ===== Patient Notification Bell Component ===== -->
<style>
  /* Notification Bell Styles */
  .notification-bell-container { position: relative; display: inline-block; }
  .notification-bell-btn {
    position: relative; background: none; border: none; font-size: 20px; color: #666; cursor: pointer;
    padding: 8px 12px; border-radius: 50%; transition: all 0.3s ease;
  }
  .notification-bell-btn:hover { background: #f0f0f0; color: #4A90E2; }

  .notification-badge {
    position: absolute; top: 5px; right: 5px; background: #ff4757; color: white; border-radius: 10px;
    padding: 2px 6px; font-size: 11px; font-weight: bold; min-width: 18px; text-align: center; animation: pulse 2s infinite; display: none;
  }
  @keyframes pulse { 0%,100%{transform:scale(1)} 50%{transform:scale(1.1)} }

  .notification-dropdown {
    position: absolute; top: calc(100% + 10px); right: 0; width: 380px; max-height: 500px; background: white;
    border-radius: 12px; box-shadow: 0 10px 40px rgba(0,0,0,0.15); z-index: 1000; display: none; animation: slideDown 0.3s ease;
  }
  @keyframes slideDown { from{opacity:0;transform:translateY(-10px)} to{opacity:1;transform:translateY(0)} }

  .notification-header { display: flex; justify-content: space-between; align-items: center; padding: 15px 20px; border-bottom: 1px solid #eee; }
  .notification-header h3 { margin: 0; font-size: 16px; font-weight: 600; }
  .mark-all-read-btn { background: none; border: none; color: #4A90E2; font-size: 13px; cursor: pointer; padding: 5px 10px; border-radius: 5px; transition: background 0.3s; }
  .mark-all-read-btn:hover { background: #f0f0f0; }

  .notification-list { max-height: 350px; overflow-y: auto; }
  .notification-item { padding: 15px 20px; border-bottom: 1px solid #f0f0f0; cursor: pointer; transition: background 0.2s; position: relative; }
  .notification-item:hover { background: #f8f9fa; }
  .notification-item.unread { background: #f0f4ff; }
  .notification-item.unread::before { content: ''; position: absolute; left: 10px; top: 50%; transform: translateY(-50%); width: 8px; height: 8px; background: #4A90E2; border-radius: 50%; }

  .notification-content { padding-left: 10px; }
  .notification-title { font-weight: 600; font-size: 14px; margin-bottom: 4px; color: #333; }
  .notification-message { font-size: 13px; color: #666; line-height: 1.4; margin-bottom: 4px; }
  .notification-time { font-size: 12px; color: #999; }

  .notification-footer { padding: 12px 20px; text-align: center; border-top: 1px solid #eee; }
  .view-all-link { color: #4A90E2; text-decoration: none; font-size: 14px; font-weight: 500; }
  .view-all-link:hover { text-decoration: underline; }

  .notification-loading, .notification-empty { padding: 40px 20px; text-align: center; color: #999; }
  .notification-empty i { font-size: 48px; margin-bottom: 10px; opacity: 0.3; }
</style>

<div class="notification-bell-container">
  <button class="notification-bell-btn" id="patientNotificationBellBtn">
    <i class="fas fa-bell"></i>
    <span class="notification-badge" id="patientNotificationBadge">0</span>
  </button>

  <div class="notification-dropdown" id="patientNotificationDropdown">
    <div class="notification-header">
      <h3>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
      <button class="mark-all-read-btn" id="patientMarkAllReadBtn">
        <i class="fas fa-check-double"></i> ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      </button>
    </div>
    <div class="notification-list" id="patientNotificationList">
      <div class="notification-loading">
        <i class="fas fa-spinner fa-spin"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
      </div>
    </div>
    <div class="notification-footer">
      <a href="/patient/notifications" class="view-all-link">‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î <i class="fas fa-arrow-right"></i></a>
    </div>
  </div>
</div>

<script>
  // ===== Patient Notification Bell System =====
  (function() {
    if (window.PatientNotificationBell) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥

    class PatientNotificationBell {
      constructor() {
        this.apiEndpoint = '/patient/api/notifications';
        this.unreadCount = 0;
        this.notifications = [];
        this.isOpen = false;
        this.pollInterval = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        this.init();
      }

      init() {
        this.attachEventListeners();
        this.loadNotifications();
        this.startPolling();
      }

      attachEventListeners() {
        const bellBtn = document.getElementById('patientNotificationBellBtn');
        const markAllBtn = document.getElementById('patientMarkAllReadBtn');

        if (bellBtn) {
          bellBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleDropdown();
          });
        }

        if (markAllBtn) {
          markAllBtn.addEventListener('click', () => this.markAllAsRead());
        }

        document.addEventListener('click', (e) => {
          const container = document.querySelector('.notification-bell-container');
          if (container && !container.contains(e.target)) {
            this.closeDropdown();
          }
        });
      }

      async loadNotifications() {
        try {
          const response = await fetch(`${this.apiEndpoint}?limit=5`);
          const data = await response.json();

          if (data.success) {
            this.notifications = data.notifications || [];
            this.unreadCount = Number(data.unread || 0);
            this.updateBadge();
            this.renderNotifications();
          }
        } catch (err) {
          console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:', err);
        }
      }

      async loadUnreadCount() {
        try {
          const response = await fetch(`${this.apiEndpoint}/unread-count?userType=patient`);
          const data = await response.json();

          if (data.success) {
            this.unreadCount = Number(data.unread_count || 0);
            this.updateBadge();
          }
        } catch (err) {
          console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô:', err);
        }
      }

      updateBadge() {
        const badge = document.getElementById('patientNotificationBadge');
        if (!badge) return;

        if (this.unreadCount > 0) {
          badge.textContent = this.unreadCount > 99 ? '99+' : String(this.unreadCount);
          badge.style.display = 'block';
        } else {
          badge.style.display = 'none';
        }
      }

      renderNotifications() {
        const list = document.getElementById('patientNotificationList');
        if (!list) return;

        if (!this.notifications.length) {
          list.innerHTML = `
            <div class="notification-empty">
              <i class="fas fa-bell-slash"></i>
              <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</p>
            </div>`;
          return;
        }

        list.innerHTML = this.notifications.map(n => this.createNotificationHTML(n)).join('');

        list.querySelectorAll('.notification-item').forEach((item, idx) => {
          item.addEventListener('click', () => this.handleNotificationClick(this.notifications[idx]));
        });
      }

      createNotificationHTML(notif) {
        const icon = this.getNotificationIcon(notif.type);
        const unread = notif.is_read ? '' : 'unread';

        return `
          <div class="notification-item ${unread}" data-id="${notif.id}">
            <div class="notification-content">
              <div class="notification-title">${icon} ${notif.title || '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'}</div>
              <div class="notification-message">${notif.message || ''}</div>
              <div class="notification-time">${notif.time_ago || this.formatTime(notif.created_at)}</div>
            </div>
          </div>`;
      }

      getNotificationIcon(type) {
        const icons = {
          'new_appointment': 'üÜï',
          'appointment_confirmed': '‚úÖ',
          'appointment_cancelled': '‚ùå',
          'appointment_reminder': '‚è∞',
          'treatment_completed': 'üìù',
          'default': 'üîî'
        };
        return icons[type] || icons.default;
      }

      formatTime(ts) {
        if (!ts) return '';

        const now = new Date();
        const past = new Date(ts);
        const diffMs = now - past;
        const mins = Math.floor(diffMs / 60000);
        const hrs = Math.floor(diffMs / 3600000);
        const days = Math.floor(diffMs / 86400000);

        if (mins < 1) return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
        if (mins < 60) return `${mins} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
        if (hrs < 24) return `${hrs} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
        if (days < 7) return `${days} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;

        return past.toLocaleDateString('th-TH', {
          day: '2-digit',
          month: 'short',
          year: 'numeric'
        });
      }

      async handleNotificationClick(notif) {
        if (!notif.is_read) {
          await this.markAsRead(notif.id);
        }

        // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        if (notif.appointment_id) {
          window.location.href = `/patient/history/details/${notif.appointment_id}`;
        }
      }

      async markAsRead(id) {
        try {
          const response = await fetch(`${this.apiEndpoint}/${id}/read`, {
            method: 'PUT'
          });
          const data = await response.json();

          if (data.success) {
            this.loadNotifications();
          }
        } catch (err) {
          console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß:', err);
        }
      }

      async markAllAsRead() {
        try {
          const response = await fetch(`${this.apiEndpoint}/mark-all-read?userType=patient`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userType: 'patient' })
          });
          const data = await response.json();

          if (data.success) {
            this.loadNotifications();
          }
        } catch (err) {
          console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', err);
        }
      }

      toggleDropdown() {
        this.isOpen = !this.isOpen;
        const dropdown = document.getElementById('patientNotificationDropdown');

        if (!dropdown) return;

        dropdown.style.display = this.isOpen ? 'block' : 'none';

        if (this.isOpen) {
          this.loadNotifications();
        }
      }

      closeDropdown() {
        this.isOpen = false;
        const dropdown = document.getElementById('patientNotificationDropdown');
        if (dropdown) {
          dropdown.style.display = 'none';
        }
      }

      startPolling() {
        setInterval(() => {
          this.loadUnreadCount();
        }, this.pollInterval);
      }
    }

    // Export to global scope
    window.PatientNotificationBell = PatientNotificationBell;

    // Auto-initialize on DOM ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        window.patientNotificationBellInstance = new PatientNotificationBell();
      });
    } else {
      window.patientNotificationBellInstance = new PatientNotificationBell();
    }
  })();
</script>
