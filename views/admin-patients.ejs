<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patients Management - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            margin: 0;
        }

        /* Sidebar */
        .sidebar {
            width: 180px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            position: fixed;
            height: 100vh;
            padding: 0;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
            color: #4A90E2;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 2px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        /* Main Content */
        .main {
            margin-left: 180px;
            padding: 0;
            min-height: 100vh;
        }

        /* Top Bar */
        .top-bar {
            background: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }

        .search-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .search-section label {
            font-weight: 500;
            color: #555;
            font-size: 14px;
        }

        .search-box {
            background: #f8f9fa;
            border: 1px solid #e1e5e9;
            border-radius: 20px;
            padding: 8px 15px;
            display: flex;
            align-items: center;
            width: 250px;
        }

        .search-box i {
            color: #666;
            margin-right: 8px;
            font-size: 14px;
        }

        .search-box input {
            border: none;
            background: transparent;
            outline: none;
            width: 100%;
            font-size: 13px;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .notification-container {
            position: relative;
        }

        .notification-icon {
            position: relative;
            width: 20px;
            height: 20px;
            cursor: pointer;
            color: #666;
            transition: color 0.3s ease;
        }

        .notification-icon:hover {
            color: #4A90E2;
        }

        .notification-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff4757;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: 600;
            display: none;
        }

        .notification-badge.show {
            display: flex;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .notification-dropdown {
            position: absolute;
            top: 100%;
            right: -10px;
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 12px;
            min-width: 380px;
            max-width: 420px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
            z-index: 2000;
            display: none;
            max-height: 500px;
            overflow: hidden;
        }

        .notification-dropdown.show {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .notification-header {
            padding: 20px;
            border-bottom: 1px solid #e1e5e9;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
        }

        .notification-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .notification-content {
            max-height: 400px;
            overflow-y: auto;
            padding: 20px;
            color: #666;
            text-align: center;
            font-style: italic;
        }

        .profile-dropdown {
            position: relative;
        }

        .user-info {
            display: flex;
            align-items: center;
            cursor: pointer;
            gap: 10px;
        }

        .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .user-details strong {
            display: block;
            font-size: 13px;
            color: #333;
        }

        .user-details small {
            color: #666;
            font-size: 11px;
        }

        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
            min-width: 160px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .dropdown-menu a {
            display: block;
            padding: 10px 15px;
            text-decoration: none;
            color: #333;
            font-size: 13px;
        }

        .dropdown-menu a:hover {
            background-color: #f8f9fa;
        }

        /* Content */
        .content {
            padding: 30px;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .page-title h1 {
            font-size: 24px;
            color: #333;
            margin: 0 0 5px 0;
            font-weight: 600;
        }

        .page-title p {
            color: #666;
            margin: 0;
            font-size: 13px;
        }

        .page-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 1px solid #e1e5e9;
        }

        .btn-secondary:hover {
            background: #e9ecef;
        }

        .stats-bar {
            background: white;
            padding: 20px 25px;
            border-radius: 12px;
            margin-bottom: 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }

        .stats-info {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #666;
            font-size: 14px;
        }

        .stats-info i {
            color: #4A90E2;
            font-size: 16px;
        }

        .filter-section {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        /* Table Section */
        .table-section {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }

        .table-header {
            padding: 20px 25px;
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
            border-bottom: 1px solid #e1e5e9;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }

        .patients-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }

        .patients-table thead {
            background: #f8f9fa;
        }

        .patients-table th {
            padding: 15px 20px;
            text-align: left;
            font-weight: 600;
            color: #555;
            border-bottom: 1px solid #e1e5e9;
        }

        .patients-table td {
            padding: 15px 20px;
            border-bottom: 1px solid #f1f3f4;
            color: #333;
        }

        .patients-table tr:hover {
            background: #f8f9fa;
        }

        .patient-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .patient-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 16px;
            font-weight: 600;
        }

        .patient-details h4 {
            margin: 0 0 2px 0;
            font-size: 14px;
            font-weight: 600;
            color: #333;
        }

        .patient-details p {
            margin: 0;
            font-size: 12px;
            color: #666;
        }

        .specialty-badge {
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: 500;
            background: rgba(74, 144, 226, 0.1);
            color: #4A90E2;
            border: 1px solid rgba(74, 144, 226, 0.2);
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 12px;
            border-radius: 6px;
            text-decoration: none;
            border: none;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-view {
            background: #e8f5e8;
            color: #2e7d32;
            border: 1px solid #c8e6c9;
        }

        .btn-view:hover {
            background: #c8e6c9;
        }

        .btn-edit {
            background: #fff3e0;
            color: #f57c00;
            border: 1px solid #ffcc02;
        }

        .btn-edit:hover {
            background: #ffcc02;
            color: white;
        }

        .btn-schedule {
            background: #e3f2fd;
            color: #1976d2;
            border: 1px solid #bbdefb;
        }

        .btn-schedule:hover {
            background: #bbdefb;
        }

        .btn-delete {
            background: #ffebee;
            color: #d32f2f;
            border: 1px solid #ffcdd2;
        }

        .btn-delete:hover {
            background: #ffcdd2;
        }

        /* Modal */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 3000;
            display: none;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            position: relative;
        }

        .modal-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e1e5e9;
        }

        .modal-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #ffebee;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #d32f2f;
            font-size: 18px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .modal-message {
            margin-bottom: 25px;
            color: #666;
            line-height: 1.5;
        }

        .modal-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        /* Loading */
        .loading {
            text-align: center;
            padding: 60px;
            color: #666;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(74, 144, 226, 0.1);
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-icon {
            font-size: 48px;
            color: #ddd;
            margin-bottom: 20px;
        }

        .empty-state h3 {
            margin: 0 0 10px 0;
            color: #999;
        }

        .empty-state p {
            margin: 0 0 20px 0;
            font-size: 14px;
        }

        /* Toast notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 4000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease;
        }

        .toast.success {
            background: #10b981;
        }

        .toast.error {
            background: #ef4444;
        }

        .toast.info {
            background: #3b82f6;
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main {
                margin-left: 0;
            }
            
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .stats-bar {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/admin/dashboard"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
            <li><a href="/admin/appointments"><i class="fas fa-hospital"></i> Appointments</a></li>
            <li><a href="/admin/dentists"><i class="fas fa-user-md"></i> Dentists</a></li>
            <li class="active"><a href="/admin/patients"><i class="fas fa-users"></i> Patients</a></li>
            <li><a href="/admin/treatments"><i class="fas fa-tooth"></i> Treatments</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="search-section">
                <label>Search:</label>
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="Search patients..." id="searchInput" />
                </div>
            </div>
            <div class="user-section">
                <div class="notification-container">
                    <i class="fas fa-bell notification-icon" onclick="toggleNotifications()"></i>
                    <div class="notification-badge" id="notificationBadge">0</div>
                    
                    <div class="notification-dropdown" id="notificationDropdown">
                        <div class="notification-header">
                            <h3>Notifications</h3>
                        </div>
                        <div class="notification-content" id="notificationContent">
                            No new notifications
                        </div>
                    </div>
                </div>
                
                <div class="profile-dropdown">
                    <div class="user-info" onclick="toggleDropdown()">
                        <div class="avatar" id="userAvatar">A</div>
                        <div class="user-details">
                            <strong>Hello Admin</strong>
                            <small>administrator</small>
                        </div>
                        <i class="fas fa-caret-down"></i>
                    </div>
                    <div class="dropdown-menu" id="profileDropdown">
                        <a href="/admin/profile">My Profile</a>
                        <hr />
                        <a href="/logout">Log Out</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content -->
        <div class="content">
            <!-- Page Header -->
            <div class="page-header">
                <div class="page-title">
                    <h1>Patients Management</h1>
                    <p>Manage patient profiles, appointments, and medical history</p>
                </div>
                <div class="page-actions">
                    <button class="btn btn-secondary">
                        <i class="fas fa-download"></i>
                        Export
                    </button>
                    <a href="/admin/patients/add" class="btn btn-primary">
                        <i class="fas fa-plus"></i>
                        Add New Patient
                    </a>
                </div>
            </div>

            <!-- Stats Bar -->
            <div class="stats-bar">
                <div class="stats-info">
                    <i class="fas fa-users"></i>
                    <span><strong id="totalPatients">0</strong> total patients</span>
                </div>
                <div class="filter-section">
                    <select class="btn btn-secondary" id="ageFilter">
                        <option value="">All Ages</option>
                        <option value="0-18">0-18 years</option>
                        <option value="19-35">19-35 years</option>
                        <option value="36-50">36-50 years</option>
                        <option value="51+">51+ years</option>
                    </select>
                    <select class="btn btn-secondary" id="visitFilter">
                        <option value="">All Visits</option>
                        <option value="recent">Recent</option>
                        <option value="never">Never visited</option>
                    </select>
                </div>
            </div>

            <!-- Loading -->
            <div class="loading" id="loading" style="display: none;">
                <div class="loading-spinner"></div>
                <p>Loading patients data...</p>
            </div>

            <!-- Table Section -->
            <div class="table-section" id="tableSection">
                <div class="table-header">
                    <h3>All Patients</h3>
                    <div class="filter-section">
                        <button class="btn btn-secondary btn-sm" onclick="refreshData()">
                            <i class="fas fa-refresh"></i>
                            Refresh
                        </button>
                    </div>
                </div>
                
                <table class="patients-table">
                    <thead>
                        <tr>
                            <th>Patient</th>
                            <th>Contact Info</th>
                            <th>Age</th>
                            <th>Last Visit</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="patientsTableBody">
                        <!-- Data will be loaded here -->
                    </tbody>
                </table>
            </div>

            <!-- Empty State -->
            <div class="empty-state" id="emptyState" style="display: none;">
                <div class="empty-icon">
                    <i class="fas fa-users"></i>
                </div>
                <h3>No patients found</h3>
                <p>Start by adding your first patient to the system</p>
                <a href="/admin/patients/add" class="btn btn-primary">
                    <i class="fas fa-plus"></i>
                    Add First Patient
                </a>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-icon">
                    <i class="fas fa-trash"></i>
                </div>
                <h3 class="modal-title">Confirm Deletion</h3>
            </div>
            <div class="modal-message" id="deleteMessage">
                Are you sure you want to delete this patient? This action cannot be undone.
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button class="btn btn-delete" id="confirmDeleteBtn">Delete Patient</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let patientsData = [];
        let filteredPatients = [];
        let currentDeleteId = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadPatients();
            setupFilters();
            setupSearch();
            updateUserAvatar();
            loadNotifications();
        });

        // Load patients data from database
        async function loadPatients() {
            const loading = document.getElementById('loading');
            const tableSection = document.getElementById('tableSection');
            const emptyState = document.getElementById('emptyState');
            
            loading.style.display = 'block';
            tableSection.style.display = 'none';
            emptyState.style.display = 'none';
            
            try {
                // เรียก API จากระบบที่มีอยู่แล้ว
                const response = await fetch('/admin/api/patients');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    patientsData = data.patients;
                    filteredPatients = [...patientsData];
                } else {
                    throw new Error(data.error || 'Failed to load patients');
                }
                
            } catch (error) {
                console.error('Error loading patients:', error);
                showToast('Failed to load patients: ' + error.message, 'error');
                patientsData = [];
                filteredPatients = [];
            } finally {
                loading.style.display = 'none';
                
                if (filteredPatients.length === 0) {
                    emptyState.style.display = 'block';
                } else {
                    tableSection.style.display = 'block';
                    renderPatientsTable();
                }
                
                updateStats();
            }
        }

        // Render patients table
        function renderPatientsTable() {
            const tbody = document.getElementById('patientsTableBody');
            
            tbody.innerHTML = filteredPatients.map(patient => {
                const initials = (patient.fname ? patient.fname.charAt(0) : 'U') + 
                               (patient.lname ? patient.lname.charAt(0) : 'U');
                const age = calculateAge(patient.dob);
                const lastVisit = formatDate(patient.last_visit);
                
                return `
                    <tr data-id="${patient.patient_id}">
                        <td>
                            <div class="patient-info">
                                <div class="patient-avatar">${initials}</div>
                                <div class="patient-details">
                                    <h4>${patient.fname || 'Unknown'} ${patient.lname || 'Patient'}</h4>
                                    <p>ID: ${String(patient.patient_id).padStart(3, '0')}</p>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div>${patient.phone || 'Not provided'}</div>
                            <div style="font-size: 12px; color: #666; margin-top: 2px;">
                                ${patient.email || 'Email not provided'}
                            </div>
                        </td>
                        <td>
                            <span class="specialty-badge">${age}</span>
                        </td>
                        <td>${lastVisit}</td>
                        <td>
                            <div class="action-buttons">
                                <a href="/admin/patients/${patient.patient_id}" class="btn-sm btn-view">
                                    <i class="fas fa-eye"></i> View
                                </a>
                                <a href="/admin/patients/${patient.patient_id}/edit" class="btn-sm btn-edit">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <a href="/admin/patients/${patient.patient_id}/treatments" class="btn-sm btn-schedule">
                                    <i class="fas fa-history"></i> History
                                </a>
                                <button class="btn-sm btn-delete" onclick="confirmDelete(${patient.patient_id}, '${patient.fname}', '${patient.lname}')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Calculate age from date of birth
        function calculateAge(dob) {
            if (!dob) return 'Unknown age';
            
            const today = new Date();
            const birthDate = new Date(dob);
            let age = today.getFullYear() - birthDate.getFullYear();
            const monthDiff = today.getMonth() - birthDate.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            
            return age > 0 ? `${age} years old` : 'Unknown age';
        }

        // Format date
        function formatDate(date) {
            if (!date) return 'Never';
            const d = new Date(date);
            const now = new Date();
            const diffTime = Math.abs(now - d);
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays === 0) return 'Today';
            if (diffDays === 1) return 'Yesterday';
            if (diffDays < 7) return `${diffDays} days ago`;
            if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
            if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;
            return `${Math.floor(diffDays / 365)} years ago`;
        }

        // Update statistics
        function updateStats() {
            document.getElementById('totalPatients').textContent = filteredPatients.length;
        }

        // Setup filters
        function setupFilters() {
            const ageFilter = document.getElementById('ageFilter');
            const visitFilter = document.getElementById('visitFilter');
            
            ageFilter.addEventListener('change', applyFilters);
            visitFilter.addEventListener('change', applyFilters);
        }

        // Apply filters
        function applyFilters() {
            const ageFilter = document.getElementById('ageFilter').value;
            const visitFilter = document.getElementById('visitFilter').value;
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            filteredPatients = patientsData.filter(patient => {
                // Age filter
                let matchesAge = true;
                if (ageFilter && patient.dob) {
                    const age = calculateAgeNumber(patient.dob);
                    switch (ageFilter) {
                        case '0-18': matchesAge = age <= 18; break;
                        case '19-35': matchesAge = age >= 19 && age <= 35; break;
                        case '36-50': matchesAge = age >= 36 && age <= 50; break;
                        case '51+': matchesAge = age >= 51; break;
                    }
                }

                // Visit filter
                let matchesVisit = true;
                if (visitFilter === 'recent') {
                    matchesVisit = patient.last_visit && 
                        (new Date() - new Date(patient.last_visit)) < (30 * 24 * 60 * 60 * 1000);
                } else if (visitFilter === 'never') {
                    matchesVisit = !patient.last_visit;
                }

                // Search filter
                let matchesSearch = true;
                if (searchTerm) {
                    const fullName = `${patient.fname || ''} ${patient.lname || ''}`.toLowerCase();
                    const phone = patient.phone?.toLowerCase() || '';
                    const email = patient.email?.toLowerCase() || '';
                    const patientId = String(patient.patient_id).padStart(3, '0');
                    
                    matchesSearch = fullName.includes(searchTerm) || 
                                  phone.includes(searchTerm) || 
                                  email.includes(searchTerm) ||
                                  patientId.includes(searchTerm);
                }
                
                return matchesAge && matchesVisit && matchesSearch;
            });
            
            renderPatientsTable();
            updateStats();
            
            // Show/hide empty state
            const tableSection = document.getElementById('tableSection');
            const emptyState = document.getElementById('emptyState');
            
            if (filteredPatients.length === 0) {
                tableSection.style.display = 'none';
                emptyState.style.display = 'block';
            } else {
                tableSection.style.display = 'block';
                emptyState.style.display = 'none';
            }
        }

        // Calculate age as number
        function calculateAgeNumber(dob) {
            if (!dob) return 0;
            const today = new Date();
            const birthDate = new Date(dob);
            let age = today.getFullYear() - birthDate.getFullYear();
            const monthDiff = today.getMonth() - birthDate.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            
            return age > 0 ? age : 0;
        }

        // Setup search
        function setupSearch() {
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', applyFilters);
        }

        // Update user avatar with first letter of admin email
        async function updateUserAvatar() {
            try {
                const response = await fetch('/admin/profile/api');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        const firstLetter = data.email ? data.email.charAt(0).toUpperCase() : 'A';
                        document.getElementById('userAvatar').textContent = firstLetter;
                    }
                }
            } catch (error) {
                console.error('Error fetching user info:', error);
                document.getElementById('userAvatar').textContent = 'A';
            }
        }

        // Load notifications
        async function loadNotifications() {
            try {
                const response = await fetch('/admin/api/notifications?limit=10');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        updateNotificationDisplay(data.notifications, data.pagination.unread_count);
                    }
                }
            } catch (error) {
                console.error('Error loading notifications:', error);
                showEmptyNotifications();
            }
        }

        // Update notification display with real data
        function updateNotificationDisplay(notifications, unreadCount) {
            const badge = document.getElementById('notificationBadge');
            const content = document.getElementById('notificationContent');

            // Update badge
            if (unreadCount > 0) {
                badge.textContent = unreadCount > 99 ? '99+' : unreadCount;
                badge.classList.add('show');
            } else {
                badge.classList.remove('show');
            }

            // Update content
            if (notifications.length === 0) {
                showEmptyNotifications();
                return;
            }

            content.innerHTML = notifications.map(notification => {
                const timeAgo = getTimeAgo(new Date(notification.created_at));
                return `
                    <div style="padding: 12px 0; border-bottom: 1px solid #f1f3f4;">
                        <div style="font-weight: 600; color: #333; font-size: 13px; margin-bottom: 3px;">
                            ${notification.title}
                        </div>
                        <div style="color: #666; font-size: 12px; margin-bottom: 5px;">
                            ${notification.message}
                        </div>
                        <div style="color: #999; font-size: 11px;">
                            ${timeAgo}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Show empty notifications
        function showEmptyNotifications() {
            document.getElementById('notificationContent').innerHTML = `
                <div style="text-align: center; color: #666; padding: 20px;">
                    <i class="fas fa-bell-slash" style="font-size: 24px; margin-bottom: 10px; color: #ccc;"></i>
                    <p>No new notifications</p>
                </div>
            `;
        }

        // Get time ago text
        function getTimeAgo(date) {
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);
            
            if (diffInSeconds < 60) return 'Just now';
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
            if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`;
            
            return date.toLocaleDateString('en-US');
        }

        // Refresh data from database
        async function refreshData() {
            showToast('Refreshing patients data...', 'info');
            await loadPatients();
            showToast('Data refreshed successfully', 'success');
        }

        // Confirm delete
        function confirmDelete(id, fname, lname) {
            currentDeleteId = id;
            const modal = document.getElementById('deleteModal');
            const message = document.getElementById('deleteMessage');
            
            const name = `${fname || 'Unknown'} ${lname || 'Patient'}`;
            message.textContent = `Are you sure you want to delete ${name}? This will also remove all associated appointments and treatment history. This action cannot be undone.`;
            modal.style.display = 'flex';
        }

        // Close modal
        function closeModal() {
            const modal = document.getElementById('deleteModal');
            modal.style.display = 'none';
            currentDeleteId = null;
        }

        // Delete patient with API call
        document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
            if (currentDeleteId) {
                try {
                    const response = await fetch(`/admin/patients/${currentDeleteId}/delete`, {
                        method: 'GET'
                    });
                    
                    if (response.ok) {
                        // Remove from local data and refresh display
                        const patientIndex = patientsData.findIndex(p => p.patient_id === currentDeleteId);
                        if (patientIndex > -1) {
                            const deletedPatient = patientsData[patientIndex];
                            patientsData.splice(patientIndex, 1);
                            
                            applyFilters();
                            showToast(`${deletedPatient.fname} ${deletedPatient.lname} deleted successfully`, 'success');
                        }
                    } else {
                        throw new Error('Failed to delete patient');
                    }
                    
                } catch (error) {
                    console.error('Error deleting patient:', error);
                    showToast('Error deleting patient: ' + error.message, 'error');
                }
                
                closeModal();
            }
        });

        // Toggle notifications dropdown
        function toggleNotifications() {
            const dropdown = document.getElementById('notificationDropdown');
            const isVisible = dropdown.classList.contains('show');
            
            if (isVisible) {
                dropdown.classList.remove('show');
            } else {
                dropdown.classList.add('show');
                loadNotifications();
            }
        }

        // Toggle profile dropdown
        function toggleDropdown() {
            const menu = document.getElementById('profileDropdown');
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
                ${message}
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }, 3000);
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            // Close profile dropdown
            const profileDropdown = document.querySelector('.profile-dropdown');
            if (!profileDropdown.contains(event.target)) {
                document.getElementById('profileDropdown').style.display = 'none';
            }
            
            // Close notification dropdown
            const notificationContainer = document.querySelector('.notification-container');
            if (!notificationContainer.contains(event.target)) {
                document.getElementById('notificationDropdown').classList.remove('show');
            }
            
            // Close modal
            const modal = document.getElementById('deleteModal');
            if (event.target === modal) {
                closeModal();
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            // ESC to close modal
            if (event.key === 'Escape') {
                closeModal();
                document.getElementById('notificationDropdown').classList.remove('show');
                document.getElementById('profileDropdown').style.display = 'none';
            }
            
            // Ctrl+F to focus search
            if (event.ctrlKey && event.key === 'f') {
                event.preventDefault();
                document.getElementById('searchInput').focus();
            }
        });

        // Auto-refresh functionality
        setInterval(() => {
            loadNotifications();
        }, 60000); // Check every minute

        // Handle connection status
        window.addEventListener('online', function() {
            showToast('Connection restored', 'success');
        });

        window.addEventListener('offline', function() {
            showToast('Connection lost', 'error');
        });

        // Add slideOutRight animation
        const additionalStyles = document.createElement('style');
        additionalStyles.textContent = `
            @keyframes slideOutRight {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(additionalStyles);
    </script>
</body>
</html>