<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Appointment - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            margin: 0;
        }

        /* Sidebar - Consistent with admin-dentist */
        .sidebar {
            width: 180px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            position: fixed;
            height: 100vh;
            padding: 0;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
            color: #4A90E2;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 2px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        /* Main Content */
        .main {
            margin-left: 180px;
            padding: 0;
            min-height: 100vh;
        }

        /* Top Bar */
        .top-bar {
            background: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }

        .back-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .back-btn {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .back-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        .page-info h1 {
            font-size: 24px;
            color: #333;
            margin: 0 0 5px 0;
            font-weight: 600;
        }

        .page-info p {
            color: #666;
            margin: 0;
            font-size: 13px;
        }

        .appointment-id-badge {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .notification-container {
            position: relative;
        }

        .notification-icon {
            position: relative;
            width: 20px;
            height: 20px;
            cursor: pointer;
            color: #666;
            transition: color 0.3s ease;
        }

        .notification-icon:hover {
            color: #4A90E2;
        }

        .profile-dropdown {
            position: relative;
        }

        .user-info {
            display: flex;
            align-items: center;
            cursor: pointer;
            gap: 10px;
        }

        .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .user-details strong {
            display: block;
            font-size: 13px;
            color: #333;
        }

        .user-details small {
            color: #666;
            font-size: 11px;
        }

        /* Content */
        .content {
            padding: 30px;
        }

        /* Alert Messages */
        .alert {
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
            align-items: center;
            gap: 10px;
            font-weight: 500;
            animation: slideDown 0.3s ease;
        }

        .alert.success {
            background: linear-gradient(135deg, #d1f2eb, #a3e9d0);
            color: #0c5a40;
            border-left: 4px solid #10b981;
        }

        .alert.error {
            background: linear-gradient(135deg, #f8d7da, #f1aeb5);
            color: #721c24;
            border-left: 4px solid #dc3545;
        }

        .alert.info {
            background: linear-gradient(135deg, #cce5ff, #99d6ff);
            color: #004085;
            border-left: 4px solid #4A90E2;
        }

        /* Main Content Grid */
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.12);
        }

        .card h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 18px;
            display: flex;
            align-items: center;
            gap: 10px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f3f4;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #f1f3f4;
        }

        .info-item:last-child {
            border-bottom: none;
        }

        .info-label {
            font-weight: 600;
            color: #555;
            font-size: 14px;
        }

        .info-value {
            color: #333;
            font-weight: 500;
            font-size: 14px;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending {
            background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
            color: #2d3436;
        }

        .status-confirm {
            background: linear-gradient(135deg, #55efc4, #00b894);
            color: white;
        }

        .status-cancel {
            background: linear-gradient(135deg, #fd79a8, #e84393);
            color: white;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .form-control:focus {
            outline: none;
            border-color: #4A90E2;
            background: white;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .datetime-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .time-slots {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
            gap: 10px;
            margin-top: 10px;
            max-height: 200px;
            overflow-y: auto;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .time-slot {
            padding: 8px 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            text-align: center;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
            background: white;
        }

        .time-slot:hover {
            border-color: #4A90E2;
            background: rgba(74, 144, 226, 0.1);
        }

        .time-slot.selected {
            background: #4A90E2;
            color: white;
            border-color: #4A90E2;
        }

        .time-slot.unavailable {
            background: #f8d7da;
            color: #721c24;
            cursor: not-allowed;
            opacity: 0.7;
        }

        /* Buttons */
        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 2px solid #e9ecef;
        }

        .btn-secondary:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 25px;
            padding-top: 20px;
            border-top: 2px solid #f1f3f4;
        }

        /* Loading */
        .loading {
            display: none;
            text-align: center;
            padding: 60px;
            color: #666;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(74, 144, 226, 0.1);
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Modal */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
            z-index: 3000;
            display: none;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f3f4;
        }

        .modal-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ffebee, #ffcdd2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #d32f2f;
            font-size: 24px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .modal-message {
            margin-bottom: 25px;
            color: #666;
            line-height: 1.5;
            font-size: 14px;
        }

        .modal-buttons {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
        }

        /* Toast notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 4000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease;
            min-width: 300px;
        }

        .toast.success {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .toast.error {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .toast.info {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main {
                margin-left: 0;
            }
            
            .top-bar {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .datetime-group {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/admin/dashboard"><i class="fas fa-chart-bar"></i> Dashboard</a></li>
            <li><a href="/admin/schedule"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
            <li class="active"><a href="/admin/appointments"><i class="fas fa-hospital"></i> Appointments</a></li>
            <li><a href="/admin/dentists"><i class="fas fa-user-md"></i> Dentists</a></li>
            <li><a href="/admin/patients"><i class="fas fa-users"></i> Patients</a></li>
            <li><a href="/admin/treatments"><i class="fas fa-tooth"></i> Treatments</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="back-section">
                <button class="back-btn" onclick="goBack()">
                    <i class="fas fa-arrow-left"></i>
                    Back
                </button>
                <div class="page-info">
                    <h1>Edit Appointment</h1>
                    <p>Modify appointment details and schedule</p>
                </div>
            </div>
            <div class="appointment-id-badge" id="appointmentIdBadge">
                ID: Loading...
            </div>
            <div class="user-section">
                <div class="notification-container">
                    <i class="fas fa-bell notification-icon"></i>
                </div>
                <div class="profile-dropdown">
                    <div class="user-info">
                        <div class="avatar" id="userAvatar">A</div>
                        <div class="user-details">
                            <strong>Hello Admin</strong>
                            <small>administrator</small>
                        </div>
                        <i class="fas fa-caret-down"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content -->
        <div class="content">
            <!-- Alert Messages -->
            <div class="alert" id="alertMessage">
                <i class="fas fa-check-circle"></i>
                <span></span>
            </div>

            <!-- Loading -->
            <div class="loading" id="loading">
                <div class="loading-spinner"></div>
                <p>Loading appointment data...</p>
            </div>

            <!-- Main Content -->
            <div class="main-content" id="mainContent" style="display: none;">
                <!-- Current Information -->
                <div class="card">
                    <h2>
                        <i class="fas fa-info-circle" style="color: #4A90E2;"></i>
                        Current Information
                    </h2>
                    <div id="currentInfo">
                        <div class="info-item">
                            <span class="info-label">Patient:</span>
                            <span class="info-value" id="currentPatient">-</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Dentist:</span>
                            <span class="info-value" id="currentDentist">-</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Treatment:</span>
                            <span class="info-value" id="currentTreatment">-</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Date & Time:</span>
                            <span class="info-value" id="currentDateTime">-</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Status:</span>
                            <span class="info-value">
                                <span id="currentStatus" class="status-badge">-</span>
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Phone:</span>
                            <span class="info-value" id="currentPhone">-</span>
                        </div>
                    </div>
                </div>

                <!-- Edit Form -->
                <div class="card">
                    <h2>
                        <i class="fas fa-edit" style="color: #10b981;"></i>
                        Edit Details
                    </h2>
                    <form id="editForm">
                        <div class="form-group">
                            <label for="dentistSelect">Dentist</label>
                            <select id="dentistSelect" name="dentist_id" class="form-control" required>
                                <option value="">Select Dentist</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="treatmentSelect">Treatment</label>
                            <select id="treatmentSelect" name="treatment_id" class="form-control" required>
                                <option value="">Select Treatment</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="statusSelect">Status</label>
                            <select id="statusSelect" name="status" class="form-control" required>
                                <option value="pending">Pending</option>
                                <option value="confirm">Confirmed</option>
                                <option value="cancel">Cancelled</option>
                            </select>
                        </div>

                        <div class="datetime-group">
                            <div class="form-group">
                                <label for="appointmentDate">Date</label>
                                <input type="date" id="appointmentDate" name="appointment_date" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="appointmentTime">Time</label>
                                <input type="time" id="appointmentTime" name="appointment_time" class="form-control" required>
                            </div>
                        </div>

                        <div class="form-group">
                            <label>Available Time Slots</label>
                            <div class="time-slots" id="timeSlots">
                                <div style="grid-column: 1 / -1; text-align: center; color: #666; padding: 20px;">
                                    Select a date and dentist to view available times
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="diagnosis">Diagnosis/Notes</label>
                            <textarea id="diagnosis" name="diagnosis" class="form-control" rows="3" placeholder="Enter diagnosis or notes..."></textarea>
                        </div>

                        <div class="form-group">
                            <label for="nextAppointment">Next Appointment (Optional)</label>
                            <input type="date" id="nextAppointment" name="next_appointment" class="form-control">
                        </div>

                        <div class="action-buttons">
                            <button type="button" class="btn btn-secondary" onclick="goBack()">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                            <button type="button" class="btn btn-danger" onclick="deleteAppointment()">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                            <button type="submit" class="btn btn-success" id="saveBtn">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h3 class="modal-title">Confirm Delete</h3>
            </div>
            <div class="modal-message">
                Are you sure you want to delete this appointment? This action cannot be undone.
            </div>
            <div class="modal-buttons">
                <button class="btn btn-secondary" onclick="closeDeleteModal()">Cancel</button>
                <button class="btn btn-danger" onclick="confirmDelete()">Delete Appointment</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let appointmentId = null;
        let currentAppointmentData = null;
        let dentistsData = [];
        let treatmentsData = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            appointmentId = urlParams.get('id');
            
            if (!appointmentId) {
                showAlert('Appointment ID not found', 'error');
                setTimeout(() => goBack(), 2000);
                return;
            }

            document.getElementById('appointmentIdBadge').textContent = `ID: ${appointmentId}`;
            updateUserAvatar();
            initializePage();
        });

        // Update user avatar
        async function updateUserAvatar() {
            try {
                const response = await fetch('/admin/profile/api');
                if (response.ok) {
                    const data = await response.json();
                    const firstLetter = data.email ? data.email.charAt(0).toUpperCase() : 'A';
                    document.getElementById('userAvatar').textContent = firstLetter;
                } else {
                    document.getElementById('userAvatar').textContent = 'A';
                }
            } catch (error) {
                console.error('Error fetching user info:', error);
                document.getElementById('userAvatar').textContent = 'A';
            }
        }

        // Initialize page data
        async function initializePage() {
            showLoading(true);
            
            try {
                await Promise.all([
                    loadAppointmentData(),
                    loadDentists(),
                    loadTreatments()
                ]);
                
                setupEventListeners();
                showLoading(false);
                document.getElementById('mainContent').style.display = 'grid';
            } catch (error) {
                console.error('Error initializing page:', error);
                showAlert('Error loading data: ' + error.message, 'error');
                showLoading(false);
            }
        }

        // Load appointment data
        async function loadAppointmentData() {
            try {
                const response = await fetch(`/admin/api/appointments/${appointmentId}`);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Failed to load appointment (${response.status}): ${errorText}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    currentAppointmentData = data.appointment;
                    populateCurrentInfo();
                    populateForm();
                } else {
                    throw new Error(data.error || 'Failed to load appointment data');
                }
            } catch (error) {
                console.error('Error loading appointment:', error);
                throw error;
            }
        }

        // Load dentists
        async function loadDentists() {
            try {
                const response = await fetch('/admin/api/dentists');
                const data = await response.json();
                
                if (data.success) {
                    dentistsData = data.dentists;
                    populateDentistSelect();
                } else {
                    throw new Error('Failed to load dentists');
                }
            } catch (error) {
                console.error('Error loading dentists:', error);
                throw error;
            }
        }

        // Load treatments
        async function loadTreatments() {
            try {
                const response = await fetch('/admin/api/treatments');
                const data = await response.json();
                
                if (data.success) {
                    treatmentsData = data.treatments;
                    populateTreatmentSelect();
                } else {
                    throw new Error('Failed to load treatments');
                }
            } catch (error) {
                console.error('Error loading treatments:', error);
                throw error;
            }
        }

        // Populate current information display
        function populateCurrentInfo() {
            if (!currentAppointmentData) return;

            const apt = currentAppointmentData;
            
            document.getElementById('currentPatient').textContent = apt.patient_name || 'N/A';
            document.getElementById('currentDentist').textContent = `Dr. ${apt.dentist_name}` || 'N/A';
            document.getElementById('currentTreatment').textContent = apt.treatment_name || 'N/A';
            document.getElementById('currentPhone').textContent = apt.phone || 'N/A';
            
            // Format date and time
            if (apt.time) {
                const date = new Date(apt.time);
                const formatted = date.toLocaleDateString('en-US', {
                    weekday: 'short',
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                document.getElementById('currentDateTime').textContent = formatted;
            }
            
            // Status badge
            const statusElement = document.getElementById('currentStatus');
            const statusText = apt.queue_status.charAt(0).toUpperCase() + apt.queue_status.slice(1);
            statusElement.textContent = statusText;
            statusElement.className = `status-badge status-${apt.queue_status}`;
        }

        // Populate dentist select
        function populateDentistSelect() {
            const select = document.getElementById('dentistSelect');
            select.innerHTML = '<option value="">Select Dentist</option>';
            
            dentistsData.forEach(dentist => {
                const option = document.createElement('option');
                option.value = dentist.dentist_id;
                option.textContent = `Dr. ${dentist.fname} ${dentist.lname} - ${dentist.specialty}`;
                select.appendChild(option);
            });
        }

        // Populate treatment select
        function populateTreatmentSelect() {
            const select = document.getElementById('treatmentSelect');
            select.innerHTML = '<option value="">Select Treatment</option>';
            
            treatmentsData.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment.treatment_id;
                option.textContent = `${treatment.treatment_name} (${treatment.duration} min)`;
                select.appendChild(option);
            });
        }

        // Populate form with current data
        function populateForm() {
            if (!currentAppointmentData) return;

            const apt = currentAppointmentData;
            
            // Set form values
            document.getElementById('dentistSelect').value = apt.dentist_id || '';
            document.getElementById('treatmentSelect').value = apt.treatment_id || '';
            document.getElementById('statusSelect').value = apt.queue_status || 'pending';
            document.getElementById('diagnosis').value = apt.diagnosis || '';
            
            if (apt.next_appointment) {
                document.getElementById('nextAppointment').value = apt.next_appointment;
            }
            
            // Set date and time
            if (apt.time) {
                const date = new Date(apt.time);
                document.getElementById('appointmentDate').value = date.toISOString().split('T')[0];
                document.getElementById('appointmentTime').value = date.toTimeString().substr(0, 5);
            }
            
            // Load time slots if dentist and date are set
            if (apt.dentist_id && apt.time) {
                loadTimeSlots();
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            // Form submission
            document.getElementById('editForm').addEventListener('submit', handleFormSubmit);
            
            // Date/dentist change - reload time slots
            document.getElementById('appointmentDate').addEventListener('change', loadTimeSlots);
            document.getElementById('dentistSelect').addEventListener('change', loadTimeSlots);
        }

        // Load time slots
        async function loadTimeSlots() {
            const date = document.getElementById('appointmentDate').value;
            const dentistId = document.getElementById('dentistSelect').value;
            
            const container = document.getElementById('timeSlots');
            
            if (!date || !dentistId) {
                container.innerHTML = '<div style="grid-column: 1 / -1; text-align: center; color: #666; padding: 20px;">Select a date and dentist to view available times</div>';
                return;
            }

            container.innerHTML = '<div style="grid-column: 1 / -1; text-align: center; color: #666; padding: 20px;"><i class="fas fa-spinner fa-spin"></i> Loading...</div>';

            try {
                const response = await fetch(`/admin/api/dentists/${dentistId}/schedule?date=${date}`);
                
                if (response.ok) {
                    const data = await response.json();
                    renderTimeSlots(data.timeSlots || []);
                } else {
                    renderDefaultTimeSlots();
                }
            } catch (error) {
                console.error('Error loading time slots:', error);
                renderDefaultTimeSlots();
            }
        }

        // Render time slots
        function renderTimeSlots(timeSlots) {
            const container = document.getElementById('timeSlots');
            
            if (timeSlots.length === 0) {
                renderDefaultTimeSlots();
                return;
            }

            let slotsHTML = '';
            timeSlots.forEach(slot => {
                const currentTime = document.getElementById('appointmentTime').value;
                const isSelected = slot.time === currentTime;
                const statusClass = isSelected ? 'selected' : (slot.available ? '' : 'unavailable');
                
                slotsHTML += `
                    <div class="time-slot ${statusClass}" 
                         onclick="${slot.available || isSelected ? `selectTimeSlot('${slot.time}')` : ''}"
                         data-time="${slot.time}">
                        ${slot.time}
                    </div>
                `;
            });

            container.innerHTML = slotsHTML;
        }

        // Render default time slots
        function renderDefaultTimeSlots() {
            const container = document.getElementById('timeSlots');
            let slotsHTML = '';

            for (let hour = 8; hour <= 18; hour++) {
                const timeValue = `${hour.toString().padStart(2, '0')}:00`;
                const currentTime = document.getElementById('appointmentTime').value;
                const isSelected = timeValue === currentTime;
                
                slotsHTML += `
                    <div class="time-slot ${isSelected ? 'selected' : ''}" 
                         onclick="selectTimeSlot('${timeValue}')"
                         data-time="${timeValue}">
                        ${timeValue}
                    </div>
                `;
            }

            container.innerHTML = slotsHTML;
        }

        // Select time slot
        function selectTimeSlot(time) {
            // Update time input
            document.getElementById('appointmentTime').value = time;
            
            // Update visual selection
            document.querySelectorAll('.time-slot').forEach(slot => {
                slot.classList.remove('selected');
            });
            
            const selectedSlot = document.querySelector(`[data-time="${time}"]`);
            if (selectedSlot) {
                selectedSlot.classList.add('selected');
            }
        }

        // Handle form submission
        async function handleFormSubmit(event) {
            event.preventDefault();
            
            const saveBtn = document.getElementById('saveBtn');
            const originalContent = saveBtn.innerHTML;
            
            // Disable button and show loading
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

            try {
                const formData = new FormData(event.target);
                
                // Combine date and time
                const date = formData.get('appointment_date');
                const time = formData.get('appointment_time');
                const datetime = `${date}T${time}:00`;
                
                const appointmentData = {
                    dentist_id: formData.get('dentist_id'),
                    treatment_id: formData.get('treatment_id'),
                    appointment_datetime: datetime,
                    status: formData.get('status'),
                    diagnosis: formData.get('diagnosis') || null,
                    next_appointment: formData.get('next_appointment') || null
                };

                // Validate required fields
                if (!appointmentData.dentist_id || !appointmentData.treatment_id || !date || !time) {
                    throw new Error('Please fill in all required fields');
                }

                const response = await fetch(`/admin/api/appointments/${appointmentId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(appointmentData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `Server error: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    showAlert('Appointment updated successfully!', 'success');
                    
                    // Reload appointment data
                    await loadAppointmentData();
                    
                    // Redirect after delay
                    setTimeout(() => {
                        goBack();
                    }, 2000);
                } else {
                    throw new Error(result.error || 'Failed to update appointment');
                }

            } catch (error) {
                console.error('Error updating appointment:', error);
                showAlert(error.message, 'error');
            } finally {
                // Restore button
                saveBtn.disabled = false;
                saveBtn.innerHTML = originalContent;
            }
        }

        // Delete appointment
        function deleteAppointment() {
            document.getElementById('deleteModal').style.display = 'flex';
        }

        // Close delete modal
        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }

        // Confirm delete
        async function confirmDelete() {
            const modal = document.getElementById('deleteModal');
            modal.style.display = 'none';
            
            showLoading(true);
            
            try {
                const response = await fetch(`/admin/api/appointments/${appointmentId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `Server error: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    showAlert('Appointment deleted successfully', 'success');
                    setTimeout(() => {
                        goBack();
                    }, 1500);
                } else {
                    throw new Error(result.error || 'Failed to delete appointment');
                }
                
            } catch (error) {
                console.error('Error deleting appointment:', error);
                showAlert(error.message, 'error');
                showLoading(false);
            }
        }

        // Go back to appointments list
        function goBack() {
            if (document.referrer && document.referrer.includes('/admin/appointments')) {
                window.history.back();
            } else {
                window.location.href = '/admin/appointments';
            }
        }

        // Show loading overlay
        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'block' : 'none';
            document.getElementById('mainContent').style.display = show ? 'none' : 'grid';
        }

        // Show alert message
        function showAlert(message, type = 'info') {
            // Remove existing toasts
            document.querySelectorAll('.toast').forEach(toast => toast.remove());
            
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(toast);
            
            // Auto remove after 4 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.style.animation = 'slideOutRight 0.3s ease';
                    setTimeout(() => {
                        if (toast.parentNode) {
                            toast.remove();
                        }
                    }, 300);
                }
            }, 4000);
        }

        // Handle keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Escape to close modals or go back
            if (e.key === 'Escape') {
                const modal = document.getElementById('deleteModal');
                if (modal.style.display === 'flex') {
                    closeDeleteModal();
                } else {
                    goBack();
                }
            }
            
            // Ctrl+S to save
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                document.getElementById('editForm').dispatchEvent(new Event('submit'));
            }
        });

        // Handle online/offline status
        window.addEventListener('online', () => {
            showAlert('Connection restored', 'success');
        });

        window.addEventListener('offline', () => {
            showAlert('Connection lost - Working offline', 'error');
        });
    </script>
</body>
</html>