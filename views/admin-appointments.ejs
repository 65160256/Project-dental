<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Appointments - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            margin: 0;
        }

        /* Sidebar */
        .sidebar {
            width: 200px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            position: fixed;
            height: 100vh;
            padding: 0;
            color: #fff;
            box-shadow: 4px 0 15px rgba(0,0,0,0.1);
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .sidebar .logo {
            text-align: center;
            padding: 25px 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            background: rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
            padding: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            font-size: 28px;
            color: white;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            opacity: 0.95;
        }

        .sidebar ul {
            list-style: none;
            padding: 20px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 3px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 15px 25px;
            color: rgba(255,255,255,0.85);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 12px;
            border-radius: 0 25px 25px 0;
            margin-right: 15px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background: rgba(255,255,255,0.15);
            color: white;
            transform: translateX(5px);
        }

        .sidebar ul li a i {
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main {
            margin-left: 200px;
            padding: 0;
            min-height: 100vh;
        }

        /* Top Bar */
        .top-bar {
            background: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            position: relative;
            z-index: 100;
        }

        .search-section {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .search-section label {
            font-weight: 600;
            color: #555;
            font-size: 14px;
        }

        .search-box {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            padding: 10px 20px;
            display: flex;
            align-items: center;
            width: 280px;
            transition: all 0.3s ease;
        }

        .search-box:focus-within {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .search-box i {
            color: #666;
            margin-right: 10px;
            font-size: 14px;
        }

        .search-box input {
            border: none;
            background: transparent;
            outline: none;
            width: 100%;
            font-size: 14px;
            color: #333;
        }

        .search-box input::placeholder {
            color: #999;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .notification-container {
            position: relative;
        }

        .notification-icon {
            position: relative;
            width: 24px;
            height: 24px;
            cursor: pointer;
            color: #666;
            transition: all 0.3s ease;
            padding: 8px;
            border-radius: 8px;
        }

        .notification-icon:hover {
            color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }

        .notification-badge {
            position: absolute;
            top: 0;
            right: 0;
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: 600;
            display: none;
            border: 2px solid white;
        }

        .notification-badge.show {
            display: flex;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .notification-dropdown {
            position: absolute;
            top: 100%;
            right: -10px;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 15px;
            min-width: 400px;
            max-width: 450px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            z-index: 2000;
            display: none;
            max-height: 500px;
            overflow: hidden;
        }

        .notification-dropdown.show {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .notification-header {
            padding: 25px;
            border-bottom: 1px solid #e9ecef;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .notification-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .notification-content {
            max-height: 400px;
            overflow-y: auto;
        }

        .notification-item {
            padding: 20px;
            border-bottom: 1px solid #f1f3f4;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

        .notification-item:hover {
            background: #f8f9fa;
        }

        .notification-item:last-child {
            border-bottom: none;
        }

        .notification-item.unread {
            background: linear-gradient(90deg, rgba(102, 126, 234, 0.05), transparent);
            border-left: 4px solid #667eea;
        }

        .notification-item.unread::before {
            content: '';
            position: absolute;
            top: 25px;
            right: 20px;
            width: 10px;
            height: 10px;
            background: #667eea;
            border-radius: 50%;
        }

        .notification-text {
            font-size: 14px;
            color: #333;
            line-height: 1.5;
            margin-bottom: 8px;
        }

        .notification-text strong {
            color: #2c3e50;
            font-weight: 600;
        }

        .notification-text .new-tag {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
            margin-right: 8px;
        }

        .notification-date {
            font-size: 12px;
            color: #666;
            margin-bottom: 10px;
        }

        .notification-actions {
            display: flex;
            gap: 10px;
        }

        .notification-btn {
            padding: 6px 14px;
            border: none;
            border-radius: 20px;
            font-size: 11px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .view-details-btn {
            background: #667eea;
            color: white;
        }

        .view-details-btn:hover {
            background: #5a6fd8;
            transform: translateY(-1px);
        }

        .mark-read-btn {
            background: #e9ecef;
            color: #666;
        }

        .mark-read-btn:hover {
            background: #dee2e6;
        }

        .no-notifications {
            padding: 50px 20px;
            text-align: center;
            color: #666;
        }

        .no-notifications i {
            font-size: 40px;
            color: #ccc;
            margin-bottom: 15px;
        }

        .notification-footer {
            padding: 20px;
            border-top: 1px solid #e9ecef;
            background: #f8f9fa;
            text-align: center;
        }

        .clear-all-btn {
            background: none;
            border: none;
            color: #667eea;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            padding: 5px 0;
        }

        .clear-all-btn:hover {
            text-decoration: underline;
        }

        .profile-dropdown {
            position: relative;
        }

        .user-info {
            display: flex;
            align-items: center;
            cursor: pointer;
            gap: 12px;
            padding: 8px 12px;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .user-info:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 16px;
            font-weight: 600;
        }

        .user-details strong {
            display: block;
            font-size: 14px;
            color: #333;
            font-weight: 600;
        }

        .user-details small {
            color: #666;
            font-size: 12px;
        }

        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            min-width: 180px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            z-index: 1000;
            overflow: hidden;
        }

        .dropdown-menu a {
            display: block;
            padding: 12px 18px;
            text-decoration: none;
            color: #333;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .dropdown-menu a:hover {
            background-color: #f8f9fa;
        }

        /* Content */
        .content {
            padding: 0;
        }

        .page-header {
            background: white;
            padding: 30px;
            border-bottom: 1px solid #e9ecef;
        }

        .page-title {
            font-size: 28px;
            color: #333;
            margin: 0 0 8px 0;
            font-weight: 700;
        }

        .page-subtitle {
            color: #666;
            margin: 0;
            font-size: 16px;
        }

        /* Date Strip */
        .date-strip {
            background: white;
            padding: 20px 30px;
            border-bottom: 1px solid #e9ecef;
        }

        .calendar-bar {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .arrow-btn {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            cursor: pointer;
            font-size: 16px;
            color: #666;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .arrow-btn:hover {
            background: #667eea;
            color: white;
            border-color: #667eea;
            transform: scale(1.05);
        }

        .arrow-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .arrow-btn:disabled:hover {
            background: white;
            color: #666;
            border-color: #e9ecef;
        }

        .calendar-day {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 15px 10px;
            text-align: center;
            cursor: pointer;
            font-size: 13px;
            line-height: 1.4;
            color: #666;
            transition: all 0.3s ease;
            min-width: 80px;
            position: relative;
        }

        .calendar-day:hover {
            background: #f8f9fa;
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .calendar-day.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .calendar-day.today {
            background: linear-gradient(135deg, #10ac84, #00a085);
            color: white;
            border-color: #10ac84;
        }

        .calendar-day.today.active {
            background: #667eea;
            border-color: #667eea;
        }

        .calendar-day .day-name {
            font-weight: 600;
            font-size: 11px;
            opacity: 0.8;
            margin-bottom: 3px;
        }

        .calendar-day .day-number {
            font-weight: 700;
            font-size: 16px;
        }

        /* Tools Bar */
        .tools-bar {
            background: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e9ecef;
        }

        .tools-bar span {
            color: #666;
            font-size: 15px;
            font-weight: 500;
        }

        .tools-bar span i {
            color: #667eea;
            margin-right: 8px;
        }

        .tool-buttons {
            display: flex;
            gap: 12px;
        }

        .btn {
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-light {
            background: #f8f9fa;
            color: #666;
            border: 2px solid #e9ecef;
        }

        .btn-light:hover {
            background: #e9ecef;
            border-color: #dee2e6;
            transform: translateY(-1px);
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: 2px solid transparent;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        /* Appointments Table */
        .table-container {
            background: white;
            margin: 0;
            overflow-x: auto;
        }

        .appointments-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }

        .appointments-table th {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 20px;
            text-align: left;
            font-weight: 700;
            color: #555;
            border-bottom: 2px solid #e9ecef;
            white-space: nowrap;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .appointments-table td {
            padding: 20px;
            border-bottom: 1px solid #f1f3f4;
            color: #333;
            vertical-align: middle;
        }

        .appointments-table tr:hover {
            background: linear-gradient(90deg, rgba(102, 126, 234, 0.02), transparent);
        }

        .status-badge {
            padding: 6px 14px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-pending {
            background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
            color: #2d3436;
        }

        .status-confirm {
            background: linear-gradient(135deg, #55efc4, #00b894);
            color: white;
        }

        .status-cancel {
            background: linear-gradient(135deg, #fd79a8, #e84393);
            color: white;
        }

        .time-cell {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            color: #667eea;
            font-weight: 600;
            font-size: 13px;
        }

        .patient-name {
            font-weight: 600;
            color: #2d3436;
        }

        .dentist-name {
            color: #00b894;
            font-weight: 600;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            padding: 6px 10px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .action-btn:hover {
            transform: translateY(-1px);
        }

        .btn-view {
            background: #667eea;
            color: white;
        }

        .btn-view:hover {
            background: #5a6fd8;
        }

        .btn-edit {
            background: #fdcb6e;
            color: #2d3436;
        }

        .btn-edit:hover {
            background: #e17055;
            color: white;
        }

        .btn-delete {
            background: #fd79a8;
            color: white;
        }

        .btn-delete:hover {
            background: #e84393;
        }

        /* Loading */
        .loading {
            text-align: center;
            padding: 80px;
            color: #666;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid rgba(102, 126, 234, 0.1);
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 25px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 80px 30px;
            color: #666;
        }

        .empty-state i {
            font-size: 64px;
            color: #ddd;
            margin-bottom: 25px;
        }

        .empty-state h3 {
            margin: 0 0 15px 0;
            color: #999;
            font-size: 24px;
        }

        .empty-state p {
            margin: 0;
            color: #aaa;
            font-size: 16px;
        }

        /* Toast notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 4000;
            box-shadow: 0 5px 20px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease;
            min-width: 300px;
        }

        .toast.success {
            background: linear-gradient(135deg, #00b894, #00a085);
        }

        .toast.error {
            background: linear-gradient(135deg, #e17055, #d63031);
        }

        .toast.info {
            background: linear-gradient(135deg, #667eea, #764ba2);
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes slideOutRight {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        /* Modal */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
            z-index: 3000;
            display: none;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 15px;
            padding: 30px;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 25px 50px rgba(0,0,0,0.3);
            position: relative;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 700;
            color: #333;
        }

        .close {
            background: none;
            border: none;
            font-size: 28px;
            cursor: pointer;
            color: #666;
            padding: 0;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .close:hover {
            background: #f8f9fa;
            color: #333;
        }

        /* Filter Panel */
        .filter-panel {
            background: white;
            padding: 25px 30px;
            border-bottom: 1px solid #e9ecef;
            display: none;
        }

        .filter-panel.show {
            display: block;
            animation: slideDown 0.3s ease;
        }

        .filter-row {
            display: flex;
            gap: 20px;
            align-items: end;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-group label {
            font-weight: 600;
            color: #555;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .filter-group select,
        .filter-group input {
            padding: 10px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            min-width: 150px;
            transition: all 0.3s ease;
        }

        .filter-group select:focus,
        .filter-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .filter-actions {
            display: flex;
            gap: 10px;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .sidebar {
                width: 60px;
            }
            
            .sidebar .logo h3,
            .sidebar ul li a span {
                display: none;
            }
            
            .main {
                margin-left: 60px;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main {
                margin-left: 0;
            }
            
            .calendar-bar {
                flex-wrap: wrap;
                gap: 8px;
            }
            
            .calendar-day {
                min-width: 70px;
                padding: 12px 8px;
                font-size: 12px;
            }
            
            .tools-bar {
                flex-direction: column;
                gap: 15px;
                align-items: flex-start;
            }
            
            .table-container {
                margin: 0;
            }
            
            .appointments-table {
                font-size: 12px;
            }
            
            .appointments-table th,
            .appointments-table td {
                padding: 12px;
            }

            .top-bar {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }

            .search-section {
                justify-content: center;
            }

            .search-box {
                width: 100%;
                max-width: 300px;
            }
        }

        /* Custom scrollbar */
        .notification-content::-webkit-scrollbar,
        .modal-content::-webkit-scrollbar {
            width: 8px;
        }

        .notification-content::-webkit-scrollbar-track,
        .modal-content::-webkit-scrollbar-track {
            background: #f1f3f4;
        }

        .notification-content::-webkit-scrollbar-thumb,
        .modal-content::-webkit-scrollbar-thumb {
            background: #c1c8cd;
            border-radius: 4px;
        }

        .notification-content::-webkit-scrollbar-thumb:hover,
        .modal-content::-webkit-scrollbar-thumb:hover {
            background: #a8b0b5;
        }

        /* Additional animations */
        .appointments-table tr {
            transition: all 0.3s ease;
        }

        .calendar-day {
            position: relative;
            overflow: hidden;
        }

        .calendar-day::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.5s ease;
        }

        .calendar-day:hover::before {
            left: 100%;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/admin/dashboard"><i class="fas fa-calendar-alt"></i> <span>Schedule</span></a></li>
            <li class="active"><a href="/admin/appointments"><i class="fas fa-hospital"></i> <span>Appointments</span></a></li>
            <li><a href="/admin/dentists"><i class="fas fa-user-md"></i> <span>Dentists</span></a></li>
            <li><a href="/admin/patients"><i class="fas fa-users"></i> <span>Patients</span></a></li>
            <li><a href="/admin/treatments"><i class="fas fa-tooth"></i> <span>Treatments</span></a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="search-section">
                <label>Search:</label>
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="Patient name, treatment..." id="searchInput" />
                </div>
            </div>
            <div class="user-section">
                <div class="notification-container">
                    <i class="fas fa-bell notification-icon" onclick="toggleNotifications()"></i>
                    <div class="notification-badge" id="notificationBadge">0</div>
                    
                    <div class="notification-dropdown" id="notificationDropdown">
                        <div class="notification-header">
                            <h3>Notifications</h3>
                        </div>
                        <div class="notification-content" id="notificationContent">
                            <!-- Notifications will be loaded here -->
                        </div>
                        <div class="notification-footer">
                            <button class="clear-all-btn" onclick="markAllAsRead()">Mark all as read</button>
                        </div>
                    </div>
                </div>
                
                <div class="profile-dropdown">
                    <div class="user-info" onclick="toggleDropdown()">
                        <div class="avatar" id="userAvatar">A</div>
                        <div class="user-details">
                            <strong id="userName">Admin</strong>
                            <small id="userRole">Administrator</small>
                        </div>
                        <i class="fas fa-caret-down"></i>
                    </div>
                    <div class="dropdown-menu" id="profileDropdown">
                        <a href="/admin/profile"><i class="fas fa-user"></i> My Profile</a>
                        <hr style="margin: 5px 0; border: none; border-top: 1px solid #e9ecef;" />
                        <a href="/logout"><i class="fas fa-sign-out-alt"></i> Log Out</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="content">
            <!-- Page Header -->
            <div class="page-header">
                <h1 class="page-title">Appointments Management</h1>
                <p class="page-subtitle">View, manage and track all patient appointments efficiently</p>
            </div>

            <!-- Filter Panel -->
            <div class="filter-panel" id="filterPanel">
                <div class="filter-row">
                    <div class="filter-group">
                        <label>Status</label>
                        <select id="filterStatus">
                            <option value="">All Status</option>
                            <option value="pending">Pending</option>
                            <option value="confirm">Confirmed</option>
                            <option value="cancel">Cancelled</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Dentist</label>
                        <select id="filterDentist">
                            <option value="">All Dentists</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Treatment</label>
                        <select id="filterTreatment">
                            <option value="">All Treatments</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Time Range</label>
                        <select id="filterTimeRange">
                            <option value="">All Day</option>
                            <option value="morning">Morning (6-12)</option>
                            <option value="afternoon">Afternoon (12-18)</option>
                            <option value="evening">Evening (18-22)</option>
                        </select>
                    </div>
                    <div class="filter-actions">
                        <button class="btn btn-light" onclick="clearFilters()">
                            <i class="fas fa-times"></i> Clear
                        </button>
                        <button class="btn btn-primary" onclick="applyFilters()">
                            <i class="fas fa-filter"></i> Apply
                        </button>
                    </div>
                </div>
            </div>

            <!-- Date Strip -->
            <div class="date-strip">
                <div class="calendar-bar" id="calendarBar">
                    <button id="prevWeek" class="arrow-btn" title="Previous Week">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div id="dateButtons" style="display: flex; gap: 10px;">
                        <!-- Date buttons will be generated here -->
                    </div>
                    <button id="nextWeek" class="arrow-btn" title="Next Week">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>

            <!-- Tools Bar -->
            <div class="tools-bar">
                <span><i class="fas fa-calendar-check"></i> <span id="appointmentCount">0</span> appointments on <span id="selectedDateText">today</span></span>
                <div class="tool-buttons">
                    <button class="btn btn-light" onclick="toggleFilters()">
                        <i class="fas fa-filter"></i> Filters
                    </button>
                    <button class="btn btn-light" onclick="refreshAppointments()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                    <button class="btn btn-light" onclick="exportAppointments()">
                        <i class="fas fa-download"></i> Export
                    </button>
                    <button class="btn btn-primary" onclick="addNewAppointment()">
                        <i class="fas fa-plus"></i> New Appointment
                    </button>
                </div>
            </div>

            <!-- Loading -->
            <div class="loading" id="loading" style="display: none;">
                <div class="loading-spinner"></div>
                <p>Loading appointments...</p>
            </div>

            <!-- Appointments Table -->
            <div class="table-container">
                <table class="appointments-table">
                    <thead>
                        <tr>
                            <th><i class="fas fa-clock"></i> Time</th>
                            <th><i class="fas fa-user"></i> Patient</th>
                            <th><i class="fas fa-tooth"></i> Treatment</th>
                            <th><i class="fas fa-user-md"></i> Dentist</th>
                            <th><i class="fas fa-phone"></i> Contact</th>
                            <th><i class="fas fa-info-circle"></i> Status</th>
                            <th><i class="fas fa-cogs"></i> Actions</th>
                        </tr>
                    </thead>
                    <tbody id="appointmentTableBody">
                        <!-- Appointments will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Appointment Detail Modal -->
    <div id="appointmentModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">Appointment Details</h3>
                <button class="close" onclick="closeAppointmentModal()">&times;</button>
            </div>
            <div id="modalBody">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Notification Detail Modal -->
    <div id="notificationModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="notificationModalTitle">Notification Details</h3>
                <button class="close" onclick="closeNotificationModal()">&times;</button>
            </div>
            <div id="notificationModalBody">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let weekOffset = 0;
        let selectedDate = new Date().toISOString().split('T')[0];
        let notificationData = [];
        let appointmentsData = [];
        let originalAppointmentsData = [];
        let notificationDropdownOpen = false;
        let filtersActive = false;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
            setupEventListeners();
            loadUserInfo();
            generateDateButtons();
            loadAppointments();
            loadNotifications();
            loadFilterOptions();
            
            // Auto-refresh every 2 minutes
            setInterval(() => {
                loadNotifications();
                if (!filtersActive) {
                    loadAppointments();
                }
            }, 120000);
        });

        // Initialize page
        function initializePage() {
            // Set initial selected date text
            updateSelectedDateText();
        }

        // Setup event listeners
        function setupEventListeners() {
            // Week navigation
            document.getElementById('prevWeek').addEventListener('click', () => {
                weekOffset--;
                generateDateButtons();
                loadAppointments();
            });

            document.getElementById('nextWeek').addEventListener('click', () => {
                weekOffset++;
                generateDateButtons();
                loadAppointments();
            });

            // Search functionality with debouncing
            let searchTimeout;
            document.getElementById('searchInput').addEventListener('input', function(e) {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    const searchTerm = e.target.value.toLowerCase();
                    filterAppointments(searchTerm);
                }, 300);
            });

            // Filter change listeners
            document.getElementById('filterStatus').addEventListener('change', applyFilters);
            document.getElementById('filterDentist').addEventListener('change', applyFilters);
            document.getElementById('filterTreatment').addEventListener('change', applyFilters);
            document.getElementById('filterTimeRange').addEventListener('change', applyFilters);

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 'f':
                            e.preventDefault();
                            document.getElementById('searchInput').focus();
                            break;
                        case 'n':
                            e.preventDefault();
                            addNewAppointment();
                            break;
                        case 'r':
                            e.preventDefault();
                            refreshAppointments();
                            break;
                    }
                }
                if (e.key === 'Escape') {
                    closeAllModals();
                }
            });
        }

        // Load user information
        async function loadUserInfo() {
            try {
                const response = await fetch('/admin/api/user/current');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        document.getElementById('userName').textContent = data.email.split('@')[0];
                        document.getElementById('userRole').textContent = data.role || 'Administrator';
                        document.getElementById('userAvatar').textContent = data.email.charAt(0).toUpperCase();
                    }
                }
            } catch (error) {
                console.error('Error loading user info:', error);
            }
        }

        // Generate date buttons for calendar bar
        function generateDateButtons() {
            const container = document.getElementById('dateButtons');
            const today = new Date();
            const buttons = [];
            
            container.innerHTML = '';
            
            for (let i = 0; i < 7; i++) {
                const date = new Date();
                date.setDate(today.getDate() + weekOffset * 7 + i);
                const iso = date.toISOString().split('T')[0];
                const isToday = date.toDateString() === today.toDateString();
                const isSelected = selectedDate === iso;
                
                const button = document.createElement('button');
                button.className = `calendar-day ${isSelected ? 'active' : ''} ${isToday ? 'today' : ''}`;
                button.dataset.date = iso;
                button.innerHTML = `
                    <div class="day-name">${date.toLocaleDateString('en-US', { weekday: 'short' })}</div>
                    <div class="day-number">${date.getDate()}</div>
                `;
                
                button.addEventListener('click', () => {
                    document.querySelectorAll('.calendar-day').forEach(b => b.classList.remove('active'));
                    button.classList.add('active');
                    selectedDate = iso;
                    updateSelectedDateText();
                    loadAppointments();
                });
                
                container.appendChild(button);
            }
        }

        // Update selected date text
        function updateSelectedDateText() {
            const date = new Date(selectedDate);
            const today = new Date();
            const isToday = date.toDateString() === today.toDateString();
            
            if (isToday) {
                document.getElementById('selectedDateText').textContent = 'today';
            } else {
                document.getElementById('selectedDateText').textContent = 
                    date.toLocaleDateString('en-US', { 
                        weekday: 'long', 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                    });
            }
        }

        // Load filter options
        async function loadFilterOptions() {
            try {
                // Load dentists
                const dentistResponse = await fetch('/admin/api/dentists');
                if (dentistResponse.ok) {
                    const dentistData = await dentistResponse.json();
                    if (dentistData.success) {
                        const dentistSelect = document.getElementById('filterDentist');
                        dentistData.dentists.forEach(dentist => {
                            const option = document.createElement('option');
                            option.value = dentist.dentist_id;
                            option.textContent = `Dr. ${dentist.fname} ${dentist.lname}`;
                            dentistSelect.appendChild(option);
                        });
                    }
                }

                // Load treatments
                const treatmentResponse = await fetch('/admin/api/treatments');
                if (treatmentResponse.ok) {
                    const treatmentData = await treatmentResponse.json();
                    if (treatmentData.success) {
                        const treatmentSelect = document.getElementById('filterTreatment');
                        treatmentData.treatments.forEach(treatment => {
                            const option = document.createElement('option');
                            option.value = treatment.treatment_id;
                            option.textContent = treatment.treatment_name;
                            treatmentSelect.appendChild(option);
                        });
                    }
                }
            } catch (error) {
                console.error('Error loading filter options:', error);
            }
        }

        // Load appointments from database
        async function loadAppointments() {
            try {
                document.getElementById('loading').style.display = 'block';
                
                const response = await fetch(`/admin/api/appointments?date=${selectedDate}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    appointmentsData = data.appointments;
                    originalAppointmentsData = [...data.appointments];
                    renderAppointments(appointmentsData);
                    updateAppointmentCount(appointmentsData.length);
                } else {
                    throw new Error(data.error || 'Failed to load appointments');
                }
            } catch (error) {
                console.error('Error loading appointments:', error);
                showToast('Failed to load appointments: ' + error.message, 'error');
                renderEmptyState('Failed to load appointments. Please try again.');
            } finally {
                document.getElementById('loading').style.display = 'none';
            }
        }

        // Render appointments table
        function renderAppointments(appointments) {
            const tbody = document.getElementById('appointmentTableBody');
            
            if (appointments.length === 0) {
                renderEmptyState('No appointments found for the selected date and filters');
                return;
            }
            
            tbody.innerHTML = appointments.map(appointment => `
                <tr data-id="${appointment.queue_id}">
                    <td class="time-cell">${formatDateTime(appointment.time)}</td>
                    <td class="patient-name">${appointment.patient_name || 'N/A'}</td>
                    <td>${appointment.treatment_name || 'N/A'}</td>
                    <td class="dentist-name">Dr. ${appointment.dentist_name || 'N/A'}</td>
                    <td>${appointment.phone || 'N/A'}</td>
                    <td>
                        <span class="status-badge status-${appointment.queue_status}">
                            ${appointment.queue_status}
                        </span>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <button class="action-btn btn-view" onclick="viewAppointment(${appointment.queue_id})" title="View Details">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="action-btn btn-edit" onclick="editAppointment(${appointment.queue_id})" title="Edit Appointment">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="action-btn btn-delete" onclick="deleteAppointment(${appointment.queue_id})" title="Cancel Appointment">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        // Render empty state
        function renderEmptyState(message) {
            const tbody = document.getElementById('appointmentTableBody');
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="empty-state">
                        <i class="fas fa-calendar-times"></i>
                        <h3>${message}</h3>
                        <p>Try adjusting your search criteria or selecting a different date</p>
                    </td>
                </tr>
            `;
        }

        // Format date time for display
        function formatDateTime(dateTime) {
            if (!dateTime) return 'N/A';
            
            const date = new Date(dateTime);
            return date.toLocaleString('en-US', {
                month: 'short',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });
        }

        // Update appointment count and pending count
        function updateAppointmentCount(totalCount) {
            const pendingCount = appointmentsData.filter(apt => apt.queue_status === 'pending').length;
            
            document.getElementById('appointmentCount').textContent = totalCount;
            document.getElementById('pendingCount').querySelector('span').textContent = pendingCount;
            
            // Update pending count visibility and styling
            const pendingElement = document.getElementById('pendingCount');
            if (pendingCount > 0) {
                pendingElement.style.display = 'inline-block';
                pendingElement.style.fontWeight = '600';
                pendingElement.style.color = '#ffc107';
            } else {
                pendingElement.style.display = 'none';
            }
        }

        // Show only pending appointments
        function showPendingOnly() {
            const pendingAppointments = originalAppointmentsData.filter(apt => apt.queue_status === 'pending');
            appointmentsData = pendingAppointments;
            renderAppointments(pendingAppointments);
            updateAppointmentCount(pendingAppointments.length);
            
            if (pendingAppointments.length === 0) {
                showToast('ไม่มีการจองที่รอยืนยันในวันนี้', 'info');
            } else {
                showToast(`พบการจองที่รอยืนยัน ${pendingAppointments.length} รายการ`, 'info');
            }
        }

        // Update selected date text in Thai
        function updateSelectedDateText() {
            const date = new Date(selectedDate);
            const today = new Date();
            const isToday = date.toDateString() === today.toDateString();
            
            if (isToday) {
                document.getElementById('selectedDateText').textContent = 'วันนี้';
            } else {
                const thaiMonths = [
                    'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                    'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'
                ];
                const thaiDays = ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัส', 'ศุกร์', 'เสาร์'];
                
                const dayName = thaiDays[date.getDay()];
                const day = date.getDate();
                const month = thaiMonths[date.getMonth()];
                const year = date.getFullYear() + 543; // Convert to Buddhist Era
                
                document.getElementById('selectedDateText').textContent = 
                    `วัน${dayName}ที่ ${day} ${month} ${year}`;
            }
        }

        // Filter appointments based on search and filters
        function filterAppointments(searchTerm = '') {
            let filtered = [...originalAppointmentsData];
            
            // Apply search filter
            if (searchTerm) {
                filtered = filtered.filter(appointment => 
                    (appointment.patient_name && appointment.patient_name.toLowerCase().includes(searchTerm)) ||
                    (appointment.treatment_name && appointment.treatment_name.toLowerCase().includes(searchTerm)) ||
                    (appointment.dentist_name && appointment.dentist_name.toLowerCase().includes(searchTerm)) ||
                    (appointment.phone && appointment.phone.includes(searchTerm))
                );
            }
            
            // Apply status filter
            const statusFilter = document.getElementById('filterStatus').value;
            if (statusFilter) {
                filtered = filtered.filter(appointment => appointment.queue_status === statusFilter);
            }
            
            // Apply dentist filter
            const dentistFilter = document.getElementById('filterDentist').value;
            if (dentistFilter) {
                filtered = filtered.filter(appointment => appointment.dentist_id == dentistFilter);
            }
            
            // Apply treatment filter
            const treatmentFilter = document.getElementById('filterTreatment').value;
            if (treatmentFilter) {
                filtered = filtered.filter(appointment => appointment.treatment_id == treatmentFilter);
            }
            
            // Apply time range filter
            const timeRangeFilter = document.getElementById('filterTimeRange').value;
            if (timeRangeFilter) {
                filtered = filtered.filter(appointment => {
                    const hour = new Date(appointment.time).getHours();
                    switch(timeRangeFilter) {
                        case 'morning': return hour >= 6 && hour < 12;
                        case 'afternoon': return hour >= 12 && hour < 18;
                        case 'evening': return hour >= 18 && hour < 22;
                        default: return true;
                    }
                });
            }
            
            appointmentsData = filtered;
            renderAppointments(filtered);
            updateAppointmentCount(filtered.length);
        }

        // Apply filters
        function applyFilters() {
            filtersActive = true;
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            filterAppointments(searchTerm);
        }

        // Clear filters
        function clearFilters() {
            document.getElementById('filterStatus').value = '';
            document.getElementById('filterDentist').value = '';
            document.getElementById('filterTreatment').value = '';
            document.getElementById('filterTimeRange').value = '';
            document.getElementById('searchInput').value = '';
            filtersActive = false;
            appointmentsData = [...originalAppointmentsData];
            renderAppointments(appointmentsData);
            updateAppointmentCount(appointmentsData.length);
        }

        // Toggle filters panel
        function toggleFilters() {
            const panel = document.getElementById('filterPanel');
            panel.classList.toggle('show');
        }

        // Refresh appointments
        function refreshAppointments() {
            showToast('Refreshing appointments...', 'info');
            loadAppointments();
        }

        // Export appointments
        function exportAppointments() {
            const data = appointmentsData.map(appointment => ({
                'Date & Time': formatDateTime(appointment.time),
                'Patient': appointment.patient_name,
                'Treatment': appointment.treatment_name,
                'Dentist': `Dr. ${appointment.dentist_name}`,
                'Phone': appointment.phone,
                'Status': appointment.queue_status
            }));
            
            const csv = convertToCSV(data);
            downloadCSV(csv, `appointments_${selectedDate}.csv`);
            showToast('Appointments exported successfully', 'success');
        }

        // Convert to CSV
        function convertToCSV(data) {
            if (!data.length) return '';
            
            const headers = Object.keys(data[0]);
            const csvContent = [
                headers.join(','),
                ...data.map(row => headers.map(header => 
                    `"${(row[header] || '').toString().replace(/"/g, '""')}"`
                ).join(','))
            ].join('\n');
            
            return csvContent;
        }

        // Download CSV
        function downloadCSV(csv, filename) {
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

        // View appointment details
        async function viewAppointment(queueId) {
            try {
                const response = await fetch(`/admin/api/appointments/${queueId}`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        showAppointmentModal(data.appointment);
                    } else {
                        showToast('Failed to load appointment details', 'error');
                    }
                } else {
                    showToast('Failed to load appointment details', 'error');
                }
            } catch (error) {
                console.error('Error loading appointment details:', error);
                showToast('Error loading appointment details', 'error');
            }
        }

        // Show appointment modal
        function showAppointmentModal(appointment) {
            const modal = document.getElementById('appointmentModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            
            modalTitle.textContent = `Appointment #${appointment.queue_id}`;
            modalBody.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 25px;">
                    <div>
                        <h4 style="margin: 0 0 15px 0; color: #333; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">
                            <i class="fas fa-user"></i> Patient Information
                        </h4>
                        <p style="margin: 8px 0;"><strong>Name:</strong> ${appointment.patient_name || 'N/A'}</p>
                        <p style="margin: 8px 0;"><strong>Phone:</strong> ${appointment.phone || 'N/A'}</p>
                        <p style="margin: 8px 0;"><strong>Date of Birth:</strong> ${appointment.patient_dob ? new Date(appointment.patient_dob).toLocaleDateString() : 'N/A'}</p>
                        <p style="margin: 8px 0;"><strong>Address:</strong> ${appointment.patient_address || 'N/A'}</p>
                    </div>
                    <div>
                        <h4 style="margin: 0 0 15px 0; color: #333; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">
                            <i class="fas fa-user-md"></i> Treatment Information
                        </h4>
                        <p style="margin: 8px 0;"><strong>Treatment:</strong> ${appointment.treatment_name || 'N/A'}</p>
                        <p style="margin: 8px 0;"><strong>Dentist:</strong> Dr. ${appointment.dentist_name || 'N/A'}</p>
                        <p style="margin: 8px 0;"><strong>Specialty:</strong> ${appointment.dentist_specialty || 'N/A'}</p>
                        <p style="margin: 8px 0;"><strong>Duration:</strong> ${appointment.treatment_duration || 'N/A'} minutes</p>
                    </div>
                </div>
                <div style="margin-bottom: 25px;">
                    <h4 style="margin: 0 0 15px 0; color: #333; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">
                        <i class="fas fa-calendar-alt"></i> Appointment Details
                    </h4>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div>
                            <p style="margin: 8px 0;"><strong>Date & Time:</strong> ${formatDateTime(appointment.time)}</p>
                            <p style="margin: 8px 0;"><strong>Status:</strong> 
                                <span class="status-badge status-${appointment.queue_status}">${appointment.queue_status}</span>
                            </p>
                        </div>
                        <div>
                            <p style="margin: 8px 0;"><strong>Created:</strong> ${appointment.created_at ? new Date(appointment.created_at).toLocaleString() : 'N/A'}</p>
                            <p style="margin: 8px 0;"><strong>Next Appointment:</strong> ${appointment.next_appointment || 'Not scheduled'}</p>
                        </div>
                    </div>
                </div>
                ${appointment.diagnosis ? `
                    <div style="margin-bottom: 25px;">
                        <h4 style="margin: 0 0 15px 0; color: #333; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">
                            <i class="fas fa-notes-medical"></i> Diagnosis & Notes
                        </h4>
                        <p style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 0; line-height: 1.6;">${appointment.diagnosis}</p>
                    </div>
                ` : ''}
                <div style="text-align: right; border-top: 2px solid #e9ecef; padding-top: 20px;">
                    <button onclick="editAppointment(${appointment.queue_id})" class="btn btn-primary" style="margin-right: 10px;">
                        <i class="fas fa-edit"></i> Edit Appointment
                    </button>
                    <button onclick="closeAppointmentModal()" class="btn btn-light">
                        <i class="fas fa-times"></i> Close
                    </button>
                </div>
            `;
            
            modal.style.display = 'flex';
        }

        // Close appointment modal
        function closeAppointmentModal() {
            const modal = document.getElementById('appointmentModal');
            modal.style.display = 'none';
        }

        // Alternative version if you prefer URL parameters:
        function editAppointmentWithParam(queueId) {
            closeAppointmentModal();
            window.location.href = `/admin/appointments/edit/${queueId}`;
        }
        // Edit appointment
        function editAppointment(queueId) {
            // Close appointment modal if open
            closeAppointmentModal();
            
            // Navigate to edit appointment page
            window.location.href = `/admin/appointments/edit?id=${queueId}`;
        }

        // Delete appointment
        async function deleteAppointment(queueId) {
            if (!confirm('Are you sure you want to cancel this appointment?')) {
                return;
            }

            try {
                const response = await fetch(`/admin/api/appointments/${queueId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        showToast('Appointment cancelled successfully', 'success');
                        loadAppointments();
                    } else {
                        showToast(data.error || 'Failed to cancel appointment', 'error');
                    }
                } else {
                    showToast('Failed to cancel appointment', 'error');
                }
            } catch (error) {
                console.error('Error cancelling appointment:', error);
                showToast('Error cancelling appointment', 'error');
            }
        }

        // Add new appointment
        function addNewAppointment() {
            showToast('Add new appointment feature - Coming soon!', 'info');
        }

        // Load notifications from database
        async function loadNotifications() {
            try {
                const response = await fetch('/admin/api/notifications?limit=10');
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        notificationData = data.notifications;
                    } else {
                        await createSampleNotifications();
                    }
                } else {
                    await createSampleNotifications();
                }
                
                renderNotifications();
                updateNotificationBadge();
            } catch (error) {
                console.error('Error loading notifications:', error);
                await createSampleNotifications();
                renderNotifications();
                updateNotificationBadge();
            }
        }

        // Create sample notifications
        async function createSampleNotifications() {
            notificationData = [
                {
                    id: 'apt_1',
                    type: 'appointment',
                    title: 'New Appointment Request',
                    message: 'New appointment from: Yodlux Komsun with Dr. Somchai Toothman',
                    created_at: new Date().toISOString(),
                    is_read: false,
                    is_new: true
                },
                {
                    id: 'apt_2',
                    type: 'appointment',
                    title: 'Appointment Confirmed',
                    message: 'Appointment confirmed for tomorrow at 10:00 AM',
                    created_at: new Date(Date.now() - 1800000).toISOString(),
                    is_read: false,
                    is_new: false
                },
                {
                    id: 'sys_1',
                    type: 'system',
                    title: 'System Update',
                    message: 'System maintenance completed successfully',
                    created_at: new Date(Date.now() - 3600000).toISOString(),
                    is_read: true,
                    is_new: false
                }
            ];
        }

        // Render notifications dropdown
        function renderNotifications() {
            const notificationContent = document.getElementById('notificationContent');
            
            if (notificationData.length === 0) {
                notificationContent.innerHTML = `
                    <div class="no-notifications">
                        <i class="fas fa-bell-slash"></i>
                        <p>No notifications</p>
                    </div>
                `;
                return;
            }

            const sortedNotifications = notificationData.sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
            );
            
            notificationContent.innerHTML = sortedNotifications.map(notification => `
                <div class="notification-item ${!notification.is_read ? 'unread' : ''}" data-id="${notification.id}">
                    <div class="notification-text">
                        ${notification.is_new ? '<span class="new-tag">New</span>' : ''}
                        <strong>${notification.title}:</strong> ${notification.message}
                    </div>
                    <div class="notification-date">${formatNotificationDate(notification.created_at)}</div>
                    <div class="notification-actions">
                        <button class="notification-btn view-details-btn" onclick="viewNotificationDetails('${notification.id}')">
                            View Details
                        </button>
                        ${!notification.is_read ? `
                            <button class="notification-btn mark-read-btn" onclick="markAsRead('${notification.id}')">
                                Mark as read
                            </button>
                        ` : ''}
                    </div>
                </div>
            `).join('');
        }

        // Format notification date
        function formatNotificationDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffInMinutes = Math.floor((now - date) / (1000 * 60));
            
            if (diffInMinutes < 1) return 'Just now';
            if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;
            
            const diffInHours = Math.floor(diffInMinutes / 60);
            if (diffInHours < 24) return `${diffInHours} hours ago`;
            
            const diffInDays = Math.floor(diffInHours / 24);
            if (diffInDays < 7) return `${diffInDays} days ago`;
            
            return date.toLocaleDateString();
        }

        // Update notification badge
        function updateNotificationBadge() {
            const unreadCount = notificationData.filter(n => !n.is_read).length;
            const badge = document.getElementById('notificationBadge');
            
            if (unreadCount > 0) {
                badge.textContent = unreadCount > 99 ? '99+' : unreadCount;
                badge.classList.add('show');
            } else {
                badge.classList.remove('show');
            }
        }

        // Toggle notifications dropdown
        function toggleNotifications() {
            const dropdown = document.getElementById('notificationDropdown');
            notificationDropdownOpen = !notificationDropdownOpen;
            
            if (notificationDropdownOpen) {
                dropdown.classList.add('show');
                loadNotifications();
            } else {
                dropdown.classList.remove('show');
            }
        }

        // View notification details
        function viewNotificationDetails(id) {
            const notification = notificationData.find(n => n.id == id);
            if (notification) {
                notification.is_read = true;
                notification.is_new = false;
                
                showNotificationModal(notification);
                renderNotifications();
                updateNotificationBadge();
            }
        }

        // Show notification modal
        function showNotificationModal(notification) {
            const modal = document.getElementById('notificationModal');
            const modalTitle = document.getElementById('notificationModalTitle');
            const modalBody = document.getElementById('notificationModalBody');
            
            modalTitle.textContent = notification.title;
            modalBody.innerHTML = `
                <div style="margin-bottom: 25px;">
                    <p style="margin: 0 0 15px 0; color: #333; line-height: 1.6; font-size: 16px;"><strong>Message:</strong> ${notification.message}</p>
                    <p style="margin: 0 0 10px 0; color: #666; font-size: 14px;">
                        <i class="fas fa-clock"></i> ${formatNotificationDate(notification.created_at)}
                    </p>
                    <p style="margin: 0; color: #666; font-size: 14px;">
                        <i class="fas fa-tag"></i> Type: ${notification.type}
                    </p>
                </div>
                <div style="text-align: right; border-top: 2px solid #e9ecef; padding-top: 20px;">
                    <button onclick="closeNotificationModal()" class="btn btn-primary">
                        <i class="fas fa-times"></i> Close
                    </button>
                </div>
            `;
            
            modal.style.display = 'flex';
        }

        // Close notification modal
        function closeNotificationModal() {
            const modal = document.getElementById('notificationModal');
            modal.style.display = 'none';
        }

        // Mark notification as read
        function markAsRead(id) {
            const notification = notificationData.find(n => n.id == id);
            if (notification) {
                notification.is_read = true;
                notification.is_new = false;
                
                renderNotifications();
                updateNotificationBadge();
                showToast('Notification marked as read', 'success');
            }
        }

        // Mark all notifications as read
        function markAllAsRead() {
            const unreadCount = notificationData.filter(n => !n.is_read).length;
            
            if (unreadCount === 0) {
                showToast('No unread notifications', 'info');
                return;
            }
            
            notificationData.forEach(n => {
                n.is_read = true;
                n.is_new = false;
            });
            
            renderNotifications();
            updateNotificationBadge();
            showToast(`${unreadCount} notifications marked as read`, 'success');
        }

        // Profile dropdown toggle
        function toggleDropdown() {
            const menu = document.getElementById('profileDropdown');
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        }

        // Close all modals
        function closeAllModals() {
            document.getElementById('appointmentModal').style.display = 'none';
            document.getElementById('notificationModal').style.display = 'none';
            document.getElementById('notificationDropdown').classList.remove('show');
            document.getElementById('profileDropdown').style.display = 'none';
            notificationDropdownOpen = false;
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            // Remove existing toasts
            document.querySelectorAll('.toast').forEach(toast => toast.remove());
            
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.style.animation = 'slideOutRight 0.3s ease';
                    setTimeout(() => {
                        if (toast.parentNode) {
                            toast.remove();
                        }
                    }, 300);
                }
            }, 4000);
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            // Close profile dropdown
            const profileDropdown = document.querySelector('.profile-dropdown');
            if (!profileDropdown.contains(event.target)) {
                document.getElementById('profileDropdown').style.display = 'none';
            }
            
            // Close notification dropdown
            const notificationContainer = document.querySelector('.notification-container');
            if (!notificationContainer.contains(event.target)) {
                document.getElementById('notificationDropdown').classList.remove('show');
                notificationDropdownOpen = false;
            }
            
            // Close modals when clicking outside
            const appointmentModal = document.getElementById('appointmentModal');
            const notificationModal = document.getElementById('notificationModal');
            
            if (event.target === appointmentModal) {
                closeAppointmentModal();
            }
            
            if (event.target === notificationModal) {
                closeNotificationModal();
            }
        });

        // Auto-refresh on window focus
        window.addEventListener('focus', () => {
            loadNotifications();
            if (!filtersActive) {
                loadAppointments();
            }
        });

        // Handle online/offline status
        window.addEventListener('online', () => {
            showToast('Connection restored', 'success');
            loadAppointments();
            loadNotifications();
        });

        window.addEventListener('offline', () => {
            showToast('Connection lost - Working offline', 'error');
        });

        // Add smooth scrolling for better UX
        document.documentElement.style.scrollBehavior = 'smooth';

        // Add loading states for buttons
        function addButtonLoading(button) {
            const originalContent = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
            button.disabled = true;
            
            return () => {
                button.innerHTML = originalContent;
                button.disabled = false;
            };
        }

        // Enhanced error handling
        window.addEventListener('error', function(e) {
            console.error('JavaScript error:', e.error);
            showToast('An unexpected error occurred', 'error');
        });

        // Show initial welcome message
        setTimeout(() => {
            showToast('Welcome to Appointments Management', 'info');
        }, 1000);
    </script>
</body>
</html>