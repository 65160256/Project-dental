<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>การแจ้งเตือนทั้งหมด</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
  <style>
    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f7fa;
      color: #333;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 30px;
    }

    .header {
      background: white;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 2px 15px rgba(0,0,0,0.08);
      margin-bottom: 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .header h1 {
      margin: 0;
      font-size: 28px;
      color: #333;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .header h1 i {
      color: #4A90E2;
    }

    .controls {
      display: flex;
      gap: 12px;
    }

    .btn {
      padding: 12px 24px;
      border-radius: 10px;
      border: none;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .btn-primary {
      background: linear-gradient(135deg, #4A90E2, #2DA8FF);
      color: white;
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
    }

    .btn-secondary {
      background: #f8f9fa;
      color: #666;
      border: 2px solid #e1e5e9;
    }

    .btn-secondary:hover {
      background: #e9ecef;
      border-color: #4A90E2;
      color: #4A90E2;
    }

    .filters {
      background: white;
      padding: 20px 30px;
      border-radius: 15px;
      box-shadow: 0 2px 15px rgba(0,0,0,0.08);
      margin-bottom: 20px;
      display: flex;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }

    .filter-group {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .filter-group label {
      font-weight: 600;
      font-size: 14px;
      color: #555;
    }

    .filter-select {
      padding: 10px 15px;
      border: 2px solid #e1e5e9;
      border-radius: 8px;
      font-size: 14px;
      background: white;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .filter-select:focus {
      outline: none;
      border-color: #4A90E2;
    }

    .notification-list-container {
      background: white;
      border-radius: 15px;
      box-shadow: 0 2px 15px rgba(0,0,0,0.08);
      overflow: hidden;
    }

    .notification-item {
      padding: 25px 30px;
      border-bottom: 1px solid #f0f0f0;
      transition: all 0.3s ease;
      position: relative;
      cursor: pointer;
    }

    .notification-item:last-child {
      border-bottom: none;
    }

    .notification-item:hover {
      background: #f8f9fa;
      transform: translateX(5px);
    }

    .notification-item.unread {
      background: #f0f4ff;
    }

    .notification-item.unread::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 4px;
      background: linear-gradient(180deg, #4A90E2, #2DA8FF);
    }

    .notification-header-item {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 10px;
    }

    .notification-title {
      font-size: 16px;
      font-weight: 600;
      color: #333;
      margin-bottom: 8px;
    }

    .notification-icon-type {
      font-size: 24px;
      margin-right: 5px;
    }

    .notification-message {
      font-size: 14px;
      color: #666;
      line-height: 1.6;
      margin-bottom: 12px;
    }

    .notification-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 13px;
      color: #999;
    }

    .notification-time {
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .notification-actions {
      display: flex;
      gap: 10px;
    }

    .action-btn {
      background: none;
      border: none;
      color: #666;
      cursor: pointer;
      padding: 5px 10px;
      border-radius: 5px;
      transition: all 0.3s ease;
      font-size: 13px;
    }

    .action-btn:hover {
      background: #e9ecef;
      color: #4A90E2;
    }

    .badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 600;
    }

    .badge-new {
      background: linear-gradient(135deg, #28a745, #20c997);
      color: white;
    }

    .badge-read {
      background: #e9ecef;
      color: #666;
    }

    .empty-state {
      text-align: center;
      padding: 80px 30px;
      color: #999;
    }

    .empty-state i {
      font-size: 80px;
      color: #ddd;
      margin-bottom: 20px;
    }

    .empty-state h3 {
      margin: 0 0 10px 0;
      font-size: 20px;
      color: #666;
      font-weight: 600;
    }

    .empty-state p {
      margin: 0;
      font-size: 14px;
    }

    .loading {
      text-align: center;
      padding: 60px;
      color: #999;
    }

    .loading i {
      font-size: 48px;
      margin-bottom: 15px;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 10px;
      margin-top: 30px;
      padding: 20px;
    }

    .pagination button {
      padding: 10px 20px;
      border: 2px solid #e1e5e9;
      background: white;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .pagination button:hover:not(:disabled) {
      border-color: #4A90E2;
      color: #4A90E2;
    }

    .pagination button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .pagination span {
      color: #666;
      font-size: 14px;
    }

    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }

      .header {
        flex-direction: column;
        gap: 20px;
        align-items: stretch;
      }

      .controls {
        flex-direction: column;
      }

      .filters {
        flex-direction: column;
        align-items: stretch;
      }

      .notification-item {
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1><i class="fas fa-bell"></i>การแจ้งเตือนทั้งหมด</h1>
      <div class="controls">
        <button class="btn btn-primary" id="markAllReadBtn">
          <i class="fas fa-check-double"></i>อ่านทั้งหมด
        </button>
        <button class="btn btn-secondary" onclick="window.location.href='/patient/dashboard'">
          <i class="fas fa-arrow-left"></i>กลับหน้าหลัก
        </button>
      </div>
    </div>

    <div class="filters">
      <div class="filter-group">
        <label>แสดง:</label>
        <select class="filter-select" id="filterType">
          <option value="all">ทั้งหมด</option>
          <option value="unread">ยังไม่ได้อ่าน</option>
          <option value="read">อ่านแล้ว</option>
        </select>
      </div>
      <div class="filter-group">
        <label>ประเภท:</label>
        <select class="filter-select" id="filterCategory">
          <option value="all">ทุกประเภท</option>
          <option value="new_appointment">นัดหมายใหม่</option>
          <option value="appointment_confirmed">ยืนยันนัดหมาย</option>
          <option value="appointment_cancelled">ยกเลิกนัดหมาย</option>
          <option value="appointment_reminder">เตือนนัดหมาย</option>
          <option value="treatment_completed">บันทึกการรักษา</option>
        </select>
      </div>
    </div>

    <div class="notification-list-container" id="notificationListContainer">
      <div class="loading">
        <i class="fas fa-spinner"></i>
        <p>กำลังโหลดการแจ้งเตือน...</p>
      </div>
    </div>

    <div class="pagination" id="pagination" style="display: none;">
      <button id="prevBtn" disabled><i class="fas fa-chevron-left"></i> ก่อนหน้า</button>
      <span id="pageInfo">หน้า 1</span>
      <button id="nextBtn">ถัดไป <i class="fas fa-chevron-right"></i></button>
    </div>
  </div>

  <script>
    class NotificationManager {
      constructor() {
        this.apiEndpoint = '/patient/api/notifications';
        this.notifications = [];
        this.currentPage = 1;
        this.limit = 20;
        this.filter = 'all';
        this.category = 'all';
        
        this.init();
      }

      init() {
        this.attachEventListeners();
        this.loadNotifications();
      }

      attachEventListeners() {
        document.getElementById('markAllReadBtn')?.addEventListener('click', () => {
          this.markAllAsRead();
        });

        document.getElementById('filterType')?.addEventListener('change', (e) => {
          this.filter = e.target.value;
          this.currentPage = 1;
          this.loadNotifications();
        });

        document.getElementById('filterCategory')?.addEventListener('change', (e) => {
          this.category = e.target.value;
          this.currentPage = 1;
          this.loadNotifications();
        });

        document.getElementById('prevBtn')?.addEventListener('click', () => {
          if (this.currentPage > 1) {
            this.currentPage--;
            this.loadNotifications();
          }
        });

        document.getElementById('nextBtn')?.addEventListener('click', () => {
          this.currentPage++;
          this.loadNotifications();
        });
      }

      async loadNotifications() {
        const container = document.getElementById('notificationListContainer');
        container.innerHTML = `
          <div class="loading">
            <i class="fas fa-spinner"></i>
            <p>กำลังโหลดการแจ้งเตือน...</p>
          </div>
        `;

        try {
          const offset = (this.currentPage - 1) * this.limit;
          const params = new URLSearchParams({
            limit: this.limit,
            offset: offset,
            unread_only: this.filter === 'unread' ? 'true' : 'false'
          });

          const response = await fetch(`${this.apiEndpoint}?${params}`);
          const data = await response.json();

          if (data.success) {
            this.notifications = data.notifications;
            
            // Filter by category if needed
            let filteredNotifications = this.notifications;
            if (this.category !== 'all') {
              filteredNotifications = this.notifications.filter(n => n.type === this.category);
            }
            
            // Filter by read status if needed
            if (this.filter === 'read') {
              filteredNotifications = filteredNotifications.filter(n => n.is_read === 1);
            }

            this.renderNotifications(filteredNotifications);
            this.updatePagination(data.total);
          }
        } catch (error) {
          console.error('เกิดข้อผิดพลาดในการโหลดการแจ้งเตือน:', error);
          container.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-exclamation-triangle"></i>
              <h3>เกิดข้อผิดพลาด</h3>
              <p>ไม่สามารถโหลดการแจ้งเตือนได้ กรุณาลองใหม่อีกครั้ง</p>
            </div>
          `;
        }
      }

      renderNotifications(notifications) {
        const container = document.getElementById('notificationListContainer');

        if (notifications.length === 0) {
          container.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-bell-slash"></i>
              <h3>ไม่มีการแจ้งเตือน</h3>
              <p>คุณไม่มีการแจ้งเตือนในขณะนี้</p>
            </div>
          `;
          return;
        }

        container.innerHTML = notifications.map(notif => this.createNotificationHTML(notif)).join('');

        // Attach click events
        container.querySelectorAll('.notification-item').forEach((item, index) => {
          item.addEventListener('click', (e) => {
            if (!e.target.classList.contains('action-btn')) {
              this.handleNotificationClick(notifications[index]);
            }
          });
        });

        // Attach action button events
        container.querySelectorAll('.mark-read-btn').forEach((btn, index) => {
          btn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.markAsRead(notifications[index].id);
          });
        });

        container.querySelectorAll('.delete-btn').forEach((btn, index) => {
          btn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.deleteNotification(notifications[index].id);
          });
        });
      }

      createNotificationHTML(notif) {
        const icon = this.getNotificationIcon(notif.type);
        const unreadClass = notif.is_read ? '' : 'unread';
        const badgeClass = notif.is_read ? 'badge-read' : 'badge-new';
        const badgeText = notif.is_read ? 'อ่านแล้ว' : 'ใหม่';

        return `
          <div class="notification-item ${unreadClass}" data-id="${notif.id}">
            <div class="notification-header-item">
              <div class="notification-title">
                <span class="notification-icon-type">${icon}</span>
                ${notif.title}
              </div>
              <span class="badge ${badgeClass}">${badgeText}</span>
            </div>
            
            <div class="notification-message">${notif.message}</div>
            
            <div class="notification-meta">
              <div class="notification-time">
                <i class="fas fa-clock"></i>
                ${this.formatTime(notif.created_at)}
              </div>
              <div class="notification-actions">
                ${!notif.is_read ? `
                  <button class="action-btn mark-read-btn" title="ทำเครื่องหมายว่าอ่านแล้ว">
                    <i class="fas fa-check"></i> อ่านแล้ว
                  </button>
                ` : ''}
                <button class="action-btn delete-btn" title="ลบ">
                  <i class="fas fa-trash"></i> ลบ
                </button>
              </div>
            </div>
          </div>
        `;
      }

      getNotificationIcon(type) {
        const icons = {
          'new_appointment': '🆕',
          'appointment_confirmed': '✅',
          'appointment_cancelled': '❌',
          'appointment_reminder': '⏰',
          'treatment_completed': '📝',
          'default': '🔔'
        };

        return icons[type] || icons.default;
      }

      formatTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMs / 3600000);
        const diffDays = Math.floor(diffMs / 86400000);
        
        if (diffMins < 1) return 'เมื่อสักครู่';
        if (diffMins < 60) return `${diffMins} นาทีที่แล้ว`;
        if (diffHours < 24) return `${diffHours} ชั่วโมงที่แล้ว`;
        if (diffDays < 7) return `${diffDays} วันที่แล้ว`;
        
        return date.toLocaleDateString('th-TH', {
          day: '2-digit',
          month: 'long',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          hour12: false
        });
      }

      async handleNotificationClick(notif) {
        if (!notif.is_read) {
          await this.markAsRead(notif.id);
        }

        if (notif.appointment_id) {
          window.location.href = `/patient/history/details/${notif.appointment_id}`;
        }
      }

      async markAsRead(notifId) {
        try {
          const response = await fetch(`${this.apiEndpoint}/${notifId}/read`, {
            method: 'PUT'
          });

          const data = await response.json();
          if (data.success) {
            this.loadNotifications();
          }
        } catch (error) {
          console.error('เกิดข้อผิดพลาดในการทำเครื่องหมายว่าอ่านแล้ว:', error);
        }
      }

      async markAllAsRead() {
        try {
          const response = await fetch(`${this.apiEndpoint}/mark-all-read`, {
            method: 'PUT'
          });

          const data = await response.json();
          if (data.success) {
            alert('ทำเครื่องหมายอ่านทั้งหมดเรียบร้อย');
            this.loadNotifications();
          }
        } catch (error) {
          console.error('Error marking all as read:', error);
          alert('เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง');
        }
      }

      async deleteNotification(notifId) {
        if (!confirm('คุณต้องการลบการแจ้งเตือนนี้หรือไม่?')) {
          return;
        }

        try {
          const response = await fetch(`${this.apiEndpoint}/${notifId}`, {
            method: 'DELETE'
          });

          const data = await response.json();
          if (data.success) {
            this.loadNotifications();
          }
        } catch (error) {
          console.error('Error deleting notification:', error);
          alert('เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง');
        }
      }

      updatePagination(total) {
        const pagination = document.getElementById('pagination');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const pageInfo = document.getElementById('pageInfo');

        if (total > this.limit) {
          pagination.style.display = 'flex';
          
          const totalPages = Math.ceil(total / this.limit);
          pageInfo.textContent = `หน้า ${this.currentPage} จาก ${totalPages}`;
          
          prevBtn.disabled = this.currentPage === 1;
          nextBtn.disabled = this.currentPage >= totalPages;
        } else {
          pagination.style.display = 'none';
        }
      }
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      window.notificationManager = new NotificationManager();
    });
  </script>
</body>
</html>