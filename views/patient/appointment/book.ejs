<!-- views/patient/appointment/book.ejs -->
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>จองนัดหมาย - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            margin: 0;
        }

        /* Sidebar */
        .sidebar {
            width: 220px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            position: fixed;
            height: 100vh;
            padding: 0;
            color: #fff;
            box-shadow: 2px 0 15px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .sidebar .logo {
            text-align: center;
            padding: 25px 20px;
            border-bottom: 1px solid rgba(255,255,255,0.15);
        }

        .sidebar .logo img {
            width: 55px;
            height: 55px;
            border-radius: 10px;
            background: white;
            padding: 8px;
            margin-bottom: 10px;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 15px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 3px 0;
        }

        .sidebar ul li a {
            display: flex;
            align-items: center;
            padding: 15px 25px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 15px;
            font-weight: 500;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 10px;
            margin: 0 15px;
            transform: translateX(5px);
        }

        .sidebar ul li a i {
            margin-right: 12px;
            width: 20px;
            text-align: center;
            font-size: 16px;
        }

        /* Main Content */
        .main {
            margin-left: 220px;
            min-height: 100vh;
        }

        /* Top Bar */
        .top-bar {
            background: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            position: sticky;
            top: 0;
            z-index: 999;
        }

        .search-section {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .search-section label {
            font-weight: 600;
            color: #555;
            font-size: 15px;
        }

        .search-box {
            background: #f8f9fa;
            border: 2px solid #e1e5e9;
            border-radius: 30px;
            padding: 12px 25px;
            display: flex;
            align-items: center;
            width: 320px;
            transition: all 0.3s ease;
        }

        .search-box:focus-within {
            border-color: #4A90E2;
            box-shadow: 0 0 0 4px rgba(74, 144, 226, 0.1);
            background: white;
        }

        .search-box i {
            color: #666;
            margin-right: 12px;
            font-size: 15px;
        }

        .search-box input {
            border: none;
            background: transparent;
            outline: none;
            width: 100%;
            font-size: 15px;
            color: #333;
        }

        .search-box input::placeholder {
            color: #999;
        }
.alert a {
    color: #4A90E2;
    text-decoration: underline;
    font-weight: 600;
}

.alert a:hover {
    color: #2DA8FF;
}
        .user-section {
            display: flex;
            align-items: center;
            gap: 25px;
        }

        .profile-dropdown {
            position: relative;
        }

        .user-info {
            display: flex;
            align-items: center;
            cursor: pointer;
            gap: 15px;
            padding: 10px 15px;
            border-radius: 10px;
            transition: background-color 0.3s ease;
        }

        .user-info:hover {
            background-color: #f8f9fa;
        }

        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 16px;
            color: white;
            text-transform: uppercase;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            border: 2px solid white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .user-details strong {
            display: block;
            font-size: 15px;
            color: #333;
            font-weight: 600;
        }

        .user-details small {
            color: #666;
            font-size: 13px;
        }

        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            top: 110%;
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 10px;
            min-width: 200px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
            z-index: 1000;
            overflow: hidden;
        }

        .dropdown-menu a {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            text-decoration: none;
            color: #333;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.3s ease;
        }

        .dropdown-menu a i {
            margin-right: 12px;
            width: 18px;
            color: #666;
        }

        .dropdown-menu a:hover {
            background-color: #f8f9fa;
        }

        .dropdown-menu hr {
            margin: 0;
            border: none;
            border-top: 1px solid #e1e5e9;
        }

        /* Container */
        .container {
            padding: 30px;
        }

        /* Progress Section */
        .progress-section {
            background: white;
            border-radius: 15px;
            padding: 25px 30px;
            margin-bottom: 20px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.08);
            position: relative;
            overflow: hidden;
        }

        .progress-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
        }

        .progress-steps {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 40px;
        }

        .step {
            display: flex;
            align-items: center;
            color: #6c757d;
            flex-direction: column;
            text-align: center;
            min-width: 120px;
        }

        .step.active {
            color: #4A90E2;
            font-weight: 600;
        }

        .step.completed {
            color: #10b981;
        }

        .step-number {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 12px;
            font-size: 18px;
            font-weight: 600;
            transition: all 0.3s ease;
            border: 2px solid #e1e5e9;
        }

        .step.active .step-number {
            background: #4A90E2;
            color: white;
            transform: scale(1.05);
            border-color: #4A90E2;
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        .step.completed .step-number {
            background: #10b981;
            color: white;
            border-color: #10b981;
        }

        .step-label {
            font-size: 14px;
            font-weight: 500;
        }

        .step-connector {
            flex: 1;
            height: 2px;
            background: #e1e5e9;
            max-width: 100px;
        }

        .step.completed + .step-connector {
            background: #10b981;
        }

        .step-content {
            display: none;
        }

        .step-content.active {
            display: block;
            animation: fadeIn 0.4s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Form Section */
        .form-section, .calendar-section, .doctors-section, .time-section, 
        .appointment-details, .confirmation-section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.08);
            position: relative;
            overflow: hidden;
        }

        .form-section::before, .calendar-section::before, .doctors-section::before,
        .time-section::before, .appointment-details::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
        }

        .section-title {
            font-size: 20px;
            font-weight: 700;
            color: #333;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-title i {
            color: #4A90E2;
            font-size: 22px;
        }

        /* Form Controls */
        .filter-grid {
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 15px;
            align-items: end;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        .form-control {
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: #f8f9fa;
            color: #333;
            font-weight: 500;
        }

        .form-control:focus {
            outline: none;
            border-color: #4A90E2;
            background: white;
            box-shadow: 0 0 0 4px rgba(74, 144, 226, 0.1);
        }

        /* Calendar */
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .calendar-title {
            font-size: 22px;
            font-weight: 700;
            color: #333;
        }

        .calendar-nav {
            background: #f8f9fa;
            border: 2px solid #e1e5e9;
            color: #4A90E2;
            font-size: 18px;
            cursor: pointer;
            padding: 10px 16px;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .calendar-nav:hover {
            background: white;
            border-color: #4A90E2;
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2);
            transform: translateY(-2px);
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
            background: #e1e5e9;
            border-radius: 10px;
            overflow: hidden;
        }

        .weekday {
            padding: 15px;
            text-align: center;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            font-weight: 600;
            font-size: 14px;
        }

        .calendar-day {
            background: white;
            min-height: 120px;
            padding: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            display: flex;
            flex-direction: column;
        }

        .calendar-day:hover:not(.past):not(.unavailable):not(.other-month) {
            background: #f0f9ff;
            border: 2px solid #4A90E2;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2);
            z-index: 10;
        }

        .calendar-day.selected {
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
            border: 2px solid #4A90E2;
            transform: translateY(-2px);
        }

        .calendar-day.past {
            background: #f8f9fa;
            color: #999;
            cursor: not-allowed;
            opacity: 0.6;
        }

        .calendar-day.unavailable {
            background: #fed7d7;
            color: #c53030;
            cursor: not-allowed;
        }

        .calendar-day.other-month {
            opacity: 0.3;
            pointer-events: none;
        }

        .day-number {
            font-weight: 700;
            font-size: 16px;
            margin-bottom: 8px;
            color: #333;
        }

        .calendar-day.past .day-number {
            color: #999;
        }

        .day-doctors {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .doctor-item {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 4px 6px;
            border-radius: 4px;
            background: rgba(74, 144, 226, 0.1);
            font-size: 11px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .doctor-item:hover {
            background: rgba(74, 144, 226, 0.2);
        }

        .doctor-mini-avatar {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 9px;
        }

        /* Doctor Cards */
        .doctors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .doctor-card {
            border: 2px solid #e1e5e9;
            border-radius: 15px;
            padding: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: linear-gradient(135deg, #f8f9fa, #ffffff);
        }

        .doctor-card:hover {
            border-color: #4A90E2;
            background: white;
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(74, 144, 226, 0.15);
        }

        .doctor-card.selected {
            border-color: #4A90E2;
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.05));
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(74, 144, 226, 0.25);
        }

        .doctor-card-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .doctor-avatar {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 24px;
            border: 3px solid white;
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        .doctor-details h5 {
            margin: 0 0 5px 0;
            color: #333;
            font-size: 18px;
            font-weight: 700;
        }

        .doctor-details p {
            margin: 0;
            color: #666;
            font-size: 14px;
            font-weight: 500;
        }

        .doctor-treatments {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 15px;
            max-height: 80px;
            overflow-y: auto;
        }

        .doctor-treatments::-webkit-scrollbar {
            width: 4px;
        }

        .doctor-treatments::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 4px;
        }

        .treatment-tag {
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
            color: #4A90E2;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            border: 1px solid rgba(74, 144, 226, 0.3);
        }

        /* Time Section */
        .selected-doctor-info {
            background: linear-gradient(135deg, #e8f4fd, #f0f9ff);
            border: 2px solid #b3d9f7;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .date-selector {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin-bottom: 25px;
        }

        .date-nav {
            background: #f8f9fa;
            border: 2px solid #e1e5e9;
            color: #4A90E2;
            font-size: 18px;
            cursor: pointer;
            padding: 10px;
            border-radius: 50%;
            transition: all 0.3s ease;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .date-nav:hover {
            background: white;
            border-color: #4A90E2;
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2);
            transform: scale(1.1);
        }

        .selected-date {
            font-size: 18px;
            font-weight: 700;
            color: #333;
            text-align: center;
            min-width: 250px;
        }

        /* Time Slots */
        .time-slots-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
            gap: 15px;
        }

        .time-slot-btn {
            padding: 15px 12px;
            border: 2px solid #e1e5e9;
            background: #f8f9fa;
            border-radius: 10px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
            font-size: 14px;
            font-weight: 600;
        }

        .time-slot-btn:hover {
            border-color: #4A90E2;
            background: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2);
        }

        .time-slot-btn.available {
            border-color: #10b981;
            background: linear-gradient(135deg, #d1f2eb, #e8f8f5);
            color: #0c5a40;
        }

        .time-slot-btn.selected {
            border-color: #4A90E2;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(74, 144, 226, 0.4);
        }

        /* Appointment Details */
        .form-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
            font-family: inherit;
        }

        /* Confirmation Section */
        .booking-success {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
            font-size: 22px;
            font-weight: 700;
            box-shadow: 0 4px 15px rgba(74, 144, 226, 0.3);
        }

        .booking-success i {
            font-size: 48px;
            margin-bottom: 15px;
            display: block;
        }

        .booking-details {
            background: linear-gradient(135deg, #f8f9fa, #ffffff);
            padding: 30px;
            border-radius: 15px;
            margin: 25px 0;
            border: 2px solid #e1e5e9;
        }

        .booking-details h4 {
            margin: 0 0 25px 0;
            color: #333;
            text-align: center;
            font-size: 20px;
            font-weight: 700;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #e1e5e9;
        }

        .detail-row:last-child {
            border-bottom: none;
        }

        .detail-label {
            color: #666;
            font-weight: 600;
            font-size: 14px;
        }

        .detail-value {
            color: #333;
            font-weight: 700;
            font-size: 14px;
        }

        .status-badge {
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 700;
            text-transform: uppercase;
        }

        .status-pending {
            background: linear-gradient(135deg, #fff3cd, #ffeeba);
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        /* Buttons */
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            justify-content: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(74, 144, 226, 0.4);
        }

        .btn-primary:disabled {
            background: #e1e5e9;
            color: #999;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 2px solid #e1e5e9;
        }

        .btn-secondary:hover {
            background: white;
            border-color: #4A90E2;
            color: #4A90E2;
            transform: translateY(-2px);
        }

        .btn-success {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
        }

        .step-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            margin-top: 20px;
        }

        /* Alert */
        .alert {
            padding: 18px 22px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 14px;
            border: 2px solid;
        }

        .alert-info {
            background: linear-gradient(135deg, #d1ecf1, #d8f3f7);
            color: #0c5460;
            border-color: #17a2b8;
        }

        .alert i {
            font-size: 18px;
        }

        /* Toast */
        .toast {
            position: fixed;
            top: 30px;
            right: 30px;
            padding: 15px 22px;
            border-radius: 10px;
            color: white;
            font-size: 14px;
            font-weight: 600;
            z-index: 4000;
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
            min-width: 300px;
            display: none;
            align-items: center;
            gap: 12px;
        }

        .toast.show {
            display: flex;
            animation: slideInRight 0.3s ease;
        }

        .toast.success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .toast.error {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .toast.info {
            background: linear-gradient(135deg, #17a2b8, #138496);
        }

        .toast.warning {
            background: linear-gradient(135deg, #ffc107, #ff9800);
        }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        /* Loading */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 60px;
            color: #666;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(74, 144, 226, 0.2);
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .empty-state {
            text-align: center;
            padding: 50px 30px;
            color: #666;
        }

        .empty-state i {
            font-size: 60px;
            color: #ddd;
            margin-bottom: 20px;
            display: block;
        }

        .empty-state h3 {
            margin: 0 0 10px 0;
            font-size: 18px;
            color: #555;
            font-weight: 600;
        }

        .empty-state p {
            margin: 0;
            font-size: 14px;
            line-height: 1.5;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .sidebar {
                width: 200px;
            }
            .main {
                margin-left: 200px;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main {
                margin-left: 0;
            }

            .container {
                padding: 20px;
            }

            .search-box {
                width: 100%;
            }

            .search-section {
                flex-direction: column;
                gap: 10px;
                align-items: stretch;
            }

            .progress-steps {
                flex-direction: column;
                gap: 20px;
            }

            .step-connector {
                display: none;
            }

            .doctors-grid {
                grid-template-columns: 1fr;
            }

            .time-slots-grid {
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            }

            .step-navigation {
                flex-direction: column;
                gap: 15px;
            }

            .step-navigation .btn {
                width: 100%;
            }

            .filter-grid {
                grid-template-columns: 1fr;
            }

            .calendar-header {
                flex-direction: column;
                gap: 15px;
            }

            .user-info {
                padding: 5px 10px;
            }

            .top-bar {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
        }

        @media (max-width: 480px) {
            .search-box {
                width: 100%;
            }

            .calendar-day {
                min-height: 100px;
                padding: 8px;
            }

            .day-number {
                font-size: 14px;
            }

            .doctor-avatar {
                width: 60px;
                height: 60px;
                font-size: 20px;
            }

            .section-title {
                font-size: 18px;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <img src="/img/logo.png" alt="คลินิกยิ้มสดใส" />
            <h3>คลินิกยิ้มสดใส</h3>
        </div>
        <ul>
            <li><a href="/patient/dashboard"><i class="fas fa-tachometer-alt"></i>หน้าหลัก</a></li>
            <li class="active"><a href="/patient/appointment/schedule"><i class="fas fa-calendar-check"></i>จองนัดหมาย</a></li>
            <li><a href="/patient/history"><i class="fas fa-history"></i>ประวัตินัดหมาย</a></li>
            <li><a href="/patient/my-treatments"><i class="fas fa-stethoscope"></i>ประวัติการรักษา</a></li>
            <li><a href="/patient/dentists"><i class="fas fa-user-md"></i>ทันตแพทย์</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="search-section">
                <label>ค้นหา:</label>
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="ค้นหานัดหมาย การรักษา..." />
                </div>
            </div>

            <div class="user-section">
                <div class="profile-dropdown">
                    <div class="user-info" onclick="toggleDropdown()">
                        <div class="avatar" id="userAvatar">P</div>
                        <div class="user-details">
                            <strong id="userName">ผู้ป่วย</strong>
                            <small>Patient</small>
                        </div>
                        <i class="fas fa-caret-down"></i>
                    </div>
                    <div class="dropdown-menu" id="profileDropdown">
                        <a href="/patient/profile"><i class="fas fa-user"></i>โปรไฟล์ของฉัน</a>
                        <a href="/patient/profile/change-password"><i class="fas fa-key"></i>เปลี่ยนรหัสผ่าน</a>
                        <hr />
                        <a href="/logout"><i class="fas fa-sign-out-alt"></i>ออกจากระบบ</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content Container -->
        <div class="container">
            <!-- Progress Section -->
            <div class="progress-section">
                <div class="progress-steps">
                    <div class="step active" id="step1">
                        <div class="step-number">1</div>
                        <div class="step-label">เลือกวันและหมอ</div>
                    </div>
                    <div class="step-connector"></div>
                    <div class="step" id="step2">
                        <div class="step-number">2</div>
                        <div class="step-label">เลือกเวลาและรายละเอียด</div>
                    </div>
                    <div class="step-connector"></div>
                    <div class="step" id="step3">
                        <div class="step-number">3</div>
                        <div class="step-label">ยืนยันการจอง</div>
                    </div>
                </div>
            </div>

            <!-- Toast Message -->
            <div class="toast" id="toastMessage">
                <i class="fas fa-check-circle"></i>
                <span></span>
            </div>

            <!-- Step 1: Select Date and Doctor -->
            <div class="step-content active" id="step1Content">
                <div class="form-section">
    <h3 class="section-title">
        <i class="fas fa-filter"></i>
        ค้นหาหมอตามการรักษา
    </h3>
    <div class="filter-grid">
        <div class="form-group">
            <label for="treatmentFilter">เลือกประเภทการรักษา:</label>
            <select id="treatmentFilter" class="form-control">
                <option value="">-- เลือกการรักษา --</option>
            </select>
        </div>
        <div style="display: flex; gap: 10px;">
            <button type="button" class="btn btn-primary" onclick="applyTreatmentFilter()">
                <i class="fas fa-search"></i> ค้นหา
            </button>
            <button type="button" class="btn btn-secondary" onclick="clearTreatmentFilter()">
                <i class="fas fa-times"></i> ล้าง
            </button>
        </div>
    </div>
</div>

                <div class="calendar-section">
                    <div class="alert alert-info">
    <i class="fas fa-info-circle"></i>
    <div>
        <strong>วิธีใช้งาน:</strong> 
        <span id="filterInstructions">
            สามารถจองนัดหมายล่วงหน้าอย่างน้อย 24 ชั่วโมง และคลินิกปิดวันอาทิตย์
        </span>
    </div>
</div>

                    <div class="calendar-header">
                        <button type="button" class="calendar-nav" onclick="changeCalendarMonth(-1)">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <div class="calendar-title" id="calendarTitle">กำลังโหลด...</div>
                        <button type="button" class="calendar-nav" onclick="changeCalendarMonth(1)">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                    
                    <div class="calendar-grid" id="calendarGrid">
                        <div class="weekday">อา</div>
                        <div class="weekday">จ</div>
                        <div class="weekday">อ</div>
                        <div class="weekday">พ</div>
                        <div class="weekday">พฤ</div>
                        <div class="weekday">ศ</div>
                        <div class="weekday">ส</div>
                    </div>
                </div>

                <div class="doctors-section" id="doctorsSection" style="display: none;">
                    <h3 class="section-title">
                        <i class="fas fa-user-md"></i>
                        ทันตแพทย์ที่ว่าง <span id="selectedDateText"></span>
                    </h3>
                    <div class="doctors-grid" id="doctorsGrid"></div>
                </div>

                <div class="step-navigation">
                    <a href="/patient/dashboard" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> กลับ
                    </a>
                    <button type="button" class="btn btn-primary" onclick="nextStep(2)" id="step1Next" disabled>
                        ต่อไป: เลือกเวลา <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>

            <!-- Step 2: Select Time and Details -->
            <div class="step-content" id="step2Content">
                <div class="time-section">
                    <div class="selected-doctor-info" id="selectedDoctorInfo">
                        <div class="doctor-avatar" id="selectedDoctorAvatar">D</div>
                        <div class="doctor-details">
                            <h3 id="selectedDoctorName">ทพ. ชื่อ</h3>
                            <p id="selectedDoctorSpecialty">ความเชี่ยวชาญ</p>
                        </div>
                    </div>

                    <div class="date-selector">
                        <button type="button" class="date-nav" onclick="changeSelectedDate(-1)">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <div class="selected-date" id="selectedDateDisplay">วันนี้</div>
                        <button type="button" class="date-nav" onclick="changeSelectedDate(1)">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <h4 style="margin-bottom: 15px; color: #333; font-size: 16px; font-weight: 600;">
                        <i class="fas fa-clock" style="color: #4A90E2; margin-right: 8px;"></i>
                        ช่วงเวลาว่าง
                    </h4>
                    <div class="time-slots-grid" id="timeSlotsGrid">
                        <div class="loading" style="grid-column: 1 / -1;">
                            <div class="loading-spinner"></div>
                            <span>กำลังโหลดช่วงเวลาว่าง...</span>
                        </div>
                    </div>
                </div>

                <div class="appointment-details">
                    <h3 class="section-title">
                        <i class="fas fa-clipboard-list"></i>
                        รายละเอียดนัดหมาย
                    </h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="treatmentSelect">การรักษา: *</label>
                            <select id="treatmentSelect" class="form-control" required>
                                <option value="">เลือกการรักษา</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="symptoms">อาการ/รายละเอียดเพิ่มเติม:</label>
                            <textarea id="symptoms" 
                                    class="form-control" 
                                    rows="4" 
                                    placeholder="กรุณาอธิบายอาการ หรือความกังวลของคุณ..."></textarea>
                        </div>
                    </div>
                </div>

                <div class="step-navigation">
                    <button type="button" class="btn btn-secondary" onclick="previousStep(1)">
                        <i class="fas fa-arrow-left"></i> กลับ
                    </button>
                    <button type="button" class="btn btn-primary" onclick="nextStep(3)" id="step2Next" disabled>
                        ต่อไป: ยืนยันการจอง <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>

            <!-- Step 3: Confirmation -->
            <div class="step-content" id="step3Content">
                <div class="confirmation-section">
                    <div class="booking-success" id="bookingSuccess">
                        <i class="fas fa-calendar-check"></i>
                        พร้อมจองนัดหมายของคุณ
                    </div>

                    <div class="booking-details">
                        <h4><i class="fas fa-file-alt"></i> สรุปนัดหมาย</h4>
                        <div class="detail-row">
                            <span class="detail-label">ชื่อผู้ป่วย:</span>
                            <span class="detail-value" id="finalPatientName">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">การรักษา:</span>
                            <span class="detail-value" id="finalTreatment">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">ทันตแพทย์:</span>
                            <span class="detail-value" id="finalDoctor">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">วันที่:</span>
                            <span class="detail-value" id="finalDate">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">เวลา:</span>
                            <span class="detail-value" id="finalTime">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">หมายเหตุ:</span>
                            <span class="detail-value" id="finalSymptoms">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">สถานะ:</span>
                            <span class="status-badge status-pending">รอยืนยัน</span>
                        </div>
                    </div>

                    <div class="step-navigation">
                        <button type="button" class="btn btn-secondary" onclick="previousStep(2)">
                            <i class="fas fa-edit"></i> แก้ไขข้อมูล
                        </button>
                        <button type="button" class="btn btn-success" onclick="confirmBooking()">
                            <i class="fas fa-check"></i> ยืนยันการจอง
                        </button>
                    </div>

                    <div class="step-navigation" style="margin-top: 30px;">
                        <button type="button" class="btn btn-secondary" onclick="startNewBooking()">
                            <i class="fas fa-plus"></i> จองอีกครั้ง
                        </button>
                        <a href="/patient/history" class="btn btn-primary">
                            <i class="fas fa-list"></i> ดูประวัติการนัดหมายของฉัน
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global Variables
        let currentStep = 1;
        let selectedDoctor = null;
        let selectedDate = null;
        let selectedTime = null;
        let currentCalendarDate = new Date();
        let doctorsData = [];
        let treatmentsData = [];
        let filteredTreatmentId = '';
        let calendarData = {};
        let currentPatient = {
            fname: '',
            lname: ''
        };

        // Initialize Page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 เริ่มต้นระบบจองนัดหมาย...');
            initializePage();
            setupFormValidation();
        });

        async function initializePage() {
            try {
                showToast('กำลังโหลดระบบจองนัดหมาย...', 'info');
                
                await loadPatientInfo();
                await loadTreatments();
                await loadCalendarData();
                
                generateCalendar();
                showToast('พร้อมจองนัดหมายแล้ว!', 'success');
                
            } catch (error) {
                console.error('❌ เกิดข้อผิดพลาดในการเริ่มต้น:', error);
                showToast('เกิดข้อผิดพลาดในการโหลดข้อมูล กรุณารีเฟรชหน้าใหม่', 'error');
            }
        }

        // Load Patient Info
        async function loadPatientInfo() {
            try {
                const response = await fetch('/patient/api/my-profile');
                const data = await response.json();
                
                if (data.success) {
                    currentPatient = {
                        fname: data.patient.fname,
                        lname: data.patient.lname
                    };
                    
                    const userName = document.getElementById('userName');
                    if (userName) {
                        userName.textContent = `${currentPatient.fname} ${currentPatient.lname}`;
                    }
                    
                    const userAvatar = document.getElementById('userAvatar');
                    if (userAvatar) {
                        userAvatar.textContent = currentPatient.fname.charAt(0);
                    }
                    
                    console.log('✅ โหลดข้อมูลผู้ป่วย:', currentPatient);
                }
            } catch (error) {
                console.error('❌ เกิดข้อผิดพลาดในการโหลดข้อมูลผู้ป่วย:', error);
            }
        }

        // Load Treatments
        async function loadTreatments() {
            try {
                console.log('📋 กำลังโหลดการรักษา...');
                const response = await fetch('/patient/api/treatments');
                const data = await response.json();
                
                if (data.success) {
                    treatmentsData = data.treatments;
                    console.log('✅ โหลด', treatmentsData.length, 'การรักษา');
                    populateTreatmentFilter();
                } else {
                    throw new Error(data.error || 'ไม่สามารถโหลดการรักษาได้');
                }
            } catch (error) {
                console.error('❌ เกิดข้อผิดพลาดในการโหลดการรักษา:', error);
                showToast('ไม่สามารถโหลดข้อมูลการรักษาได้', 'error');
            }
        }

        // Populate Treatment Filter
        function populateTreatmentFilter() {
            const select = document.getElementById('treatmentFilter');
            select.innerHTML = '<option value="">การรักษาทั้งหมด</option>';
            
            treatmentsData.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment.treatment_id;
                option.textContent = `${treatment.treatment_name} (${treatment.duration} นาที)`;
                select.appendChild(option);
            });
        }

        // Load Calendar Data
        async function loadCalendarData() {
            try {
                const year = currentCalendarDate.getFullYear();
                const month = currentCalendarDate.getMonth() + 1;
                
                console.log(`📅 Loading calendar data for ${year}-${month}...`);
                
                let url = `/patient/api/calendar-data?year=${year}&month=${month}`;
                if (filteredTreatmentId) {
                    url += `&treatment_id=${filteredTreatmentId}`;
                }
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.success) {
                    calendarData = {};
                    
                    data.calendar_data.forEach(day => {
                        calendarData[day.date] = {
                            available_dentists: day.available_dentists,
                            available_slots: day.available_slots,
                            total_slots: day.total_slots,
                            dentists: day.dentists || []
                        };
                    });
                    
                    console.log('✅ Loaded calendar data:', Object.keys(calendarData).length, 'days');
                } else {
                    console.error('❌ Failed to load calendar data:', data.error);
                }
            } catch (error) {
                console.error('❌ Error loading calendar:', error);
            }
        }

        // Change Calendar Month
        function changeCalendarMonth(direction) {
            currentCalendarDate.setMonth(currentCalendarDate.getMonth() + direction);
            loadCalendarData().then(() => generateCalendar());
        }

        // Generate Calendar
        function generateCalendar() {
            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth();
            
            const monthNames = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 
                              'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
            document.getElementById('calendarTitle').textContent = `${monthNames[month]} ${year + 543}`;
            
            const grid = document.getElementById('calendarGrid');
            const weekdayHeaders = grid.querySelectorAll('.weekday');
            grid.innerHTML = '';
            weekdayHeaders.forEach(header => grid.appendChild(header));
            
            const firstDay = new Date(year, month, 1);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                
                const dayElement = createDayElement(date, month, today, tomorrow);
                grid.appendChild(dayElement);
            }
        }

        // Create Day Element
        function createDayElement(date, currentMonth, today, tomorrow) {
            const day = document.createElement('div');
            day.className = 'calendar-day';
            
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const dayNum = String(date.getDate()).padStart(2, '0');
            const dateString = `${year}-${month}-${dayNum}`;
            
            day.dataset.date = dateString;
            
            const dayOfWeek = date.getDay();
            const compareDate = new Date(date);
            compareDate.setHours(0, 0, 0, 0);
            const todayDate = new Date(today);
            todayDate.setHours(0, 0, 0, 0);
            const tomorrowDate = new Date(tomorrow);
            tomorrowDate.setHours(0, 0, 0, 0);
            
            if (date.getMonth() !== currentMonth) {
                day.classList.add('other-month');
            }
            
            const isPast = compareDate <= tomorrowDate;
            if (isPast) {
                day.classList.add('past');
            }
            
            if (dayOfWeek === 0) {
                day.classList.add('unavailable');
            }
            
            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = date.getDate();
            day.appendChild(dayNumber);
            
            const dayData = calendarData[dateString];
            
            const isBookable = dayOfWeek !== 0 && 
                               date.getMonth() === currentMonth && 
                               compareDate > tomorrowDate;
            
            if (isBookable && dayData && dayData.dentists && dayData.dentists.length > 0) {
                day.style.backgroundColor = '#fff9e6';
                
                const dentistsContainer = document.createElement('div');
                dentistsContainer.className = 'day-doctors';
                
                dayData.dentists.slice(0, 2).forEach(dentist => {
                    const dentistItem = document.createElement('div');
                    dentistItem.className = 'doctor-item';
                    
                    const initial = document.createElement('div');
                    initial.className = 'doctor-mini-avatar';
                    initial.textContent = dentist.name.split(' ').map(n => n[0]).join('');
                    
                    const nameSpan = document.createElement('span');
                    nameSpan.textContent = dentist.name;
                    
                    dentistItem.appendChild(initial);
                    dentistItem.appendChild(nameSpan);
                    dentistsContainer.appendChild(dentistItem);
                });
                
                if (dayData.dentists.length > 2) {
                    const moreInfo = document.createElement('div');
                    moreInfo.style.cssText = 'text-align: center; color: #666; font-size: 10px; margin-top: 2px;';
                    moreInfo.textContent = `+${dayData.dentists.length - 2} more`;
                    dentistsContainer.appendChild(moreInfo);
                }
                
                day.appendChild(dentistsContainer);
                
                day.addEventListener('click', () => selectCalendarDate(dateString, day));
                day.style.cursor = 'pointer';
            }
            
            return day;
        }

        // Select Calendar Date
        function selectCalendarDate(dateStr, dayElement) {
            const selectedDateObj = new Date(dateStr);
            const now = new Date();
            const timeDiff = selectedDateObj.getTime() - now.getTime();
            const hoursDiff = timeDiff / (1000 * 3600);
            
            if (hoursDiff < 24) {
                showToast('ต้องจองล่วงหน้าอย่างน้อย 24 ชั่วโมง', 'warning');
                return;
            }
            
            document.querySelectorAll('.calendar-day.selected').forEach(day => {
                day.classList.remove('selected');
            });
            
            dayElement.classList.add('selected');
            selectedDate = dateStr;
            
            console.log('📅 เลือกวันที่:', selectedDate);
            showAvailableDentists(dateStr);
        }

        // Show Available Dentists
        async function showAvailableDentists(dateStr) {
            const doctorsSection = document.getElementById('doctorsSection');
            const doctorsGrid = document.getElementById('doctorsGrid');
            const dateText = document.getElementById('selectedDateText');
            
            const date = new Date(dateStr);
            const thaiMonths = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                                'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
            dateText.textContent = `${date.getDate()} ${thaiMonths[date.getMonth()]} ${date.getFullYear() + 543}`;
            
            doctorsGrid.innerHTML = `
                <div class="loading" style="grid-column: 1 / -1;">
                    <div class="loading-spinner"></div>
                    <span>กำลังโหลดข้อมูลทันตแพทย์...</span>
                </div>
            `;
            
            doctorsSection.style.display = 'block';
            
            try {
                let url = `/patient/api/available-dentists?date=${dateStr}`;
                if (filteredTreatmentId) {
                    url += `&treatment_id=${filteredTreatmentId}`;
                }
                
                console.log('👨‍⚕️ Fetching dentists from:', url);
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.success && data.dentists && data.dentists.length > 0) {
                    doctorsData = data.dentists;
                    console.log('✅ Found', data.dentists.length, 'dentists');
                    
                    let doctorsHTML = '';
                    data.dentists.forEach(doctor => {
                        const initials = doctor.fname.charAt(0) + doctor.lname.charAt(0);
                        
                        let treatmentsHTML = '';
                        if (doctor.treatments && doctor.treatments.length > 0) {
                            // แสดงการรักษาทั้งหมด
                            if (doctor.treatments.length <= 4) {
                                doctor.treatments.forEach(treatment => {
                                    treatmentsHTML += `<span class="treatment-tag">${treatment.treatment_name}</span>`;
                                });
                            } else {
                                // แสดง 3 ตัวแรก + จำนวนที่เหลือ
                                doctor.treatments.slice(0, 3).forEach(treatment => {
                                    treatmentsHTML += `<span class="treatment-tag">${treatment.treatment_name}</span>`;
                                });
                                treatmentsHTML += `<span class="treatment-tag" style="background: #666; color: white;">+${doctor.treatments.length - 3} อื่นๆ</span>`;
                            }
                        } else {
                            treatmentsHTML = '<span class="treatment-tag">ทันตกรรมทั่วไป </span>';
                            }
                        
                        doctorsHTML += `
                            <div class="doctor-card" onclick="selectDoctorFromCard(${doctor.dentist_id}, '${doctor.fname}', '${doctor.lname}', '${doctor.specialty || 'ทันตแพทย์ทั่วไป'}', this)">
                                <div class="doctor-card-header">
                                    <div class="doctor-avatar">${initials}</div>
                                    <div class="doctor-details">
                                        <h5>ทพ. ${doctor.fname} ${doctor.lname}</h5>
                                        <p>${doctor.specialty || 'ทันตแพทย์ทั่วไป'}</p>
                                    </div>
                                </div>
                                <div class="doctor-treatments">
                                    ${treatmentsHTML}
                                </div>
                                <div style="margin-top: 10px;">
                                    <strong style="color: #10b981; font-size: 14px;">
                                        <i class="fas fa-check-circle"></i> 
                                        ${doctor.available_slots} ช่วงเวลาว่าง
                                    </strong>
                                </div>
                            </div>
                        `;
                    });
                    doctorsGrid.innerHTML = doctorsHTML;
                } else {
                    console.log('⚠️ No dentists available');
                    doctorsGrid.innerHTML = `
                        <div class="empty-state" style="grid-column: 1 / -1;">
                            <i class="fas fa-calendar-times"></i>
                            <h3>ไม่มีทันตแพทย์ว่างในวันนี้</h3>
                            <p>กรุณาเลือกวันอื่น</p>
                        </div>
                    `;
                }
                
                doctorsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } catch (error) {
                console.error('❌ Error loading dentists:', error);
                showToast('ไม่สามารถโหลดข้อมูลทันตแพทย์ได้', 'error');
                doctorsGrid.innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1;">
                        <i class="fas fa-exclamation-circle"></i>
                        <h3>เกิดข้อผิดพลาดในการโหลดข้อมูล</h3>
                    </div>
                `;
            }
        }

        // Select Doctor From Card
        function selectDoctorFromCard(doctorId, fname, lname, specialty, cardElement) {
            document.querySelectorAll('.doctor-card.selected').forEach(card => {
                card.classList.remove('selected');
            });
            
            cardElement.classList.add('selected');
            
            selectedDoctor = {
                id: doctorId,
                name: `${fname} ${lname}`,
                specialty: specialty,
                fname: fname,
                lname: lname
            };
            
            console.log('👨‍⚕️ เลือกทันตแพทย์:', selectedDoctor);
            
            // โหลดรายการรักษาของหมอ
            loadDoctorTreatments(doctorId);
            
            document.getElementById('step1Next').disabled = false;
            showToast(`เลือก ทพ. ${fname} ${lname} แล้ว`, 'success');
            
            setTimeout(() => {
                document.querySelector('.step-navigation').scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'end' 
                });
            }, 300);
        }

        // Load Doctor Treatments
        async function loadDoctorTreatments(dentistId) {
            try {
                console.log('📋 กำลังโหลดรายการรักษาของหมอ ID:', dentistId);
                
                const response = await fetch(`/patient/api/dentist-treatments/${dentistId}`);
                const data = await response.json();
                
                if (data.success && data.treatments.length > 0) {
                    const select = document.getElementById('treatmentSelect');
                    select.innerHTML = '<option value="">เลือกการรักษา</option>';
                    
                    data.treatments.forEach(treatment => {
                        const option = document.createElement('option');
                        option.value = treatment.treatment_id;
                        option.textContent = `${treatment.treatment_name} (${treatment.duration} นาที)`;
                        option.dataset.duration = treatment.duration;
                        select.appendChild(option);
                    });
                    
                    console.log('✅ โหลดรายการรักษา:', data.treatments.length, 'รายการ');
                } else {
                    const select = document.getElementById('treatmentSelect');
                    select.innerHTML = '<option value="">ไม่มีรายการรักษา</option>';
                    showToast('หมอคนนี้ยังไม่มีรายการรักษาที่กำหนดไว้', 'warning');
                }
            } catch (error) {
                console.error('❌ เกิดข้อผิดพลาดในการโหลดรายการรักษา:', error);
                showToast('ไม่สามารถโหลดรายการรักษาได้', 'error');
            }
        }

        // Setup Form Validation
        function setupFormValidation() {
            const treatmentSelect = document.getElementById('treatmentSelect');
            treatmentSelect.addEventListener('change', () => {
                loadTimeSlots();
                validateStep2();
            });
        }

        // Validate Step 2
        function validateStep2() {
            const hasTreatment = document.getElementById('treatmentSelect').value !== '';
            const hasTime = selectedTime !== null;
            
            document.getElementById('step2Next').disabled = !(hasTreatment && hasTime);
        }

        // Next Step
        function nextStep(step) {
            if (step === 2 && !selectedDoctor) {
                showToast('กรุณาเลือกทันตแพทย์ก่อน', 'error');
                return;
            }
            
            if (step === 3) {
                const hasTreatment = document.getElementById('treatmentSelect').value;
                const hasTime = selectedTime;
                
                if (!hasTreatment || !hasTime) {
                    showToast('กรุณากรอกข้อมูลให้ครบถ้วน', 'error');
                    return;
                }
                
                if (!validateBeforeConfirmation()) {
                    return;
                }
            }

            currentStep = step;
            updateStepDisplay();
            
            if (step === 2) {
                initializeStep2();
            } else if (step === 3) {
                initializeStep3();
            }
            
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // Previous Step
        function previousStep(step) {
            currentStep = step;
            updateStepDisplay();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // Update Step Display
        function updateStepDisplay() {
            for (let i = 1; i <= 3; i++) {
                const stepElement = document.getElementById(`step${i}`);
                const contentElement = document.getElementById(`step${i}Content`);
                
                stepElement.classList.remove('active', 'completed');
                contentElement.classList.remove('active');
                
                if (i < currentStep) {
                    stepElement.classList.add('completed');
                } else if (i === currentStep) {
                    stepElement.classList.add('active');
                    contentElement.classList.add('active');
                }
            }
        }

        // Initialize Step 2
        function initializeStep2() {
            document.getElementById('selectedDoctorName').textContent = `ทพ. ${selectedDoctor.name}`;
            document.getElementById('selectedDoctorSpecialty').textContent = selectedDoctor.specialty;
            document.getElementById('selectedDoctorAvatar').textContent = 
                selectedDoctor.fname.charAt(0) + selectedDoctor.lname.charAt(0);
            
            updateSelectedDateDisplay();
            
            const treatmentId = document.getElementById('treatmentSelect').value;
            if (treatmentId) {
                loadTimeSlots();
            }
        }

        // Update Selected Date Display
        function updateSelectedDateDisplay() {
            const date = new Date(selectedDate);
            const thaiMonths = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                                'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
            const dayNames = ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์'];
            
            document.getElementById('selectedDateDisplay').textContent = 
                `วัน${dayNames[date.getDay()]}ที่ ${date.getDate()} ${thaiMonths[date.getMonth()]} ${date.getFullYear() + 543}`;
        }

        // Load Time Slots
        async function loadTimeSlots() {
            const treatmentId = document.getElementById('treatmentSelect').value;
            
            if (!treatmentId) {
                document.getElementById('timeSlotsGrid').innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1;">
                        <i class="fas fa-info-circle"></i>
                        <h3>กรุณาเลือกการรักษาก่อน</h3>
                    </div>
                `;
                return;
            }
            
            const grid = document.getElementById('timeSlotsGrid');
            
            grid.innerHTML = `
                <div class="loading" style="grid-column: 1 / -1;">
                    <div class="loading-spinner"></div>
                    <span>กำลังโหลดช่วงเวลาว่าง...</span>
                </div>
            `;

            try {
                const url = `/patient/api/available-slots?date=${selectedDate}&dentistId=${selectedDoctor.id}&treatmentId=${treatmentId}`;
                console.log('⏰ กำลังดึงช่วงเวลาจาก:', url);
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.success && data.slots.length > 0) {
                    console.log('✅ พบ', data.slots.length, 'ช่วงเวลาว่าง');
                    let timeSlots = '';
                    data.slots.forEach(slot => {
                        timeSlots += `
                            <div class="time-slot-btn available" 
                                 onclick="selectTimeSlot('${slot.start_time}')"
                                 data-time="${slot.start_time}">
                                <strong>${slot.start_time}</strong><br>
                                <small>${slot.duration} นาที</small>
                            </div>
                        `;
                    });
                    grid.innerHTML = timeSlots;
                } else {
                    console.log('⚠️ ไม่มีช่วงเวลาว่าง');
                    grid.innerHTML = `
                        <div class="empty-state" style="grid-column: 1 / -1;">
                            <i class="fas fa-calendar-times"></i>
                            <h3>ไม่มีช่วงเวลาว่างสำหรับการรักษานี้</h3>
                            <p>กรุณาเลือกวันอื่นหรือเปลี่ยนการรักษา</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('❌ เกิดข้อผิดพลาดในการโหลดช่วงเวลา:', error);
                showToast('ไม่สามารถโหลดช่วงเวลาได้', 'error');
                grid.innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1;">
                        <i class="fas fa-exclamation-circle"></i>
                        <h3>เกิดข้อผิดพลาดในการโหลดข้อมูล</h3>
                    </div>
                `;
            }
        }

        // Change Selected Date
        function changeSelectedDate(direction) {
            const date = new Date(selectedDate);
            date.setDate(date.getDate() + direction);
            
            const now = new Date();
            const timeDiff = date.getTime() - now.getTime();
            const hoursDiff = timeDiff / (1000 * 3600);
            
            if (hoursDiff < 24) {
                showToast('ไม่สามารถเลือกวันที่ภายใน 24 ชั่วโมงได้', 'warning');
                return;
            }
            
            if (date.getDay() === 0) {
                showToast('คลินิกปิดวันอาทิตย์', 'warning');
                return;
            }
            
            selectedDate = date.toISOString().split('T')[0];
            updateSelectedDateDisplay();
            loadTimeSlots();
            
            selectedTime = null;
            validateStep2();
        }

        // Select Time Slot
        function selectTimeSlot(time) {
            document.querySelectorAll('.time-slot-btn.selected').forEach(btn => {
                btn.classList.remove('selected');
                btn.classList.add('available');
            });
            
            const button = document.querySelector(`[data-time="${time}"]`);
            if (button) {
                button.classList.remove('available');
                button.classList.add('selected');
                selectedTime = time;
                
                console.log('⏰ เลือกเวลา:', selectedTime);
                validateStep2();
                showToast('เลือกเวลาแล้ว', 'success');
            }
        }

        // Initialize Step 3
        function initializeStep3() {
            const treatmentId = document.getElementById('treatmentSelect').value;
            const symptoms = document.getElementById('symptoms').value;
            
            const selectedTreatment = treatmentsData.find(t => t.treatment_id == treatmentId);
            const treatmentDuration = selectedTreatment ? selectedTreatment.duration : 0;
            
            const [startHour, startMin] = selectedTime.split(':');
            const startDate = new Date();
            startDate.setHours(parseInt(startHour), parseInt(startMin), 0);
            const endDate = new Date(startDate.getTime() + treatmentDuration * 60000);
            const endTime = `${String(endDate.getHours()).padStart(2, '0')}:${String(endDate.getMinutes()).padStart(2, '0')}`;
            
            document.getElementById('finalPatientName').textContent = 
                `${currentPatient.fname} ${currentPatient.lname}`;
            
            document.getElementById('finalTreatment').textContent = 
                selectedTreatment ? `${selectedTreatment.treatment_name} (${selectedTreatment.duration} นาที)` : 'ไม่ทราบ';
            
            document.getElementById('finalDoctor').textContent = `ทพ. ${selectedDoctor.name}`;
            
            const date = new Date(selectedDate);
            const thaiMonths = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                                'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
            const dayNames = ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์'];
            
            document.getElementById('finalDate').textContent = 
                `วัน${dayNames[date.getDay()]}ที่ ${date.getDate()} ${thaiMonths[date.getMonth()]} ${date.getFullYear() + 543}`;
            
            document.getElementById('finalTime').textContent = `${selectedTime} - ${endTime} น.`;
            
            document.getElementById('finalSymptoms').textContent = symptoms || 'ไม่ได้ระบุ';
        }

        // Confirm Booking
        async function confirmBooking() {
            const confirmBtn = document.querySelector('.confirmation-section button.btn-success');
            if (!confirmBtn) return;
            
            const originalHTML = confirmBtn.innerHTML;
            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> กำลังจอง...';
            confirmBtn.disabled = true;
            
            try {
                const treatmentId = document.getElementById('treatmentSelect').value;
                const symptoms = document.getElementById('symptoms').value;
                
                if (!selectedDoctor || !selectedDoctor.id) throw new Error('กรุณาเลือกทันตแพทย์');
                if (!treatmentId) throw new Error('กรุณาเลือกการรักษา');
                if (!selectedDate) throw new Error('กรุณาเลือกวันที่');
                if (!selectedTime) throw new Error('กรุณาเลือกเวลา');
                
                const bookingData = {
                    dentist_id: selectedDoctor.id,
                    treatment_id: treatmentId,
                    date: selectedDate,
                    start_time: selectedTime,
                    note: symptoms || ''
                };
                
                console.log('📤 Booking data:', bookingData);
                
                const response = await fetch('/patient/api/book-appointment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData)
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    console.log('✅ Booking successful:', data.booking);
                    showToast('จองนัดหมายสำเร็จ!', 'success');
                    
                    document.querySelector('.booking-success').innerHTML = `
                        <i class="fas fa-check-circle"></i>
                        จองนัดหมายสำเร็จแล้ว!
                    `;
                    document.querySelector('.booking-success').style.background = 
                        'linear-gradient(135deg, #28a745, #20c997)';
                    
                    confirmBtn.innerHTML = '<i class="fas fa-check"></i> จองสำเร็จแล้ว!';
                    confirmBtn.disabled = true;
                    
                    const editBtn = document.querySelector('.confirmation-section .btn-secondary');
                    if (editBtn) editBtn.style.display = 'none';
                    
                } else {
                    throw new Error(data.error || 'เกิดข้อผิดพลาดในการจอง');
                }
            } catch (error) {
                console.error('❌ Booking error:', error);
                showToast(error.message || 'ไม่สามารถจองนัดหมายได้', 'error');
                confirmBtn.innerHTML = originalHTML;
                confirmBtn.disabled = false;
            }
        }

        // Validate Before Confirmation
        function validateBeforeConfirmation() {
            const treatmentId = document.getElementById('treatmentSelect').value;
            
            if (!selectedDoctor || !selectedDoctor.id) {
                showToast('กรุณาเลือกทันตแพทย์', 'error');
                return false;
            }
            
            if (!treatmentId) {
                showToast('กรุณาเลือกการรักษา', 'error');
                return false;
            }
            
            if (!selectedDate) {
                showToast('กรุณาเลือกวันที่', 'error');
                return false;
            }
            
            if (!selectedTime) {
                showToast('กรุณาเลือกเวลา', 'error');
                return false;
            }
            
            return true;
        }

        // Start New Booking
        function startNewBooking() {
            location.reload();
        }

        // Apply Treatment Filter
       async function applyTreatmentFilter() {
    filteredTreatmentId = document.getElementById('treatmentFilter').value;
    
    if (!filteredTreatmentId) {
        showToast('กรุณาเลือกการรักษา', 'warning');
        return;
    }
    
    showToast('กำลังค้นหาหมอที่ทำการรักษานี้...', 'info');
    
    await loadCalendarData();
    generateCalendar();
    
    const calendarSection = document.querySelector('.calendar-section');
    if (calendarSection) {
        calendarSection.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
    }
    
    const selectedTreatment = treatmentsData.find(t => t.treatment_id == filteredTreatmentId);
    
    // อัพเดท Alert Message
    const filterInstructions = document.getElementById('filterInstructions');
    if (filterInstructions) {
        filterInstructions.innerHTML = `
            <strong>กำลังแสดง:</strong> หมอที่ทำการรักษา "${selectedTreatment.treatment_name}" เท่านั้น
            | <a href="#" onclick="clearTreatmentFilter(); return false;" style="color: #4A90E2; text-decoration: underline;">แสดงทั้งหมด</a>
        `;
    }
    
    setTimeout(() => {
        showToast(`พบหมอที่ทำ ${selectedTreatment.treatment_name} - เลือกวันที่เพื่อดูรายละเอียด`, 'success');
    }, 500);
}
function clearTreatmentFilter() {
    filteredTreatmentId = '';
    document.getElementById('treatmentFilter').value = '';
    
    const filterInstructions = document.getElementById('filterInstructions');
    if (filterInstructions) {
        filterInstructions.innerHTML = `
            สามารถจองนัดหมายล่วงหน้าอย่างน้อย 24 ชั่วโมง และคลินิกปิดวันอาทิตย์
        `;
    }
    
    showToast('กำลังโหลดข้อมูลทั้งหมด...', 'info');
    loadCalendarData().then(() => {
        generateCalendar();
        showToast('แสดงหมอทั้งหมด', 'success');
    });
}
        // Show Toast
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toastMessage');
            const icon = toast.querySelector('i');
            
            toast.className = `toast ${type} show`;
            
            switch(type) {
                case 'success':
                    icon.className = 'fas fa-check-circle';
                    break;
                case 'error':
                    icon.className = 'fas fa-exclamation-circle';
                    break;
                case 'warning':
                    icon.className = 'fas fa-exclamation-triangle';
                    break;
                default:
                    icon.className = 'fas fa-info-circle';
            }
            
            toast.querySelector('span').textContent = message;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }

        // Toggle Dropdown
        function toggleDropdown() {
            const menu = document.getElementById('profileDropdown');
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        }
        
        // Close dropdown when clicking outside
        document.addEventListener('click', function (e) {
            const prof = document.querySelector('.profile-dropdown');
            if (prof && !prof.contains(e.target)) {
                document.getElementById('profileDropdown').style.display = 'none';
            }
        });
    </script>
</body>