<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>จองนัดหมาย - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            margin: 0;
        }

        .header {
            background: white;
            padding: 15px 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
            color: #4A90E2;
            font-size: 20px;
            font-weight: 600;
        }

        .logo i {
            font-size: 24px;
        }

        .nav-links {
            display: flex;
            gap: 15px;
        }

        .nav-links a {
            color: #666;
            text-decoration: none;
            padding: 8px 12px;
            border-radius: 6px;
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 14px;
        }

        .nav-links a:hover, .nav-links a.active {
            background: rgba(74, 144, 226, 0.1);
            color: #4A90E2;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 14px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px 20px;
        }

        .progress-section {
            background: white;
            border-radius: 12px;
            padding: 25px 30px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }

        .progress-steps {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 40px;
        }

        .step {
            display: flex;
            align-items: center;
            color: #6c757d;
            flex-direction: column;
            text-align: center;
            min-width: 120px;
        }

        .step.active {
            color: #4A90E2;
            font-weight: 600;
        }

        .step.completed {
            color: #10b981;
        }

        .step-number {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 12px;
            font-size: 18px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .step.active .step-number {
            background: #4A90E2;
            color: white;
            transform: scale(1.05);
        }

        .step.completed .step-number {
            background: #10b981;
            color: white;
        }

        .step-label {
            font-size: 14px;
            font-weight: 500;
        }

        .step-connector {
            flex: 1;
            height: 2px;
            background: #e9ecef;
            max-width: 100px;
        }

        .step.completed + .step-connector {
            background: #10b981;
        }

        .step-content {
            display: none;
        }

        .step-content.active {
            display: block;
            animation: fadeIn 0.4s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-section {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }

        .section-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-title i {
            color: #4A90E2;
            font-size: 20px;
        }

        .filter-grid {
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 15px;
            align-items: end;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        .form-control {
            padding: 10px 14px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .form-control:focus {
            outline: none;
            border-color: #4A90E2;
            background: white;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .calendar-section {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .calendar-title {
            font-size: 22px;
            font-weight: 600;
            color: #333;
        }

        .calendar-nav {
            background: none;
            border: none;
            color: #4A90E2;
            font-size: 18px;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

        .calendar-nav:hover {
            background: rgba(74, 144, 226, 0.1);
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
            background: #f1f3f4;
            border-radius: 8px;
            overflow: hidden;
        }

        .weekday {
            padding: 12px;
            text-align: center;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            font-weight: 600;
            font-size: 13px;
        }

        .calendar-day {
    background: white;
    min-height: 120px; /* เพิ่มความสูง */
    padding: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    display: flex;
    flex-direction: column;
}

.calendar-day:hover:not(.past):not(.unavailable):not(.other-month) {
    background: #f0f9ff;
    border: 2px solid #4A90E2;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2);
}

        .calendar-day:hover {
            background: #f8f9fa;
            border: 2px solid #4A90E2;
            transform: translateY(-2px);
        }

        .calendar-day.selected {
            background: rgba(74, 144, 226, 0.1);
            border: 2px solid #4A90E2;
            transform: translateY(-2px);
        }

        .calendar-day.past {
            background: #f8f9fa;
            color: #999;
            cursor: not-allowed;
            opacity: 0.5;
        }

        .calendar-day.past:hover {
            background: #f8f9fa;
            border: 2px solid transparent;
            transform: none;
        }

        .calendar-day.unavailable {
            background: #fed7d7;
            color: #c53030;
            cursor: not-allowed;
        }

        .day-number {
            font-weight: 600;
            font-size: 15px;
            margin-bottom: 8px;
            color: #333;
        }

        .calendar-day.past .day-number {
            color: #999;
        }

        .day-doctors {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .doctor-item {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 4px 6px;
            border-radius: 4px;
            background: rgba(74, 144, 226, 0.1);
            font-size: 11px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .doctor-item:hover {
            background: rgba(74, 144, 226, 0.2);
        }

        .doctor-mini-avatar {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 9px;
        }

        .doctors-section {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }

        .doctors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .doctor-card {
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .doctor-card:hover {
            border-color: #4A90E2;
            background: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(74, 144, 226, 0.15);
        }

        .doctor-card.selected {
            border-color: #4A90E2;
            background: rgba(74, 144, 226, 0.1);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(74, 144, 226, 0.2);
        }

        .doctor-card-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .doctor-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 20px;
        }

        .doctor-details h5 {
            margin: 0 0 5px 0;
            color: #333;
            font-size: 16px;
            font-weight: 600;
        }

        .doctor-details p {
            margin: 0;
            color: #666;
            font-size: 14px;
        }

        .doctor-treatments {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
            margin-bottom: 15px;
        }

        .treatment-tag {
            background: rgba(74, 144, 226, 0.1);
            color: #4A90E2;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .time-section {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }

        .selected-doctor-info {
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .date-selector {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }

        .date-nav {
            background: none;
            border: none;
            color: #4A90E2;
            font-size: 18px;
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .date-nav:hover {
            background: rgba(74, 144, 226, 0.1);
        }

        .selected-date {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            text-align: center;
            min-width: 250px;
        }

        .time-slots-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 12px;
        }

        .time-slot-btn {
            padding: 12px 10px;
            border: 2px solid #e9ecef;
            background: #f8f9fa;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
            font-size: 14px;
            font-weight: 500;
        }

        .time-slot-btn:hover {
            border-color: #4A90E2;
            background: rgba(74, 144, 226, 0.1);
            transform: translateY(-2px);
        }

        .time-slot-btn.available {
            border-color: #10b981;
            background: #d1f2eb;
            color: #0c5a40;
        }

        .time-slot-btn.selected {
            border-color: #4A90E2;
            background: #4A90E2;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        .appointment-details {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
            font-family: inherit;
        }

        .confirmation-section {
            background: white;
            border-radius: 12px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }

        .booking-success {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            padding: 25px;
            border-radius: 10px;
            margin-bottom: 30px;
            font-size: 20px;
            font-weight: 600;
        }

        .booking-details {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            margin: 25px 0;
            text-align: left;
        }

        .booking-details h4 {
            margin: 0 0 20px 0;
            color: #333;
            text-align: center;
            font-size: 18px;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #e9ecef;
        }

        .detail-row:last-child {
            border-bottom: none;
        }

        .detail-label {
            color: #666;
            font-weight: 500;
            font-size: 14px;
        }

        .detail-value {
            color: #333;
            font-weight: 600;
            font-size: 14px;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            justify-content: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(74, 144, 226, 0.3);
        }

        .btn-primary:disabled {
            background: #e9ecef;
            color: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 2px solid #e9ecef;
        }

        .btn-secondary:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
        }

        .step-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            margin-top: 20px;
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 50px;
            color: #666;
        }

        .loading-spinner {
            width: 36px;
            height: 36px;
            border: 3px solid rgba(74, 144, 226, 0.1);
            border-top: 3px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 18px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 4000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            min-width: 280px;
            display: none;
            align-items: center;
            gap: 10px;
        }

        .toast.show {
            display: flex;
            animation: slideInRight 0.3s ease;
        }

        .toast.success {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .toast.error {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .toast.info {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
        }

        .toast.warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
        }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .alert {
            padding: 15px 18px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 14px;
        }

        .alert-info {
            background: #d1ecf1;
            color: #0c5460;
            border: 2px solid #17a2b8;
        }

        @media (max-width: 768px) {
            .container {
                padding: 20px 10px;
            }
            
            .progress-steps {
                flex-direction: column;
                gap: 20px;
            }
            
            .step-connector {
                display: none;
            }
            
            .calendar-header {
                flex-direction: column;
                gap: 15px;
            }
            
            .doctors-grid {
                grid-template-columns: 1fr;
            }
            
            .time-slots-grid {
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            }
            
            .step-navigation {
                flex-direction: column;
                gap: 15px;
            }
            
            .filter-grid {
                grid-template-columns: 1fr;
            }

            .header-content {
                flex-direction: column;
                gap: 12px;
            }

            .nav-links {
                flex-wrap: wrap;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <div class="logo">
                <i class="fas fa-tooth"></i>
                <span>Smile Clinic</span>
            </div>
            
            <div class="nav-links">
                <a href="/patient/dashboard">Dashboard</a>
                <a href="/patient/appointment/schedule" class="active">จองนัดหมาย</a>
                <a href="/patient/history">นัดหมายของฉัน</a>
                <a href="/patient/dentists">ทันตแพทย์</a>
            </div>

            <div class="user-info">
                <div class="user-avatar" id="userAvatar">P</div>
                <div style="text-align: right;">
                    <div style="font-weight: 600; color: #333; font-size: 13px;" id="userName">ผู้ป่วย</div>
                    <div style="font-size: 11px; color: #666;">Patient</div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="progress-section">
            <div class="progress-steps">
                <div class="step active" id="step1">
                    <div class="step-number">1</div>
                    <div class="step-label">เลือกวันและหมอ</div>
                </div>
                <div class="step-connector"></div>
                <div class="step" id="step2">
                    <div class="step-number">2</div>
                    <div class="step-label">เลือกเวลาและรายละเอียด</div>
                </div>
                <div class="step-connector"></div>
                <div class="step" id="step3">
                    <div class="step-number">3</div>
                    <div class="step-label">ยืนยันการจอง</div>
                </div>
            </div>
        </div>

        <div class="toast" id="toastMessage">
            <i class="fas fa-check-circle"></i>
            <span></span>
        </div>

        <!-- Step 1 -->
        <div class="step-content active" id="step1Content">
            <div class="form-section">
                <h3 class="section-title">
                    <i class="fas fa-filter"></i>
                    กรองตามการรักษา (ถ้าต้องการ)
                </h3>
                <div class="filter-grid">
                    <div class="form-group">
                        <label for="treatmentFilter">เลือกประเภทการรักษา:</label>
                        <select id="treatmentFilter" class="form-control">
                            <option value="">การรักษาทั้งหมด</option>
                        </select>
                    </div>
                    <div>
                        <button type="button" class="btn btn-primary" onclick="applyTreatmentFilter()">
                            <i class="fas fa-filter"></i> ใช้ตัวกรอง
                        </button>
                    </div>
                </div>
            </div>

            <div class="calendar-section">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    <div>
                        <strong>นโยบายการจอง:</strong> สามารถจองนัดหมายล่วงหน้าอย่างน้อย 24 ชั่วโมง 
                        และคลินิกปิดวันอาทิตย์
                    </div>
                </div>

                <div class="calendar-header">
                    <button type="button" class="calendar-nav" onclick="changeCalendarMonth(-1)">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div class="calendar-title" id="calendarTitle">กำลังโหลด...</div>
                    <button type="button" class="calendar-nav" onclick="changeCalendarMonth(1)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
                
                <div class="calendar-grid" id="calendarGrid">
                    <div class="weekday">อา</div>
                    <div class="weekday">จ</div>
                    <div class="weekday">อ</div>
                    <div class="weekday">พ</div>
                    <div class="weekday">พฤ</div>
                    <div class="weekday">ศ</div>
                    <div class="weekday">ส</div>
                </div>
            </div>

            <div class="doctors-section" id="doctorsSection" style="display: none;">
                <h3 class="section-title">
                    <i class="fas fa-user-md"></i>
                    ทันตแพทย์ที่ว่าง <span id="selectedDateText"></span>
                </h3>
                <div class="doctors-grid" id="doctorsGrid"></div>
            </div>

            <div class="step-navigation">
                <a href="/patient/dashboard" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> กลับ
                </a>
                <button type="button" class="btn btn-primary" onclick="nextStep(2)" id="step1Next" disabled>
                    ต่อไป: เลือกเวลา <i class="fas fa-arrow-right"></i>
                </button>
            </div>
        </div>

        <!-- Step 2 -->
        <div class="step-content" id="step2Content">
            <div class="time-section">
                <div class="selected-doctor-info" id="selectedDoctorInfo">
                    <div class="doctor-avatar" id="selectedDoctorAvatar">D</div>
                    <div class="doctor-details">
                        <h3 id="selectedDoctorName">ทพ. ชื่อ</h3>
                        <p id="selectedDoctorSpecialty">ความเชี่ยวชาญ</p>
                    </div>
                </div>

                <div class="date-selector">
                    <button type="button" class="date-nav" onclick="changeSelectedDate(-1)">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div class="selected-date" id="selectedDateDisplay">วันนี้</div>
                    <button type="button" class="date-nav" onclick="changeSelectedDate(1)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>

                <h4 style="margin-bottom: 15px; color: #333; font-size: 16px; font-weight: 600;">
                    <i class="fas fa-clock" style="color: #4A90E2; margin-right: 8px;"></i>
                    ช่วงเวลาว่าง
                </h4>
                <div class="time-slots-grid" id="timeSlotsGrid">
                    <div class="loading" style="grid-column: 1 / -1;">
                        <div class="loading-spinner"></div>
                        <span>กำลังโหลดช่วงเวลาว่าง...</span>
                    </div>
                </div>
            </div>

            <div class="appointment-details">
                <h3 class="section-title">
                    <i class="fas fa-clipboard-list"></i>
                    รายละเอียดนัดหมาย
                </h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label for="treatmentSelect">การรักษา: *</label>
                        <select id="treatmentSelect" class="form-control" required>
                            <option value="">เลือกการรักษา</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="symptoms">อาการ/รายละเอียดเพิ่มเติม:</label>
                        <textarea id="symptoms" 
                                class="form-control" 
                                rows="4" 
                                placeholder="กรุณาอธิบายอาการ หรือความกังวลของคุณ..."
                                style="resize: vertical; min-height: 100px;"></textarea>
                    </div>
                </div>
            </div>

            <div class="step-navigation">
                <button type="button" class="btn btn-secondary" onclick="previousStep(1)">
                    <i class="fas fa-arrow-left"></i> กลับ
                </button>
                <button type="button" class="btn btn-primary" onclick="nextStep(3)" id="step2Next" disabled>
                    ต่อไป: ยืนยันการจอง <i class="fas fa-arrow-right"></i>
                </button>
            </div>
        </div>

        <!-- Step 3 -->
        <div class="step-content" id="step3Content">
            <div class="confirmation-section">
                <div class="booking-success" id="bookingSuccess">
                    <i class="fas fa-calendar-check"></i>
                    พร้อมจองนัดหมายของคุณ
                </div>

                <div class="booking-details">
                    <h4><i class="fas fa-file-alt"></i> สรุปนัดหมาย</h4>
                    <div class="detail-row">
                        <span class="detail-label">ชื่อผู้ป่วย:</span>
                        <span class="detail-value" id="finalPatientName">-</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">การรักษา:</span>
                        <span class="detail-value" id="finalTreatment">-</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">ทันตแพทย์:</span>
                        <span class="detail-value" id="finalDoctor">-</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">วันที่:</span>
                        <span class="detail-value" id="finalDate">-</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">เวลา:</span>
                        <span class="detail-value" id="finalTime">-</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">หมายเหตุ:</span>
                        <span class="detail-value" id="finalSymptoms">-</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">สถานะ:</span>
                        <span class="status-badge status-pending">รอยืนยัน</span>
                    </div>
                </div>

                <div class="step-navigation">
                    <button type="button" class="btn btn-secondary" onclick="previousStep(2)">
                        <i class="fas fa-edit"></i> แก้ไขข้อมูล
                    </button>
                    <button type="button" class="btn btn-success" onclick="confirmBooking()">
                        <i class="fas fa-check"></i> ยืนยันการจอง
                    </button>
                </div>

                <div class="step-navigation" style="margin-top: 30px;">
                    <button type="button" class="btn btn-secondary" onclick="startNewBooking()">
                        <i class="fas fa-plus"></i> จองอีกครั้ง
                    </button>
                    <a href="/patient/history" class="btn btn-primary">
                        <i class="fas fa-list"></i> ดูนัดหมายของฉัน
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentStep = 1;
        let selectedDoctor = null;
        let selectedDate = null;
        let selectedTime = null;
        let currentCalendarDate = new Date();
        let doctorsData = [];
        let treatmentsData = [];
        let filteredTreatmentId = '';
        let calendarData = {};

        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 เริ่มต้นระบบจองนัดหมาย...');
            initializePage();
            setupFormValidation();
        });

        async function initializePage() {
            try {
                showToast('กำลังโหลดระบบจองนัดหมาย...', 'info');
                
                await loadTreatments();
                await loadCalendarData();
                
                generateCalendar();
                showToast('พร้อมจองนัดหมายแล้ว!', 'success');
                
            } catch (error) {
                console.error('❌ เกิดข้อผิดพลาดในการเริ่มต้น:', error);
                showToast('เกิดข้อผิดพลาดในการโหลดข้อมูล กรุณารีเฟรชหน้าใหม่', 'error');
            }
        }

        async function loadTreatments() {
            try {
                console.log('📋 กำลังโหลดการรักษา...');
                const response = await fetch('/patient/api/treatments');
                const data = await response.json();
                
                if (data.success) {
                    treatmentsData = data.treatments;
                    console.log('✅ โหลด', treatmentsData.length, 'การรักษา');
                    populateTreatmentFilter();
                    populateTreatmentSelect();
                } else {
                    throw new Error(data.error || 'ไม่สามารถโหลดการรักษาได้');
                }
            } catch (error) {
                console.error('❌ เกิดข้อผิดพลาดในการโหลดการรักษา:', error);
                showToast('ไม่สามารถโหลดข้อมูลการรักษาได้', 'error');
            }
        }

        async function loadCalendarData() {
    try {
        const year = currentCalendarDate.getFullYear();
        const month = currentCalendarDate.getMonth() + 1;
        
        console.log(`📅 Loading calendar data for ${year}-${month}...`);
        
        let url = `/patient/api/calendar-data?year=${year}&month=${month}`;
        if (filteredTreatmentId) {
            url += `&treatment_id=${filteredTreatmentId}`;
        }
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.success) {
            // ✅ เคลียร์และเก็บข้อมูลใหม่
            calendarData = {};
            
            data.calendar_data.forEach(day => {
                calendarData[day.date] = {
                    available_dentists: day.available_dentists,
                    available_slots: day.available_slots,
                    total_slots: day.total_slots,
                    dentists: day.dentists || []
                };
            });
            
            console.log('✅ Loaded calendar data:', Object.keys(calendarData).length, 'days');
            console.log('Sample data:', Object.values(calendarData)[0]);
        } else {
            console.error('❌ Failed to load calendar data:', data.error);
        }
    } catch (error) {
        console.error('❌ Error loading calendar:', error);
    }
}

        function populateTreatmentFilter() {
            const select = document.getElementById('treatmentFilter');
            select.innerHTML = '<option value="">การรักษาทั้งหมด</option>';
            
            treatmentsData.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment.treatment_id;
                option.textContent = `${treatment.treatment_name} (${treatment.duration} นาที)`;
                select.appendChild(option);
            });
        }

        function populateTreatmentSelect() {
            const select = document.getElementById('treatmentSelect');
            select.innerHTML = '<option value="">เลือกการรักษา</option>';
            
            treatmentsData.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment.treatment_id;
                option.textContent = `${treatment.treatment_name} (${treatment.duration} นาที)`;
                select.appendChild(option);
            });
        }

        function changeCalendarMonth(direction) {
            currentCalendarDate.setMonth(currentCalendarDate.getMonth() + direction);
            loadCalendarData().then(() => generateCalendar());
        }

        function generateCalendar() {
            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth();
            
            const monthNames = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 
                              'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
            document.getElementById('calendarTitle').textContent = `${monthNames[month]} ${year + 543}`;
            
            const grid = document.getElementById('calendarGrid');
            const weekdayHeaders = grid.querySelectorAll('.weekday');
            grid.innerHTML = '';
            weekdayHeaders.forEach(header => grid.appendChild(header));
            
            const firstDay = new Date(year, month, 1);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                
                const dayElement = createDayElement(date, month, today, tomorrow);
                grid.appendChild(dayElement);
            }
        }

        function createDayElement(date, currentMonth, today, tomorrow) {
    const day = document.createElement('div');
    day.className = 'calendar-day';
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const dayNum = String(date.getDate()).padStart(2, '0');
    const dateString = `${year}-${month}-${dayNum}`;
    
    day.dataset.date = dateString;
    
    const dayOfWeek = date.getDay();
    const compareDate = new Date(date);
    compareDate.setHours(0, 0, 0, 0);
    const todayDate = new Date(today);
    todayDate.setHours(0, 0, 0, 0);
    const tomorrowDate = new Date(tomorrow);
    tomorrowDate.setHours(0, 0, 0, 0);
    
    // ตรวจสอบเดือน
    if (date.getMonth() !== currentMonth) {
        day.classList.add('other-month');
        day.style.opacity = '0.3';
        day.style.pointerEvents = 'none';
    }
    
    // ตรวจสอบวันที่ผ่านมา
    const isPast = compareDate <= tomorrowDate;
    if (isPast) {
        day.classList.add('past');
    }
    
    // ตรวจสอบวันอาทิตย์
    if (dayOfWeek === 0) {
        day.classList.add('unavailable');
    }
    
    // แสดงหมายเลขวัน
    const dayNumber = document.createElement('div');
    dayNumber.className = 'day-number';
    dayNumber.textContent = date.getDate();
    day.appendChild(dayNumber);
    
    // แสดงข้อมูลทันตแพทย์
    const dayData = calendarData[dateString];
    
    const isBookable = dayOfWeek !== 0 && 
                       date.getMonth() === currentMonth && 
                       compareDate > tomorrowDate;
    
    if (isBookable && dayData && dayData.dentists && dayData.dentists.length > 0) {
        // เปลี่ยนสีพื้นหลัง
        day.style.backgroundColor = '#fff9e6';
        
        // แสดงรายชื่อทันตแพทย์
        const dentistsContainer = document.createElement('div');
        dentistsContainer.style.cssText = 'margin-top: 5px; font-size: 11px;';
        
        dayData.dentists.slice(0, 2).forEach(dentist => {
            const dentistItem = document.createElement('div');
            dentistItem.style.cssText = `
                display: flex;
                align-items: center;
                gap: 4px;
                padding: 3px;
                margin: 2px 0;
                background: rgba(74, 144, 226, 0.1);
                border-radius: 4px;
                color: #4A90E2;
                font-weight: 500;
            `;
            
            const initial = document.createElement('div');
            initial.style.cssText = `
                width: 20px;
                height: 20px;
                border-radius: 50%;
                background: #4A90E2;
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 10px;
                font-weight: 600;
                flex-shrink: 0;
            `;
            initial.textContent = dentist.name.split(' ').map(n => n[0]).join('');
            
            const nameSpan = document.createElement('span');
            nameSpan.style.cssText = 'overflow: hidden; text-overflow: ellipsis; white-space: nowrap;';
            nameSpan.textContent = dentist.name;
            
            dentistItem.appendChild(initial);
            dentistItem.appendChild(nameSpan);
            dentistsContainer.appendChild(dentistItem);
        });
        
        if (dayData.dentists.length > 2) {
            const moreInfo = document.createElement('div');
            moreInfo.style.cssText = 'text-align: center; color: #666; font-size: 10px; margin-top: 2px;';
            moreInfo.textContent = `+${dayData.dentists.length - 2} more`;
            dentistsContainer.appendChild(moreInfo);
        }
        
        day.appendChild(dentistsContainer);
        
        // เพิ่ม event listener
        day.addEventListener('click', () => selectCalendarDate(dateString, day));
        day.style.cursor = 'pointer';
        
    } else if (isBookable && dayData && dayData.available_slots > 0) {
        // มี slots แต่ไม่มีข้อมูลทันตแพทย์
        const slotInfo = document.createElement('small');
        slotInfo.style.cssText = 'display:block; color: #059669; font-size: 10px; margin-top: 5px;';
        slotInfo.textContent = `${dayData.available_slots} ช่วงเวลาว่าง`;
        day.appendChild(slotInfo);
        
        day.addEventListener('click', () => selectCalendarDate(dateString, day));
        day.style.cursor = 'pointer';
    }
    
    return day;
}

        function selectCalendarDate(dateStr, dayElement) {
            const selectedDateObj = new Date(dateStr);
            const now = new Date();
            const timeDiff = selectedDateObj.getTime() - now.getTime();
            const hoursDiff = timeDiff / (1000 * 3600);
            
            if (hoursDiff < 24) {
                showToast('ต้องจองล่วงหน้าอย่างน้อย 24 ชั่วโมง', 'warning');
                return;
            }
            
            document.querySelectorAll('.calendar-day.selected').forEach(day => {
                day.classList.remove('selected');
            });
            
            dayElement.classList.add('selected');
            selectedDate = dateStr;
            
            console.log('📅 เลือกวันที่:', selectedDate);
            showAvailableDentists(dateStr);
        }

        async function showAvailableDentists(dateStr) {
    const doctorsSection = document.getElementById('doctorsSection');
    const doctorsGrid = document.getElementById('doctorsGrid');
    const dateText = document.getElementById('selectedDateText');
    
    const date = new Date(dateStr);
    const thaiMonths = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                        'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
    dateText.textContent = `${date.getDate()} ${thaiMonths[date.getMonth()]} ${date.getFullYear() + 543}`;
    
    doctorsGrid.innerHTML = `
        <div class="loading" style="grid-column: 1 / -1;">
            <div class="loading-spinner"></div>
            <span>กำลังโหลดข้อมูลทันตแพทย์...</span>
        </div>
    `;
    
    doctorsSection.style.display = 'block';
    
    try {
        let url = `/patient/api/available-dentists?date=${dateStr}`;
        if (filteredTreatmentId) {
            url += `&treatment_id=${filteredTreatmentId}`;
        }
        
        console.log('👨‍⚕️ Fetching dentists from:', url);
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.success && data.dentists && data.dentists.length > 0) {
            doctorsData = data.dentists;
            console.log('✅ Found', data.dentists.length, 'dentists');
            
            let doctorsHTML = '';
            data.dentists.forEach(doctor => {
                const initials = doctor.fname.charAt(0) + doctor.lname.charAt(0);
                
                let treatmentsHTML = '';
                if (doctor.treatments && doctor.treatments.length > 0) {
                    doctor.treatments.slice(0, 3).forEach(treatment => {
                        treatmentsHTML += `<span class="treatment-tag">${treatment.treatment_name}</span>`;
                    });
                } else {
                    treatmentsHTML = '<span class="treatment-tag">ทันตกรรมทั่วไป</span>';
                }
                
                doctorsHTML += `
                    <div class="doctor-card" onclick="selectDoctorFromCard(${doctor.dentist_id}, '${doctor.fname}', '${doctor.lname}', '${doctor.specialty || 'ทันตแพทย์ทั่วไป'}', this)">
                        <div class="doctor-card-header">
                            <div class="doctor-avatar">${initials}</div>
                            <div class="doctor-details">
                                <h5>ทพ. ${doctor.fname} ${doctor.lname}</h5>
                                <p>${doctor.specialty || 'ทันตแพทย์ทั่วไป'}</p>
                            </div>
                        </div>
                        <div class="doctor-treatments">
                            ${treatmentsHTML}
                        </div>
                        <div style="margin-top: 10px;">
                            <strong style="color: #10b981; font-size: 14px;">
                                <i class="fas fa-check-circle"></i> 
                                ${doctor.available_slots} ช่วงเวลาว่าง
                            </strong>
                        </div>
                    </div>
                `;
            });
            doctorsGrid.innerHTML = doctorsHTML;
        } else {
            console.log('⚠️ No dentists available');
            doctorsGrid.innerHTML = `
                <div style="grid-column: 1 / -1; text-align: center; padding: 40px;">
                    <i class="fas fa-calendar-times" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                    <p style="color: #666; font-size: 16px;">ไม่มีทันตแพทย์ว่างในวันนี้</p>
                    <p style="color: #999; font-size: 14px;">กรุณาเลือกวันอื่น</p>
                </div>
            `;
        }
        
        doctorsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } catch (error) {
        console.error('❌ Error loading dentists:', error);
        showToast('ไม่สามารถโหลดข้อมูลทันตแพทย์ได้', 'error');
        doctorsGrid.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #dc3545;">
                <i class="fas fa-exclamation-circle" style="font-size: 48px; margin-bottom: 15px;"></i>
                <p>เกิดข้อผิดพลาดในการโหลดข้อมูล</p>
            </div>
        `;
    }
}


        function createDoctorCard(doctor) {
            const initials = doctor.fname.charAt(0) + doctor.lname.charAt(0);
            
            let treatmentsHTML = '';
            if (doctor.treatments && doctor.treatments.length > 0) {
                doctor.treatments.slice(0, 3).forEach(treatment => {
                    treatmentsHTML += `<span class="treatment-tag">${treatment.treatment_name}</span>`;
                });
            } else {
                treatmentsHTML = '<span class="treatment-tag">ทันตกรรมทั่วไป</span>';
            }
            
            return `
                <div class="doctor-card" onclick="selectDoctorFromCard(${doctor.dentist_id}, '${doctor.fname}', '${doctor.lname}', '${doctor.specialty || 'ทันตแพทย์ทั่วไป'}', this)">
                    <div class="doctor-card-header">
                        <div class="doctor-avatar">${initials}</div>
                        <div class="doctor-details">
                            <h5>ทพ. ${doctor.fname} ${doctor.lname}</h5>
                            <p>${doctor.specialty || 'ทันตแพทย์ทั่วไป'}</p>
                        </div>
                    </div>
                    <div class="doctor-treatments">
                        ${treatmentsHTML}
                    </div>
                    <div style="margin-top: 10px;">
                        <strong style="color: #10b981; font-size: 14px;">
                            <i class="fas fa-check-circle"></i> 
                            ${doctor.available_slots} ช่วงเวลาว่าง
                        </strong>
                    </div>
                </div>
            `;
        }

        function selectDoctorFromCard(doctorId, fname, lname, specialty, cardElement) {
            document.querySelectorAll('.doctor-card.selected').forEach(card => {
                card.classList.remove('selected');
            });
            
            cardElement.classList.add('selected');
            
            selectedDoctor = {
                id: doctorId,
                name: `${fname} ${lname}`,
                specialty: specialty,
                fname: fname,
                lname: lname
            };
            
            console.log('👨‍⚕️ เลือกทันตแพทย์:', selectedDoctor);
            document.getElementById('step1Next').disabled = false;
            showToast(`เลือก ทพ. ${fname} ${lname} แล้ว`, 'success');
            
            setTimeout(() => {
                document.querySelector('.step-navigation').scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'end' 
                });
            }, 300);
        }

        function setupFormValidation() {
            const treatmentSelect = document.getElementById('treatmentSelect');
            treatmentSelect.addEventListener('change', () => {
                loadTimeSlots();
                validateStep2();
            });
        }

        function validateStep2() {
            const hasTreatment = document.getElementById('treatmentSelect').value !== '';
            const hasTime = selectedTime !== null;
            
            document.getElementById('step2Next').disabled = !(hasTreatment && hasTime);
        }

        function nextStep(step) {
    if (step === 2 && !selectedDoctor) {
        showToast('กรุณาเลือกทันตแพทย์ก่อน', 'error');
        return;
    }
    
    if (step === 3) {
        const hasTreatment = document.getElementById('treatmentSelect').value;
        const hasTime = selectedTime;
        
        if (!hasTreatment || !hasTime) {
            showToast('กรุณากรอกข้อมูลให้ครบถ้วน', 'error');
            return;
        }
        
        // เพิ่มการตรวจสอบครบถ้วน
        if (!validateBeforeConfirmation()) {
            return;
        }
    }

    currentStep = step;
    updateStepDisplay();
    
    if (step === 2) {
        initializeStep2();
    } else if (step === 3) {
        initializeStep3();
    }
    
    window.scrollTo({ top: 0, behavior: 'smooth' });
}
        function previousStep(step) {
            currentStep = step;
            updateStepDisplay();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function updateStepDisplay() {
            for (let i = 1; i <= 3; i++) {
                const stepElement = document.getElementById(`step${i}`);
                const contentElement = document.getElementById(`step${i}Content`);
                
                stepElement.classList.remove('active', 'completed');
                contentElement.classList.remove('active');
                
                if (i < currentStep) {
                    stepElement.classList.add('completed');
                } else if (i === currentStep) {
                    stepElement.classList.add('active');
                    contentElement.classList.add('active');
                }
            }
        }

        function initializeStep2() {
            document.getElementById('selectedDoctorName').textContent = `ทพ. ${selectedDoctor.name}`;
            document.getElementById('selectedDoctorSpecialty').textContent = selectedDoctor.specialty;
            document.getElementById('selectedDoctorAvatar').textContent = 
                selectedDoctor.fname.charAt(0) + selectedDoctor.lname.charAt(0);
            
            updateSelectedDateDisplay();
            
            const treatmentId = document.getElementById('treatmentSelect').value;
            if (treatmentId) {
                loadTimeSlots();
            }
        }

        function updateSelectedDateDisplay() {
            const date = new Date(selectedDate);
            const thaiMonths = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                                'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
            const dayNames = ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์'];
            
            document.getElementById('selectedDateDisplay').textContent = 
                `วัน${dayNames[date.getDay()]}ที่ ${date.getDate()} ${thaiMonths[date.getMonth()]} ${date.getFullYear() + 543}`;
        }

        async function loadTimeSlots() {
            const treatmentId = document.getElementById('treatmentSelect').value;
            
            if (!treatmentId) {
                document.getElementById('timeSlotsGrid').innerHTML = `
                    <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">
                        <i class="fas fa-info-circle" style="font-size: 36px; margin-bottom: 10px;"></i>
                        <p>กรุณาเลือกการรักษาก่อน</p>
                    </div>
                `;
                return;
            }
            
            const grid = document.getElementById('timeSlotsGrid');
            
            grid.innerHTML = `
                <div class="loading" style="grid-column: 1 / -1;">
                    <div class="loading-spinner"></div>
                    <span>กำลังโหลดช่วงเวลาว่าง...</span>
                </div>
            `;

            try {
                const url = `/patient/api/available-slots?date=${selectedDate}&dentistId=${selectedDoctor.id}&treatmentId=${treatmentId}`;
                console.log('⏰ กำลังดึงช่วงเวลาจาก:', url);
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.success && data.slots.length > 0) {
                    console.log('✅ พบ', data.slots.length, 'ช่วงเวลาว่าง');
                    let timeSlots = '';
                    data.slots.forEach(slot => {
                        timeSlots += `
                            <div class="time-slot-btn available" 
                                 onclick="selectTimeSlot('${slot.start_time}')"
                                 data-time="${slot.start_time}">
                                <strong>${slot.start_time}</strong><br>
                                <small>${slot.duration} นาที</small>
                            </div>
                        `;
                    });
                    grid.innerHTML = timeSlots;
                } else {
                    console.log('⚠️ ไม่มีช่วงเวลาว่าง');
                    grid.innerHTML = `
                        <div style="grid-column: 1 / -1; text-align: center; padding: 40px;">
                            <i class="fas fa-calendar-times" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                            <p style="color: #666; font-size: 16px;">ไม่มีช่วงเวลาว่างสำหรับการรักษานี้</p>
                            <p style="color: #999; font-size: 14px;">กรุณาเลือกวันอื่นหรือเปลี่ยนการรักษา</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('❌ เกิดข้อผิดพลาดในการโหลดช่วงเวลา:', error);
                showToast('ไม่สามารถโหลดช่วงเวลาได้', 'error');
                grid.innerHTML = `
                    <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #dc3545;">
                        <i class="fas fa-exclamation-circle" style="font-size: 48px; margin-bottom: 15px;"></i>
                        <p>เกิดข้อผิดพลาดในการโหลดข้อมูล</p>
                    </div>
                `;
            }
        }

        function changeSelectedDate(direction) {
            const date = new Date(selectedDate);
            date.setDate(date.getDate() + direction);
            
            const now = new Date();
            const timeDiff = date.getTime() - now.getTime();
            const hoursDiff = timeDiff / (1000 * 3600);
            
            if (hoursDiff < 24) {
                showToast('ไม่สามารถเลือกวันที่ภายใน 24 ชั่วโมงได้', 'warning');
                return;
            }
            
            if (date.getDay() === 0) {
                showToast('คลินิกปิดวันอาทิตย์', 'warning');
                return;
            }
            
            selectedDate = date.toISOString().split('T')[0];
            updateSelectedDateDisplay();
            loadTimeSlots();
            
            selectedTime = null;
            validateStep2();
        }

        function selectTimeSlot(time) {
            document.querySelectorAll('.time-slot-btn.selected').forEach(btn => {
                btn.classList.remove('selected');
                btn.classList.add('available');
            });
            
            const button = document.querySelector(`[data-time="${time}"]`);
            if (button) {
                button.classList.remove('available');
                button.classList.add('selected');
                selectedTime = time;
                
                console.log('⏰ เลือกเวลา:', selectedTime);
                validateStep2();
                showToast('เลือกเวลาแล้ว', 'success');
            }
        }
        
        function initializeStep3() {
            const treatmentId = document.getElementById('treatmentSelect').value;
            const symptoms = document.getElementById('symptoms').value;
            
            const selectedTreatment = treatmentsData.find(t => t.treatment_id == treatmentId);
            
            document.getElementById('finalPatientName').textContent = 'คุณ (ผู้ป่วย)';
            document.getElementById('finalTreatment').textContent = 
                selectedTreatment ? `${selectedTreatment.treatment_name} (${selectedTreatment.duration} นาที)` : 'ไม่ทราบ';
            document.getElementById('finalDoctor').textContent = `ทพ. ${selectedDoctor.name}`;
            
            const date = new Date(selectedDate);
            const thaiMonths = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                                'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
            const dayNames = ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์'];
            
            document.getElementById('finalDate').textContent = 
                `วัน${dayNames[date.getDay()]}ที่ ${date.getDate()} ${thaiMonths[date.getMonth()]} ${date.getFullYear() + 543}`;
            document.getElementById('finalTime').textContent = selectedTime;
            document.getElementById('finalSymptoms').textContent = symptoms || 'ไม่ได้ระบุ';
        }

        async function confirmBooking() {
    const confirmBtn = document.querySelector('.confirmation-section button.btn-success');
    if (!confirmBtn) return;
    
    const originalHTML = confirmBtn.innerHTML;
    confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> กำลังจอง...';
    confirmBtn.disabled = true;
    
    try {
        const treatmentId = document.getElementById('treatmentSelect').value;
        const symptoms = document.getElementById('symptoms').value;
        
        // Validate
        if (!selectedDoctor || !selectedDoctor.id) throw new Error('กรุณาเลือกทันตแพทย์');
        if (!treatmentId) throw new Error('กรุณาเลือกการรักษา');
        if (!selectedDate) throw new Error('กรุณาเลือกวันที่');
        if (!selectedTime) throw new Error('กรุณาเลือกเวลา');
        
        const bookingData = {
            dentist_id: selectedDoctor.id,
            treatment_id: treatmentId,
            date: selectedDate,
            start_time: selectedTime,
            note: symptoms || ''
        };
        
        console.log('📤 Booking data:', bookingData);
        
        const response = await fetch('/patient/api/book-appointment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(bookingData)
        });
        
        const data = await response.json();
        
        if (response.ok && data.success) {
            console.log('✅ Booking successful:', data.booking);
            showToast('จองนัดหมายสำเร็จ!', 'success');
            
            document.querySelector('.booking-success').innerHTML = `
                <i class="fas fa-check-circle"></i>
                จองนัดหมายสำเร็จแล้ว!
            `;
            document.querySelector('.booking-success').style.background = 
                'linear-gradient(135deg, #10b981, #059669)';
            
            confirmBtn.innerHTML = '<i class="fas fa-check"></i> จองสำเร็จแล้ว!';
            confirmBtn.disabled = true;
            
            // ซ่อนปุ่มแก้ไข
            const editBtn = document.querySelector('.confirmation-section .btn-secondary');
            if (editBtn) editBtn.style.display = 'none';
            
        } else {
            throw new Error(data.error || 'เกิดข้อผิดพลาดในการจอง');
        }
    } catch (error) {
        console.error('❌ Booking error:', error);
        showToast(error.message || 'ไม่สามารถจองนัดหมายได้', 'error');
        confirmBtn.innerHTML = originalHTML;
        confirmBtn.disabled = false;
    }
}

        function validateBeforeConfirmation() {
    const treatmentId = document.getElementById('treatmentSelect').value;
    const symptoms = document.getElementById('symptoms').value;
    
    if (!selectedDoctor || !selectedDoctor.id) {
        showToast('กรุณาเลือกทันตแพทย์', 'error');
        return false;
    }
    
    if (!treatmentId) {
        showToast('กรุณาเลือกการรักษา', 'error');
        return false;
    }
    
    if (!selectedDate) {
        showToast('กรุณาเลือกวันที่', 'error');
        return false;
    }
    
    if (!selectedTime) {
        showToast('กรุณาเลือกเวลา', 'error');
        return false;
    }
    
    return true;
}


        function startNewBooking() {
            location.reload();
        }

        async function applyTreatmentFilter() {
            filteredTreatmentId = document.getElementById('treatmentFilter').value;
            
            showToast('กำลังโหลดข้อมูลใหม่...', 'info');
            await loadCalendarData();
            generateCalendar();
            
            if (filteredTreatmentId) {
                const selectedTreatment = treatmentsData.find(t => t.treatment_id == filteredTreatmentId);
                showToast(`กรองตามการรักษา: ${selectedTreatment.treatment_name}`, 'success');
            } else {
                showToast('แสดงการรักษาทั้งหมด', 'success');
            }
        }

        function showToast(message, type = 'success') {
            const toast = document.getElementById('toastMessage');
            const icon = toast.querySelector('i');
            
            toast.className = `toast ${type} show`;
            
            switch(type) {
                case 'success':
                    icon.className = 'fas fa-check-circle';
                    break;
                case 'error':
                    icon.className = 'fas fa-exclamation-circle';
                    break;
                case 'warning':
                    icon.className = 'fas fa-exclamation-triangle';
                    break;
                default:
                    icon.className = 'fas fa-info-circle';
            }
            
            toast.querySelector('span').textContent = message;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }
    </script>
</body>
</html>