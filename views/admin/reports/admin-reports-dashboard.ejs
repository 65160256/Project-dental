<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>แดชบอร์ดรายงานคลินิก - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Sarabun', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .sidebar {
            width: 180px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            position: fixed;
            height: 100vh;
            padding: 0;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
            color: #4A90E2;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 2px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        .main {
            margin-left: 180px;
            padding: 0;
            min-height: 100vh;
        }

        .top-bar {
            background: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        /* ========== NOTIFICATION BELL STYLES ========== */
        .notification-bell-container {
            position: relative;
            display: inline-block;
            margin: 0 10px;
        }

        .notification-bell-btn {
            position: relative;
            background: none;
            border: none;
            font-size: 20px;
            color: #666;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .notification-bell-btn:hover {
            background: #f0f0f0;
            color: #667eea;
        }

        .notification-badge {
            position: absolute;
            top: 5px;
            right: 5px;
            background: #ff4757;
            color: white;
            border-radius: 10px;
            padding: 2px 6px;
            font-size: 11px;
            font-weight: bold;
            min-width: 18px;
            text-align: center;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .notification-dropdown {
            position: absolute;
            top: calc(100% + 10px);
            right: -150px;
            width: 380px;
            max-height: 500px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.15);
            z-index: 1000;
            animation: slideDown 0.3s ease;
            display: none;
        }

        .notification-dropdown.show {
            display: block;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
        }

        .notification-header h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }

        .mark-all-read-btn {
            background: none;
            border: none;
            color: #667eea;
            font-size: 13px;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 5px;
            transition: background 0.3s;
        }

        .mark-all-read-btn:hover {
            background: #f0f0f0;
        }

        .notification-list {
            max-height: 350px;
            overflow-y: auto;
        }

        .notification-item {
            padding: 15px 20px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: background 0.2s;
            position: relative;
        }

        .notification-item:hover {
            background: #f8f9fa;
        }

        .notification-item.unread {
            background: #f0f4ff;
        }

        .notification-item.unread::before {
            content: '';
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            width: 8px;
            height: 8px;
            background: #667eea;
            border-radius: 50%;
        }

        .notification-icon-emoji {
            font-size: 24px;
            margin-right: 12px;
            vertical-align: middle;
        }

        .notification-content {
            display: inline-block;
            width: calc(100% - 40px);
            vertical-align: middle;
        }

        .notification-title {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 4px;
            color: #333;
        }

        .notification-message {
            font-size: 13px;
            color: #666;
            line-height: 1.4;
            margin-bottom: 4px;
        }

        .notification-time {
            font-size: 12px;
            color: #999;
        }

        .notification-footer {
            padding: 12px 20px;
            text-align: center;
            border-top: 1px solid #eee;
        }

        .view-all-link {
            color: #667eea;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
        }

        .view-all-link:hover {
            text-decoration: underline;
        }

        .notification-loading,
        .notification-empty {
            padding: 40px 20px;
            text-align: center;
            color: #999;
        }

        .notification-empty i {
            font-size: 48px;
            margin-bottom: 10px;
            opacity: 0.3;
        }

        .profile-dropdown {
            position: relative;
        }

        .user-info {
            display: flex;
            align-items: center;
            cursor: pointer;
            gap: 10px;
            transition: all 0.3s ease;
        }

        .user-info:hover {
            transform: translateY(-1px);
        }

        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 8px;
            min-width: 180px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            z-index: 2000;
            margin-top: 8px;
            overflow: hidden;
        }

        .dropdown-menu.show {
            display: block;
            animation: slideDown 0.3s ease;
        }

        .dropdown-menu a {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 15px;
            text-decoration: none;
            color: #333;
            font-size: 13px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .dropdown-menu a:hover {
            background-color: #f8f9fa;
            color: #4A90E2;
        }

        .dropdown-menu hr {
            margin: 5px 0;
            border: none;
            border-top: 1px solid #e1e5e9;
        }

        .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .user-details strong {
            display: block;
            font-size: 13px;
            color: #333;
        }

        .user-details small {
            color: #666;
            font-size: 11px;
        }

        .content {
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        /* Main Content Grid */
        .main-content-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
        }

        .left-column {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .right-column {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }


        /* Admin Section */
        .admin-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .admin-greeting h2 {
            font-size: 28px;
            font-weight: 700;
            color: #333;
            margin: 0 0 5px 0;
        }

        .admin-greeting p {
            font-size: 14px;
            color: #666;
            margin: 0;
        }

        .total-patients-card {
            background: #f8f8f8;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            position: relative;
            min-width: 150px;
        }

        .patient-number {
            font-size: 36px;
            font-weight: 700;
            color: #333;
            margin-bottom: 5px;
        }

        .patient-label {
            font-size: 14px;
            color: #666;
            margin-bottom: 10px;
        }

        .patient-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 24px;
            color: #666;
        }

        /* Section Styles */
        .appointment-report-section,
        .treatments-section,
        .doctor-stats-section,
        .monthly-stats-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        /* Monthly Statistics */
        .stats-summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .stat-summary-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #4A90E2;
        }

        .stat-summary-number {
            font-size: 28px;
            font-weight: 700;
            color: #4A90E2;
            margin-bottom: 5px;
        }

        .stat-summary-label {
            font-size: 14px;
            color: #666;
            line-height: 1.4;
        }

        .trends-info {
            margin-top: 25px;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
        }

        .trends-info h4 {
            font-size: 16px;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
        }

        .trends-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .trend-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            background: #f8f9fa;
            border-radius: 6px;
            font-size: 14px;
        }

        .trend-date {
            font-weight: 500;
            color: #333;
        }

        .trend-count {
            color: #4A90E2;
            font-weight: 600;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .section-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .filter-buttons {
            display: flex;
            gap: 5px;
        }

        .filter-btn {
            padding: 8px 16px;
            background: #f0f0f0;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .filter-btn.active {
            background: #4A90E2;
            color: white;
        }

        .filter-btn:hover {
            background: #e0e0e0;
        }

        .filter-btn.active:hover {
            background: #357abd;
        }

        .add-appointment-btn {
            background: #4A90E2;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .add-appointment-btn:hover {
            background: #357abd;
        }

        .refresh-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.2s;
            margin-left: 10px;
        }

        .refresh-btn:hover {
            background: #218838;
        }

        .refresh-btn:active {
            transform: rotate(180deg);
            transition: transform 0.3s;
        }

        /* Appointment Summary */
        .appointment-summary {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }

        .summary-card {
            flex: 1;
            background: #f8f8f8;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .summary-card:hover {
            transform: translateY(-2px);
        }

        .summary-card.confirmed {
            background: #10b981;
            color: white;
        }

        .summary-card.pending {
            background: #f59e0b;
            color: white;
        }

        .summary-card.cancelled {
            background: #ef4444;
            color: white;
        }

        .summary-card.completed {
            background: #059669;
            color: white;
        }

        .summary-number {
            font-size: 32px;
            font-weight: 700;
            color: inherit;
            margin-bottom: 5px;
        }

        .summary-label {
            font-size: 14px;
            color: inherit;
            opacity: 0.9;
        }

        /* Chart Container */
        .chart-container {
            margin-top: 20px;
            height: 300px;
            position: relative;
        }

        .chart-title {
            font-size: 16px;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
        }

        /* Right Column */
        .right-column {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            height: fit-content;
        }

        .sidebar-title {
            font-size: 16px;
            font-weight: 600;
            color: #333;
            margin: 0 0 15px 0;
        }

        /* Today's Doctors */
        .todays-doctors-section {
            margin-bottom: 30px;
        }

        .doctors-grid {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .doctor-card {
            background: #f8f8f8;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .doctor-card:hover {
            transform: translateY(-2px);
        }

        .doctor-avatar {
            width: 60px;
            height: 60px;
            margin: 0 auto 10px;
            border-radius: 50%;
            background: #666;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .doctor-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .avatar-placeholder {
            color: white;
            font-size: 24px;
        }

        .doctor-name {
            font-size: 14px;
            font-weight: 600;
            color: #333;
        }

        /* Calendar */
        .calendar-section {
            margin-bottom: 30px;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .calendar-nav {
            display: flex;
            gap: 5px;
        }

        .nav-btn {
            width: 24px;
            height: 24px;
            border: none;
            background: #f0f0f0;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }

        .nav-btn:hover {
            background: #e0e0e0;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }

        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .calendar-day.header {
            background: none;
            color: #666;
            font-weight: 600;
            cursor: default;
        }

        .calendar-day.today {
            background: #4A90E2;
            color: white;
        }

        .calendar-day:not(.header):not(.today):hover {
            background: #f0f0f0;
        }

        /* Upcoming Appointments */
        .upcoming-appointments-section {
            margin-bottom: 20px;
        }

        .appointment-date-header {
            margin-bottom: 15px;
        }

        .appointment-date-header h4 {
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .appointments-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .appointment-item {
            padding: 12px;
            background: #f8f8f8;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .appointment-item:hover {
            background: #f0f0f0;
        }

        .appointment-time {
            font-size: 12px;
            font-weight: 600;
            color: #666;
            margin-bottom: 5px;
        }

        .patient-name {
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
        }

        .treatment-name {
            font-size: 12px;
            color: #666;
        }

        .header-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 16px;
            padding: 30px;
            color: white;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .welcome-text h1 {
            font-size: 28px;
            margin: 0 0 8px 0;
            font-weight: 700;
        }

        .welcome-text p {
            font-size: 16px;
            opacity: 0.9;
            margin: 0;
        }

        .total-patients {
            text-align: center;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .total-patients:hover {
            transform: scale(1.05);
        }

        .total-patients .number {
            font-size: 48px;
            font-weight: 700;
            margin: 0;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .total-patients .label {
            font-size: 14px;
            opacity: 0.9;
            margin: 5px 0 0 0;
        }

        .patient-icon {
            width: 80px;
            height: 80px;
            background: rgba(255,255,255,0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 36px;
            margin: 0 auto 10px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .appointment-report, .todays-doctors, .treatment-section, .upcoming-section, .doctor-stats-section {
            background: white;
            border-radius: 16px;
            padding: 25px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .period-selector {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 4px;
            display: flex;
            gap: 2px;
        }

        .period-btn {
            padding: 8px 16px;
            background: transparent;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            color: #666;
            transition: all 0.2s ease;
        }

        .period-btn.active {
            background: white;
            color: #4A90E2;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .appointment-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 25px;
        }

        .stat-item {
            text-align: center;
            padding: 20px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .stat-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .stat-item.confirmed {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .stat-item.pending {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
        }

        .stat-item.cancelled {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .stat-number {
            font-size: 32px;
            font-weight: 700;
            margin: 0;
        }

        .stat-label {
            font-size: 14px;
            margin: 5px 0 0 0;
            opacity: 0.9;
        }

        .doctors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .doctor-card {
            text-align: center;
            padding: 20px 15px;
            border-radius: 12px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .doctor-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .doctor-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin: 0 auto 10px;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 18px;
            overflow: hidden;
        }

        .doctor-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .doctor-name {
            font-size: 13px;
            font-weight: 600;
            color: #333;
            margin: 0 0 5px 0;
        }

        .doctor-specialty {
            font-size: 11px;
            color: #666;
            margin: 0;
        }

        .content-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .chart-container {
            margin-top: 20px;
            height: 300px;
            position: relative;
        }

        .calendar-section {
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .month-year {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }

        .calendar-nav {
            display: flex;
            gap: 10px;
        }

        .nav-btn {
            width: 32px;
            height: 32px;
            border: none;
            border-radius: 6px;
            background: white;
            color: #666;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .nav-btn:hover {
            background: #4A90E2;
            color: white;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 8px;
        }

        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .calendar-day.header {
            background: none;
            color: #666;
            font-weight: 600;
            cursor: default;
        }

        .calendar-day.today {
            background: #4A90E2;
            color: white;
        }

        .calendar-day.other-month {
            color: #ccc;
        }

        .calendar-day:not(.header):not(.today):hover {
            background: rgba(74, 144, 226, 0.1);
        }

        .calendar-day.has-appointments {
            background: #ffeb3b;
            color: #333;
            position: relative;
        }

        .calendar-day.has-appointments::after {
            content: '';
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 6px;
            height: 6px;
            background: #ff5722;
            border-radius: 50%;
        }

        .calendar-day.today.has-appointments {
            background: #4A90E2;
            color: white;
        }

        .calendar-day.today.has-appointments::after {
            background: #ffeb3b;
        }

        .appointments-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .appointment-item {
            padding: 12px;
            border-left: 4px solid #4A90E2;
            background: #f8f9fa;
            margin-bottom: 10px;
            border-radius: 0 8px 8px 0;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .appointment-item:hover {
            background: #e9ecef;
            transform: translateX(2px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .appointment-time {
            font-size: 12px;
            color: #666;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .appointment-time i {
            color: #4A90E2;
        }

        .appointment-patient {
            font-weight: 600;
            color: #333;
            margin-bottom: 3px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .appointment-patient i {
            color: #10b981;
        }

        .appointment-treatment {
            font-size: 12px;
            color: #666;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .appointment-treatment i {
            color: #f59e0b;
        }

        .doctor-stats-section {
            margin-bottom: 30px;
        }

        .doctor-stats-chart {
            margin-top: 20px;
            height: 350px;
            position: relative;
        }

        #doctorSummaryTable table {
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            border-radius: 8px;
            overflow: hidden;
        }

        #doctorSummaryTable th {
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 0.5px;
            font-weight: 600;
        }

        #doctorSummaryTable td {
            transition: background 0.2s ease;
        }

        #doctorSummaryTable tr:hover td {
            background: #e3f2fd !important;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 4000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease;
            max-width: 300px;
        }

        .toast.success { background: #10b981; }
        .toast.error { background: #ef4444; }
        .toast.info { background: #3b82f6; }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main {
                margin-left: 0;
            }
            
            .main-content-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .admin-section {
                flex-direction: column;
                gap: 20px;
                text-align: center;
            }
            
            .appointment-summary {
                flex-direction: column;
                gap: 15px;
            }
            
            .right-column {
                order: -1;
            }

            .doctors-grid {
                grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            }

            .notification-dropdown {
                right: 0;
                left: auto;
                width: 320px;
            }

            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .filter-buttons {
                align-self: stretch;
                justify-content: center;
            }

            .chart-container {
                height: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li class="active"><a href="/admin/dashboard"><i class="fas fa-chart-bar"></i> แดชบอร์ด</a></li>
            <li><a href="/admin/schedule"><i class="fas fa-calendar-alt"></i> ตารางเวลา</a></li>
            <li><a href="/admin/appointments"><i class="fas fa-hospital"></i> การนัดหมาย</a></li>
            <li><a href="/admin/dentists"><i class="fas fa-user-md"></i> ทันตแพทย์</a></li>
            <li><a href="/admin/patients"><i class="fas fa-users"></i> ผู้ป่วย</a></li>
            <li><a href="/admin/treatments"><i class="fas fa-tooth"></i> การรักษา</a></li>
        </ul>
    </div>

    <div class="main">
        <div class="top-bar">
            <div>
                <h1 style="margin: 0; font-size: 24px; font-weight: 600; color: #333;">แดชบอร์ดรายงานคลินิก</h1>
            </div>
            <div class="user-section">
                <!-- Notification Bell -->
                <div class="notification-bell-container">
                    <button class="notification-bell-btn" id="notificationBellBtn">
                        <i class="fas fa-bell"></i>
                        <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
                    </button>
                    
                    <div class="notification-dropdown" id="notificationDropdown">
                        <div class="notification-header">
                            <h3>การแจ้งเตือน</h3>
                            <button class="mark-all-read-btn" id="markAllReadBtn">
                                <i class="fas fa-check-double"></i> อ่านทั้งหมด
                            </button>
                        </div>
                        
                        <div class="notification-list" id="notificationList">
                            <div class="notification-loading">
                                <i class="fas fa-spinner fa-spin"></i> กำลังโหลด...
                            </div>
                        </div>
                        
                        <div class="notification-footer">
                            <a href="/admin/notifications" class="view-all-link">
                                ดูทั้งหมด <i class="fas fa-arrow-right"></i>
                            </a>
                        </div>
                    </div>
                </div>
                
                <div class="profile-dropdown">
                    <div class="user-info" onclick="toggleDropdown()">
                        <div class="avatar" id="userAvatar">A</div>
                        <div class="user-details">
                            <strong>สวัสดี แอดมิน</strong>
                            <small>ผู้ดูแลระบบ</small>
                        </div>
                        <i class="fas fa-caret-down"></i>
                    </div>
                    <div class="dropdown-menu" id="profileDropdown">
                        <a href="/admin/profile"><i class="fas fa-user"></i> โปรไฟล์ของฉัน</a>
                        <hr />
                        <a href="/logout"><i class="fas fa-sign-out-alt"></i> ออกจากระบบ</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="content">

            <!-- Main Content Grid -->
            <div class="main-content-grid">
                <!-- Left Column - Main Content -->
                <div class="left-column">
                    <!-- Admin Greeting and Total Patients -->
                    <div class="admin-section">
                        <div class="admin-greeting">
                            <h2>สวัสดี แอดมิน</h2>
                            <p id="currentDateTime"><%= new Date().toLocaleDateString('th-TH', { 
                                day: '2-digit', 
                                month: '2-digit', 
                                year: 'numeric' 
                            }) %> <%= new Date().toLocaleTimeString('th-TH', { 
                                hour: '2-digit', 
                                minute: '2-digit',
                                hour12: false 
                            }) %></p>
                        </div>
                        <div class="total-patients-card" onclick="window.location.href='/admin/patients'">
                            <div class="patient-number" id="totalPatientsDisplay"><%= dashboardData.totalPatients %></div>
                            <div class="patient-label">ผู้ป่วยทั้งหมด</div>
                            <div class="patient-icon">
                                <i class="fas fa-user-injured"></i>
                            </div>
                        </div>
                    </div>

                    <!-- Appointment Report Section -->
                    <div class="appointment-report-section">
                        <div class="section-header">
                            <h3 class="section-title">รายงานการนัดหมาย:</h3>
                            <div class="filter-buttons">
                                <button class="filter-btn" data-period="day">วัน</button>
                                <button class="filter-btn" data-period="week">สัปดาห์</button>
                                <button class="filter-btn active" data-period="month">เดือน</button>
                                <button class="refresh-btn" onclick="refreshDashboardData()" title="รีเฟรชข้อมูล">
                                    <i class="fas fa-sync-alt"></i>
                                </button>
                            </div>
                            <button class="add-appointment-btn" onclick="addNewAppointment()">+ เพิ่มนัดหมาย</button>
                        </div>
                        <div class="appointment-summary">
                            <div class="summary-card confirmed" onclick="showAppointmentDetails('confirmed')">
                                <div class="summary-number" id="confirmedCount"><%= dashboardData.appointmentSummary.confirmed %></div>
                                <div class="summary-label">ยืนยันแล้ว</div>
                            </div>
                            <div class="summary-card pending" onclick="showAppointmentDetails('pending')">
                                <div class="summary-number" id="pendingCount"><%= dashboardData.appointmentSummary.pending %></div>
                                <div class="summary-label">รอยืนยัน</div>
                            </div>
                            <div class="summary-card cancelled" onclick="showAppointmentDetails('cancelled')">
                                <div class="summary-number" id="cancelledCount"><%= dashboardData.appointmentSummary.cancelled %></div>
                                <div class="summary-label">ยกเลิกแล้ว</div>
                            </div>
                            <div class="summary-card completed" onclick="showAppointmentDetails('completed')">
                                <div class="summary-number" id="completedCount"><%= dashboardData.appointmentSummary.completed || 0 %></div>
                                <div class="summary-label">เสร็จสิ้นแล้ว</div>
                            </div>
                        </div>
                    </div>

                    <!-- Treatments Section -->
                    <div class="treatments-section">
                        <div class="section-header">
                            <h3 class="section-title">การรักษา:</h3>
                            <div class="filter-buttons">
                                <button class="filter-btn" data-period="day">วัน</button>
                                <button class="filter-btn" data-period="week">สัปดาห์</button>
                                <button class="filter-btn active" data-period="month">เดือน</button>
                            </div>
                        </div>
                        <div class="chart-container">
                            <h4 class="chart-title">สถิติการรักษา สำหรับ <%= dashboardData.currentMonth %></h4>
                            <canvas id="treatmentChart"></canvas>
                        </div>
                    </div>

                    <!-- Patient Statistics per Doctor Section -->
                    <div class="doctor-stats-section">
                        <div class="section-header">
                            <h3 class="section-title">สถิติผู้ป่วยต่อทันตแพทย์:</h3>
                            <div class="filter-buttons">
                                <button class="filter-btn" data-period="day">วัน</button>
                                <button class="filter-btn" data-period="week">สัปดาห์</button>
                                <button class="filter-btn active" data-period="month">เดือน</button>
                            </div>
                        </div>
                        <div class="chart-container">
                            <h4 class="chart-title">สถิติทันตแพทย์ สำหรับ <%= dashboardData.currentMonth %></h4>
                            <canvas id="doctorStatsChart"></canvas>
                        </div>
                    </div>

                    <!-- Monthly Statistics Summary -->
                    <div class="monthly-stats-section">
                        <div class="section-header">
                            <h3 class="section-title">สรุปสถิติรายเดือน:</h3>
                        </div>
                        <div class="stats-summary-grid">
                            <div class="stat-summary-card">
                                <div class="stat-summary-number"><%= dashboardData.appointmentSummary.total || 0 %></div>
                                <div class="stat-summary-label">นัดหมายทั้งหมดเดือนนี้</div>
                            </div>
                            <div class="stat-summary-card">
                                <div class="stat-summary-number"><%= dashboardData.appointmentSummary.confirmed || 0 %></div>
                                <div class="stat-summary-label">นัดหมายที่ยืนยันแล้ว</div>
                            </div>
                            <div class="stat-summary-card">
                                <div class="stat-summary-number"><%= dashboardData.appointmentSummary.pending || 0 %></div>
                                <div class="stat-summary-label">นัดหมายรอยืนยัน</div>
                            </div>
                            <div class="stat-summary-card">
                                <div class="stat-summary-number"><%= dashboardData.doctorStats ? dashboardData.doctorStats.length : 0 %></div>
                                <div class="stat-summary-label">ทันตแพทย์ที่ทำงาน</div>
                            </div>
                            <div class="stat-summary-card">
                                <div class="stat-summary-number"><%= dashboardData.appointmentSummary.completionRate || 0 %>%</div>
                                <div class="stat-summary-label">อัตราการเสร็จสิ้น</div>
                            </div>
                        </div>
                        <% if (dashboardData.monthlyTrends && dashboardData.monthlyTrends.length > 0) { %>
                        <div class="trends-info">
                            <h4>แนวโน้มนัดหมายรายวัน:</h4>
                            <div class="trends-list">
                                <% dashboardData.monthlyTrends.slice(0, 7).forEach(trend => { %>
                                <div class="trend-item">
                                    <span class="trend-date"><%= new Date(trend.appointment_date).toLocaleDateString('th-TH', { day: '2-digit', month: 'short' }) %></span>
                                    <span class="trend-count"><%= trend.daily_count %> นัดหมาย</span>
                                </div>
                                <% }); %>
                            </div>
                        </div>
                        <% } %>
                    </div>

                </div>

                <!-- Right Column - Sidebar -->
                <div class="right-column">
                    <!-- Today's Doctors -->
                    <div class="todays-doctors-section">
                        <h3 class="sidebar-title">ทันตแพทย์วันนี้</h3>
                        <div class="doctors-grid" id="doctorsGrid">
                            <% if (dashboardData.todaysDoctors && dashboardData.todaysDoctors.length > 0) { %>
                                <% dashboardData.todaysDoctors.forEach(doctor => { %>
                                <div class="doctor-card" onclick="window.location.href='/admin/dentists/<%= doctor.dentist_id %>'">
                                    <div class="doctor-avatar">
                                        <% if (doctor.photo && doctor.photo !== 'default-avatar.png') { %>
                                            <img src="/uploads/<%= doctor.photo %>" alt="<%= doctor.fname %>">
                                        <% } else { %>
                                            <div class="avatar-placeholder">
                                                <i class="fas fa-user"></i>
                                            </div>
                                        <% } %>
                                    </div>
                                    <div class="doctor-name">ทพ. <%= doctor.fname %> <%= doctor.lname %></div>
                                </div>
                                <% }); %>
                            <% } else { %>
                                <div class="empty-doctors">
                                    <p>ไม่มีทันตแพทย์ที่ทำงานวันนี้</p>
                                </div>
                            <% } %>
                        </div>
                    </div>

                    <!-- Calendar Section -->
                    <div class="calendar-section">
                        <div class="calendar-header">
                            <h3 class="sidebar-title"><%= dashboardData.currentMonth %></h3>
                            <div class="calendar-nav">
                                <button class="nav-btn" onclick="changeMonth(-1)">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <button class="nav-btn" onclick="changeMonth(1)">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                        <div class="calendar-grid" id="calendarGrid"></div>
                    </div>

                    <!-- Upcoming Appointments -->
                    <div class="upcoming-appointments-section">
                        <h3 class="sidebar-title">การนัดหมายที่จะมาถึง</h3>
                        <div class="appointments-list" id="appointmentsList">
                            <div class="appointment-date-header">
                                <h4>วันนี้, <%= new Date().getDate() %> <%= new Date().toLocaleDateString('th-TH', { month: 'short' }) %></h4>
                            </div>
                            <% if (dashboardData.upcomingAppointments && dashboardData.upcomingAppointments.length > 0) { %>
                                <% dashboardData.upcomingAppointments.forEach(appointment => { %>
                                <div class="appointment-item" onclick="viewAppointmentDetail(<%= appointment.queue_id %>)">
                                    <div class="appointment-time">
                                        <%= new Date(appointment.time).toLocaleTimeString('th-TH', { 
                                            hour: '2-digit', 
                                            minute: '2-digit',
                                            hour12: false 
                                        }) %>
                                    </div>
                                    <div class="appointment-details">
                                        <div class="patient-name"><%= appointment.patient_name %></div>
                                        <div class="treatment-name"><%= appointment.treatment_name %></div>
                                    </div>
                                </div>
                                <% }); %>
                            <% } else { %>
                                <p style="text-align: center; color: #999; padding: 20px;">
                                    ไม่มีการนัดหมายที่จะมาถึง
                                </p>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let treatmentChart;
        let doctorStatsChart;
        let currentDate = new Date();
        let currentPeriod = 'month';

        // ========== NOTIFICATION SYSTEM ==========
        class NotificationManager {
            constructor() {
                this.notifications = [];
                this.unreadCount = 0;
                this.isOpen = false;
                this.pollInterval = 30000; // 30 seconds
                this.init();
            }

            init() {
                this.attachEventListeners();
                this.loadNotifications();
                this.startPolling();
            }

            attachEventListeners() {
                // Toggle dropdown
                document.getElementById('notificationBellBtn')?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.toggleDropdown();
                });

                // Mark all as read
                document.getElementById('markAllReadBtn')?.addEventListener('click', () => {
                    this.markAllAsRead();
                });

                // Close dropdown when clicking outside
                document.addEventListener('click', (e) => {
                    const container = document.querySelector('.notification-bell-container');
                    if (container && !container.contains(e.target)) {
                        this.closeDropdown();
                    }
                });
            }

            async loadNotifications() {
                try {
                    const response = await fetch('/admin/api/notifications?limit=5');
                    const data = await response.json();

                    if (data.success) {
                        this.notifications = data.notifications;
                        this.unreadCount = data.unread;
                        this.updateBadge();
                        this.renderNotifications();
                    }
                } catch (error) {
                    console.error('Error loading notifications:', error);
                }
            }

            async loadUnreadCount() {
                try {
                    const response = await fetch('/admin/api/notifications/unread-count');
                    const data = await response.json();

                    if (data.success) {
                        this.unreadCount = data.unread_count;
                        this.updateBadge();
                    }
                } catch (error) {
                    console.error('Error loading unread count:', error);
                }
            }

            updateBadge() {
                const badge = document.getElementById('notificationBadge');
                if (badge) {
                    if (this.unreadCount > 0) {
                        badge.textContent = this.unreadCount > 99 ? '99+' : this.unreadCount;
                        badge.style.display = 'block';
                    } else {
                        badge.style.display = 'none';
                    }
                }
            }

            renderNotifications() {
                const list = document.getElementById('notificationList');
                if (!list) return;

                if (this.notifications.length === 0) {
                    list.innerHTML = `
                        <div class="notification-empty">
                            <i class="fas fa-bell-slash"></i>
                            <p>ไม่มีการแจ้งเตือน</p>
                        </div>
                    `;
                    return;
                }

                list.innerHTML = this.notifications.map(notif => this.createNotificationHTML(notif)).join('');

                // Add click events
                list.querySelectorAll('.notification-item').forEach((item, index) => {
                    item.addEventListener('click', () => {
                        this.handleNotificationClick(this.notifications[index]);
                    });
                });
            }

            createNotificationHTML(notif) {
                const icon = this.getNotificationIcon(notif.type);
                const unreadClass = notif.is_read ? '' : 'unread';

                return `
                    <div class="notification-item ${unreadClass}" data-id="${notif.id}">
                        <span class="notification-icon-emoji">${icon}</span>
                        <div class="notification-content">
                            <div class="notification-title">${notif.title}</div>
                            <div class="notification-message">${notif.message}</div>
                            <div class="notification-time">${notif.time_ago}</div>
                        </div>
                    </div>
                `;
            }

            getNotificationIcon(type) {
                const icons = {
                    'new_appointment': '🆕',
                    'appointment_confirmed': '✅',
                    'appointment_cancelled': '❌',
                    'appointment_reminder': '⏰',
                    'treatment_completed': '📝',
                    'patient_update': '👤',
                    'system': '⚙️',
                    'default': '🔔'
                };

                return icons[type] || icons.default;
            }

            async handleNotificationClick(notif) {
                // Mark as read
                if (!notif.is_read) {
                    await this.markAsRead(notif.id);
                }

                // Navigate to related page
                if (notif.appointment_id) {
                    window.location.href = `/admin/appointments?highlight=${notif.appointment_id}`;
                } else if (notif.patient_id) {
                    window.location.href = `/admin/patients/${notif.patient_id}`;
                } else if (notif.dentist_id) {
                    window.location.href = `/admin/dentists/${notif.dentist_id}`;
                }
            }

            async markAsRead(notifId) {
                try {
                    const response = await fetch(`/admin/api/notifications/${notifId}/read`, {
                        method: 'PUT'
                    });

                    const data = await response.json();
                    if (data.success) {
                        this.loadNotifications();
                    }
                } catch (error) {
                    console.error('Error marking notification as read:', error);
                }
            }

            async markAllAsRead() {
                try {
                    const response = await fetch('/admin/api/notifications/mark-all-read', {
                        method: 'PUT'
                    });

                    const data = await response.json();
                    if (data.success) {
                        showToast('อ่านการแจ้งเตือนทั้งหมดแล้ว', 'success');
                        this.loadNotifications();
                    }
                } catch (error) {
                    console.error('Error marking all as read:', error);
                    showToast('เกิดข้อผิดพลาด', 'error');
                }
            }

            toggleDropdown() {
                this.isOpen = !this.isOpen;
                const dropdown = document.getElementById('notificationDropdown');
                
                if (dropdown) {
                    if (this.isOpen) {
                        dropdown.classList.add('show');
                        this.loadNotifications();
                    } else {
                        dropdown.classList.remove('show');
                    }
                }
            }

            closeDropdown() {
                this.isOpen = false;
                const dropdown = document.getElementById('notificationDropdown');
                if (dropdown) {
                    dropdown.classList.remove('show');
                }
            }

            startPolling() {
                // Poll for new notifications every 30 seconds
                setInterval(() => {
                    this.loadUnreadCount();
                }, this.pollInterval);
            }
        }

        // Initialize notification manager
        let notificationManager;

        const thaiMonths = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 
                            'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
        const thaiDays = ['อา', 'จ', 'อ', 'พ', 'พฤ', 'ศ', 'ส'];

        document.addEventListener('DOMContentLoaded', function() {
            updateDateTime();
            initializeCharts();
            generateCalendar();
            setupEventListeners();
            loadUserInfo();
            
            // Initialize notification manager
            notificationManager = new NotificationManager();
            
            // Load initial calendar appointments
            loadCalendarAppointments();
            
            // Debug: Log dashboard data
            console.log('Dashboard Data:', <%- JSON.stringify(dashboardData) %>);
            
            // Set up auto-refresh intervals
            setInterval(updateDateTime, 60000); // Update time every minute
            setInterval(refreshDashboardData, 300000); // Refresh data every 5 minutes
        });

        async function refreshDashboardData() {
            try {
                // Get current active period
                const activeButton = document.querySelector('.filter-btn.active');
                const period = activeButton ? activeButton.dataset.period : 'month';
                
                // Update all statistics
                await updateStats(period);
                
                // Update upcoming appointments
                await refreshUpcomingAppointments();
                
                // Update today's doctors
                await refreshTodaysDoctors();
                
                console.log('Dashboard data refreshed successfully');
            } catch (error) {
                console.error('Error refreshing dashboard data:', error);
            }
        }

        async function refreshUpcomingAppointments() {
            try {
                const response = await fetch('/admin/api/dashboard/appointments?period=week');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.appointments) {
                        updateUpcomingAppointmentsList(data.appointments);
                    }
                }
            } catch (error) {
                console.error('Error refreshing upcoming appointments:', error);
            }
        }

        function updateUpcomingAppointmentsList(appointments) {
            const appointmentsList = document.getElementById('appointmentsList');
            if (!appointmentsList) return;

            // Filter upcoming appointments (next 7 days)
            const today = new Date();
            const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);
            
            const upcomingAppointments = appointments.filter(apt => {
                const aptDate = new Date(apt.time);
                return aptDate >= today && aptDate <= nextWeek && 
                       (apt.queue_status === 'pending' || apt.queue_status === 'confirm');
            }).slice(0, 10); // Limit to 10 appointments

            if (upcomingAppointments.length === 0) {
                appointmentsList.innerHTML = `
                    <div class="appointment-date-header">
                        <h4>วันนี้, ${new Date().getDate()} ${new Date().toLocaleDateString('th-TH', { month: 'short' })}</h4>
                    </div>
                    <p style="text-align: center; color: #999; padding: 20px;">
                        ไม่มีการนัดหมายที่จะมาถึง
                    </p>
                `;
                return;
            }

            let html = `
                <div class="appointment-date-header">
                    <h4>วันนี้, ${new Date().getDate()} ${new Date().toLocaleDateString('th-TH', { month: 'short' })}</h4>
                </div>
            `;

            upcomingAppointments.forEach(appointment => {
                html += `
                    <div class="appointment-item" onclick="viewAppointmentDetail(${appointment.queue_id})">
                        <div class="appointment-time">
                            ${new Date(appointment.time).toLocaleTimeString('th-TH', { 
                                hour: '2-digit', 
                                minute: '2-digit',
                                hour12: false 
                            })}
                        </div>
                        <div class="appointment-details">
                            <div class="patient-name">${appointment.patient_name}</div>
                            <div class="treatment-name">${appointment.treatment_name}</div>
                        </div>
                    </div>
                `;
            });

            appointmentsList.innerHTML = html;
        }

        async function refreshTodaysDoctors() {
            try {
                const response = await fetch('/admin/api/dashboard/appointments?period=today');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.appointments) {
                        // Extract unique doctors from today's appointments
                        const doctorsSet = new Set();
                        data.appointments.forEach(apt => {
                            doctorsSet.add(JSON.stringify({
                                dentist_id: apt.dentist_id,
                                doctor_name: apt.dentist_name,
                                specialty: apt.specialty || 'ทั่วไป'
                            }));
                        });

                        const todaysDoctors = Array.from(doctorsSet).map(doctor => JSON.parse(doctor));
                        updateTodaysDoctorsList(todaysDoctors);
                    }
                }
            } catch (error) {
                console.error('Error refreshing today\'s doctors:', error);
            }
        }

        function updateTodaysDoctorsList(doctors) {
            const doctorsGrid = document.getElementById('doctorsGrid');
            if (!doctorsGrid) return;

            if (doctors.length === 0) {
                doctorsGrid.innerHTML = `
                    <div class="empty-doctors">
                        <p>ไม่มีทันตแพทย์ที่ทำงานวันนี้</p>
                    </div>
                `;
                return;
            }

            let html = '';
            doctors.forEach(doctor => {
                html += `
                    <div class="doctor-card" onclick="window.location.href='/admin/dentists/${doctor.dentist_id}'">
                        <div class="doctor-avatar">
                            <div class="avatar-placeholder">
                                <i class="fas fa-user"></i>
                            </div>
                        </div>
                        <div class="doctor-name">ทพ. ${doctor.doctor_name}</div>
                    </div>
                `;
            });

            doctorsGrid.innerHTML = html;
        }

        function updateDateTime() {
            const now = new Date();
            const thaiYear = now.getFullYear() + 543;
            const day = now.getDate().toString().padStart(2, '0');
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const hours = now.getHours().toString().padStart(2, '0');
            const minutes = now.getMinutes().toString().padStart(2, '0');
            
            const dateTimeElement = document.getElementById('currentDateTime');
            if (dateTimeElement) {
                dateTimeElement.textContent = 
                    `${day}/${month}/${thaiYear} ${hours}:${minutes}`;
            }
        }

        async function loadUserInfo() {
            try {
                const response = await fetch('/admin/api/current-user');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.email) {
                        const firstLetter = data.email.charAt(0).toUpperCase();
                        document.getElementById('userAvatar').textContent = firstLetter;
                    }
                }
            } catch (error) {
                console.error('เกิดข้อผิดพลาดในการโหลดข้อมูลผู้ใช้:', error);
            }
        }

        function initializeCharts() {
            initializeTreatmentChart();
            initializeDoctorStatsChart();
        }

        function initializeTreatmentChart() {
            const ctx = document.getElementById('treatmentChart').getContext('2d');
            const treatmentData = <%- JSON.stringify(dashboardData.treatmentStats || []) %>;
            
            // Use Thai treatment names directly
            // const treatmentNameMap = {
            //     'การตรวจสุขภาพฟัน': 'การตรวจสุขภาพฟัน',
            //     'การฟอกสีฟัน': 'การฟอกสีฟัน',
            //     'การถอนฟัน': 'การถอนฟัน',
            //     'การอุดฟัน': 'การอุดฟัน',
            //     'การทำความสะอาดฟัน': 'การทำความสะอาดฟัน',
            //     'การรักษารากฟัน': 'การรักษารากฟัน',
            //     'การใส่ครอบฟัน': 'การใส่ครอบฟัน',
            //     'การจัดฟัน': 'การจัดฟัน'
            // };
            
            // If no data, show empty chart
            if (!treatmentData || treatmentData.length === 0) {
                treatmentChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: ['ไม่มีข้อมูล'],
                        datasets: [{
                            label: 'จำนวนการรักษา',
                            data: [0],
                            backgroundColor: '#4A90E2',
                            borderRadius: 4,
                            borderSkipped: false,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { display: false } },
                        scales: {
                            y: { beginAtZero: true, grid: { color: '#f1f3f4' } },
                            x: { grid: { display: false } }
                        }
                    }
                });
                return;
            }
            
            treatmentChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: treatmentData.map(item => item.treatment_name),
                    datasets: [{
                        label: 'จำนวนการรักษา',
                        data: treatmentData.map(item => item.count),
                        backgroundColor: '#4A90E2',
                        borderRadius: 4,
                        borderSkipped: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            callbacks: {
                                label: function(context) {
                                    return context.parsed.y + ' treatments';
                                }
                            }
                        }
                    },
                    scales: {
                        y: { 
                            beginAtZero: true, 
                            grid: { color: '#f1f3f4' },
                            ticks: {
                                stepSize: Math.max(1, Math.ceil(Math.max(...treatmentData.map(item => item.count)) / 10))
                            }
                        },
                        x: { grid: { display: false } }
                    }
                }
            });
        }

        function initializeDoctorStatsChart() {
            const ctx = document.getElementById('doctorStatsChart').getContext('2d');
            const doctorData = <%- JSON.stringify(dashboardData.doctorStats || []) %>;
            
            // If no data, show empty chart
            if (!doctorData || doctorData.length === 0) {
                doctorStatsChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: ['ไม่มีข้อมูล'],
                        datasets: [{
                            label: 'จำนวนนัดหมายทั้งหมด',
                            data: [0],
                            backgroundColor: '#4A90E2',
                            borderRadius: 4,
                            borderSkipped: false
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { display: false } },
                        scales: {
                            y: { beginAtZero: true, grid: { color: '#f1f3f4' } },
                            x: { grid: { display: false } }
                        }
                    }
                });
                return;
            }
            
            doctorStatsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: doctorData.map(item => 'ทพ. ' + item.doctor_name),
                    datasets: [{
                        label: 'จำนวนนัดหมายทั้งหมด',
                        data: doctorData.map(item => item.total_appointments),
                        backgroundColor: '#4A90E2',
                        borderRadius: 4,
                        borderSkipped: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            callbacks: {
                                label: function(context) {
                                    const index = context.dataIndex;
                                    const doctor = doctorData[index];
                                    return [
                                        'นัดหมายทั้งหมด: ' + doctor.total_appointments,
                                        'ผู้ป่วยที่ไม่ซ้ำ: ' + doctor.unique_patients,
                                        'เฉลี่ยต่อผู้ป่วย: ' + (doctor.total_appointments / doctor.unique_patients || 0).toFixed(1)
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        y: { 
                            beginAtZero: true, 
                            grid: { color: '#f1f3f4' },
                            ticks: {
                                stepSize: Math.max(1, Math.ceil(Math.max(...doctorData.map(item => item.total_appointments)) / 10))
                            }
                        },
                        x: { 
                            grid: { display: false }
                        }
                    }
                }
            });
        }

        function createDoctorSummaryTable(doctorData) {
            const tableContainer = document.getElementById('doctorSummaryTable');
            if (!tableContainer) return;
            
            let tableHTML = `
                <div style="margin-top: 20px; overflow-x: auto;">
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead>
                            <tr style="background: linear-gradient(135deg, #667eea, #764ba2); color: white;">
                                <th style="padding: 12px; text-align: left; border: 1px solid #ddd;">ทันตแพทย์</th>
                                <th style="padding: 12px; text-align: center; border: 1px solid #ddd;">จำนวนผู้ป่วย</th>
                                <th style="padding: 12px; text-align: center; border: 1px solid #ddd;">จำนวนนัดหมาย</th>
                                <th style="padding: 12px; text-align: center; border: 1px solid #ddd;">เฉลี่ยต่อคน</th>
                                <th style="padding: 12px; text-align: center; border: 1px solid #ddd;">สถานะ</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            doctorData.forEach((doctor, index) => {
                const avgPerPatient = doctor.unique_patients > 0 ? (doctor.total_appointments / doctor.unique_patients).toFixed(1) : 0;
                const bgColor = index % 2 === 0 ? '#f8f9fa' : 'white';
                
                let statusBadge = '', statusText = '';
                if (doctor.total_appointments === 0) {
                    statusBadge = 'background: #6c757d;';
                    statusText = 'ไม่มีนัดหมาย';
                } else if (avgPerPatient >= 2) {
                    statusBadge = 'background: #28a745;';
                    statusText = 'ผู้ป่วยติดตาม';
                } else {
                    statusBadge = 'background: #17a2b8;';
                    statusText = 'ผู้ป่วยใหม่';
                }
                
                tableHTML += `
                    <tr style="background: ${bgColor};">
                        <td style="padding: 12px; border: 1px solid #ddd;">
                            <strong>ทพ. ${doctor.doctor_name}</strong><br>
                            <small style="color: #666;">${doctor.specialty || 'ทั่วไป'}</small>
                        </td>
                        <td style="padding: 12px; text-align: center; border: 1px solid #ddd; font-size: 18px; font-weight: bold; color: #4A90E2;">${doctor.unique_patients}</td>
                        <td style="padding: 12px; text-align: center; border: 1px solid #ddd; font-size: 18px; font-weight: bold; color: #50C878;">${doctor.total_appointments}</td>
                        <td style="padding: 12px; text-align: center; border: 1px solid #ddd; font-size: 16px; font-weight: bold;">${avgPerPatient} ครั้ง</td>
                        <td style="padding: 12px; text-align: center; border: 1px solid #ddd;">
                            <span style="${statusBadge} color: white; padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: bold;">${statusText}</span>
                        </td>
                    </tr>
                `;
            });
            
            tableHTML += `
                        </tbody>
                    </table>
                </div>
                <div style="margin-top: 15px; padding: 15px; background: #e3f2fd; border-radius: 8px; border-left: 4px solid #2196f3;">
                    <strong style="color: #1976d2;">💡 คำอธิบาย:</strong>
                    <ul style="margin: 10px 0; padding-left: 20px; color: #555;">
                        <li><strong>จำนวนผู้ป่วย</strong> = คนที่มารักษา (นับแต่ละคนครั้งเดียว)</li>
                        <li><strong>จำนวนนัดหมาย</strong> = จำนวนครั้งทั้งหมดที่มีการนัดหมาย</li>
                        <li><strong>เฉลี่ยต่อคน</strong> = ผู้ป่วยแต่ละคนมากี่ครั้งโดยเฉลี่ย</li>
                        <li><strong>ผู้ป่วยติดตาม</strong> = มีผู้ป่วยนัดกลับมารักษาต่อเนื่อง (≥2 ครั้ง)</li>
                        <li><strong>ผู้ป่วยใหม่</strong> = ส่วนใหญ่เป็นผู้ป่วยใหม่ (เฉลี่ย <2 ครั้ง)</li>
                    </ul>
                </div>
            `;
            
            tableContainer.innerHTML = tableHTML;
        }

        function setupEventListeners() {
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const section = this.closest('.appointment-report-section, .treatments-section, .doctor-stats-section');
                    if (section) {
                        section.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        const period = this.dataset.period;
                        updateStats(period);
                    }
                });
            });
        }

        async function updateStats(period) {
            try {
                // Update appointment statistics
                const appointmentResponse = await fetch(`/admin/api/dashboard/appointments?period=${period}`);
                if (appointmentResponse.ok) {
                    const appointmentData = await appointmentResponse.json();
                    if (appointmentData.success) {
                        updateAppointmentDisplay(appointmentData.appointments);
                    }
                }

                // Update treatment statistics
                const treatmentResponse = await fetch(`/admin/api/dashboard/treatments?period=${period}`);
                if (treatmentResponse.ok) {
                    const treatmentData = await treatmentResponse.json();
                    if (treatmentData.success) {
                        updateTreatmentChart(treatmentData.treatments);
                    }
                }

                // Update doctor statistics
                await updateDoctorStats(period);

                // Update dashboard summary
                await updateDashboardSummary();

                showToast(`อัพเดทสถิติสำหรับ${period === 'day' ? 'วัน' : period === 'week' ? 'สัปดาห์' : 'เดือน'}แล้ว`, 'success');
            } catch (error) {
                console.error('เกิดข้อผิดพลาดในการอัพเดทสถิติ:', error);
                showToast('ไม่สามารถอัพเดทสถิติได้', 'error');
            }
        }

        function updateAppointmentDisplay(appointments) {
            const confirmed = appointments.filter(apt => apt.queue_status === 'confirm').length;
            const pending = appointments.filter(apt => apt.queue_status === 'pending').length;
            const cancelled = appointments.filter(apt => apt.queue_status === 'cancel').length;

            document.getElementById('confirmedCount').textContent = confirmed;
            document.getElementById('pendingCount').textContent = pending;
            document.getElementById('cancelledCount').textContent = cancelled;
        }

        function updateTreatmentChart(treatments) {
            if (treatmentChart) {
                treatmentChart.data.labels = treatments.map(item => item.treatment_name);
                treatmentChart.data.datasets[0].data = treatments.map(item => item.count);
                treatmentChart.update();
            }
        }

        async function updateDoctorStats(period) {
            try {
                // Fetch updated doctor statistics
                const response = await fetch(`/admin/api/dashboard/appointments?period=${period}`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.appointments) {
                        // Group appointments by doctor
                        const doctorStats = {};
                        data.appointments.forEach(apt => {
                            const doctorId = apt.dentist_id;
                            if (!doctorStats[doctorId]) {
                                doctorStats[doctorId] = {
                                    doctor_name: apt.dentist_name,
                                    total_appointments: 0,
                                    unique_patients: new Set()
                                };
                            }
                            doctorStats[doctorId].total_appointments++;
                            doctorStats[doctorId].unique_patients.add(apt.patient_id);
                        });

                        // Convert to array format
                        const doctorArray = Object.values(doctorStats).map(doctor => ({
                            ...doctor,
                            unique_patients: doctor.unique_patients.size
                        }));

                        // Update doctor chart
                        if (doctorStatsChart) {
                            doctorStatsChart.data.labels = doctorArray.map(doctor => 'ทพ. ' + doctor.doctor_name);
                            doctorStatsChart.data.datasets[0].data = doctorArray.map(doctor => doctor.total_appointments);
                            doctorStatsChart.update();
                        }

                        // Update doctor table
                        createDoctorSummaryTable(doctorArray);
                    }
                }
            } catch (error) {
                console.error('Error updating doctor stats:', error);
            }
        }

        async function updateDashboardSummary() {
            try {
                const response = await fetch('/admin/api/dashboard/summary');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        // Update total patients
                        const totalPatientsElement = document.getElementById('totalPatientsDisplay');
                        if (totalPatientsElement) {
                            totalPatientsElement.textContent = data.summary.totalPatients;
                        }

                        // Update today's appointments
                        const todayAppointments = data.summary.todayAppointments;
                        const pendingAppointments = data.summary.pendingAppointments;
                        
                        // You can add more summary updates here as needed
                    }
                }
            } catch (error) {
                console.error('Error updating dashboard summary:', error);
            }
        }

        function addNewAppointment() {
            window.location.href = '/admin/appointments/add';
        }

        function showAppointmentDetails(status) {
            window.location.href = `/admin/appointments?status=${status}`;
        }

        function viewAppointmentDetail(appointmentId) {
            if (!appointmentId) {
                showToast('ไม่พบรหัสการนัดหมาย', 'error');
                return;
            }
            window.location.href = `/admin/appointments?highlight=${appointmentId}`;
        }

        function generateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            const thaiYear = year + 543;
            
            const calendarMonthYearElement = document.getElementById('calendarMonthYear');
            if (calendarMonthYearElement) {
                calendarMonthYearElement.textContent = `${thaiMonths[month]} ${thaiYear}`;
            }
            
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();
            
            const calendarGrid = document.getElementById('calendarGrid');
            if (!calendarGrid) return;
            
            calendarGrid.innerHTML = '';
            
            thaiDays.forEach(day => {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day header';
                dayElement.textContent = day;
                calendarGrid.appendChild(dayElement);
            });
            
            for (let i = 0; i < startingDayOfWeek; i++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day other-month';
                calendarGrid.appendChild(dayElement);
            }
            
            const today = new Date();
            for (let day = 1; day <= daysInMonth; day++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                dayElement.textContent = day;
                
                if (year === today.getFullYear() && month === today.getMonth() && day === today.getDate()) {
                    dayElement.classList.add('today');
                }
                
                calendarGrid.appendChild(dayElement);
            }
        }

        function changeMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            generateCalendar();
            
            // Update calendar title
            const calendarTitle = document.querySelector('.calendar-header h3');
            if (calendarTitle) {
                calendarTitle.textContent = currentDate.toLocaleDateString('th-TH', { 
                    month: 'long', 
                    year: 'numeric' 
                });
            }
            
            // Load appointments for the new month
            loadCalendarAppointments();
        }

        async function loadCalendarAppointments() {
            try {
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth() + 1;
                const response = await fetch(`/admin/api/dashboard/appointments?period=month&year=${year}&month=${month}`);
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.appointments) {
                        updateCalendarWithAppointments(data.appointments);
                    }
                }
            } catch (error) {
                console.error('Error loading calendar appointments:', error);
            }
        }

        function updateCalendarWithAppointments(appointments) {
            // Clear existing appointment indicators
            document.querySelectorAll('.calendar-day').forEach(day => {
                day.classList.remove('has-appointments');
                day.removeAttribute('title');
            });

            // Add appointment indicators to calendar days
            appointments.forEach(appointment => {
                const appointmentDate = new Date(appointment.time);
                const dayElement = document.querySelector(`[data-date="${appointmentDate.getDate()}"]`);
                if (dayElement) {
                    dayElement.classList.add('has-appointments');
                    dayElement.title = `${appointment.patient_name} - ${appointment.treatment_name}`;
                }
            });
        }

        function showToast(message, type = 'info') {
            // Remove existing toasts
            document.querySelectorAll('.toast').forEach(toast => toast.remove());
            
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <i class="fas ${getToastIcon(type)}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            // Add toast styles if not already present
            if (!document.querySelector('#toast-styles')) {
                const style = document.createElement('style');
                style.id = 'toast-styles';
                style.textContent = `
                    .toast {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        padding: 12px 20px;
                        border-radius: 8px;
                        color: white;
                        font-weight: 500;
                        z-index: 10000;
                        transform: translateX(100%);
                        transition: all 0.3s ease;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                        max-width: 400px;
                    }
                    .toast.show {
                        transform: translateX(0);
                    }
                    .toast.success { background: #28a745; }
                    .toast.error { background: #dc3545; }
                    .toast.info { background: #17a2b8; }
                    .toast.warning { background: #ffc107; color: #333; }
                    .toast-content {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                    }
                    .toast-content i {
                        font-size: 16px;
                    }
                `;
                document.head.appendChild(style);
            }
            
            document.body.appendChild(toast);
            
            // Show toast with animation
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Hide and remove toast
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 4000);
        }

        function getToastIcon(type) {
            const icons = {
                success: 'fa-check-circle',
                error: 'fa-exclamation-circle',
                warning: 'fa-exclamation-triangle',
                info: 'fa-info-circle'
            };
            return icons[type] || icons.info;
        }

        function toggleDropdown() {
            const menu = document.getElementById('profileDropdown');
            menu.classList.toggle('show');
        }

        document.addEventListener('click', function(event) {
            const profileDropdown = document.querySelector('.profile-dropdown');
            if (profileDropdown && !profileDropdown.contains(event.target)) {
                document.getElementById('profileDropdown').classList.remove('show');
            }
        });

        window.addEventListener('online', () => showToast('เชื่อมต่ออินเทอร์เน็ตแล้ว', 'success'));
        window.addEventListener('offline', () => showToast('ขาดการเชื่อมต่ออินเทอร์เน็ต', 'error'));
    </script>
</body>
</html>