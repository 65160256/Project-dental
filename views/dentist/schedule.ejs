<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ตารางงาน - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        body {
            background: #f5f7fa;
            color: #333;
        }

        /* Sidebar */
        .sidebar {
            width: 180px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            position: fixed;
            height: 100vh;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 100;
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
            color: #4A90E2;
        }

        .sidebar .logo h3 {
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
        }

        .sidebar ul li a {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s;
            font-size: 14px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        /* Main Content */
        .main {
            margin-left: 180px;
        }

        /* Top Bar */
        .top-bar {
            background: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            position: sticky;
            top: 0;
            z-index: 50;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            font-weight: 500;
        }

        /* Calendar Container */
        .calendar-container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }

        .calendar-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 2px 12px rgba(0,0,0,0.08);
            padding: 30px;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .calendar-title {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .month-year {
            font-size: 24px;
            font-weight: 600;
            color: #333;
        }

        .nav-btn {
            width: 36px;
            height: 36px;
            border: none;
            background: #f0f2f5;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            color: #666;
        }

        .nav-btn:hover {
            background: #e4e6eb;
            color: #4A90E2;
        }

        .bulk-schedule-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
        }

        .bulk-schedule-btn:hover {
            background: #218838;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
        }

        /* Calendar Grid */
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background: #e0e0e0;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            overflow: hidden;
        }

        .calendar-day-header {
            background: #f8f9fa;
            padding: 12px;
            text-align: center;
            font-weight: 600;
            font-size: 14px;
            color: #666;
        }

        .calendar-day {
            background: white;
            min-height: 100px;
            padding: 10px;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
        }

        .calendar-day:hover:not(.disabled):not(.other-month) {
            background: #f8f9fa;
        }

        .calendar-day.disabled {
            background: #fafafa;
            cursor: not-allowed;
            opacity: 0.5;
        }

        .calendar-day.other-month {
            background: #fafafa;
            color: #ccc;
        }

        .calendar-day.today {
            background: #e3f2fd;
        }

        .day-number {
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }

        .calendar-day.other-month .day-number {
            color: #ccc;
        }

        .day-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #28a745;
            margin-top: 5px;
        }

        .day-indicator.has-appointments {
            background: #ffc107;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 16px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            padding: 20px 24px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            color: #999;
            cursor: pointer;
            padding: 0;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            transition: all 0.2s;
        }

        .modal-close:hover {
            background: #f0f0f0;
            color: #333;
        }

        .modal-body {
            padding: 24px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: #333;
            margin-bottom: 8px;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .form-control:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .radio-group {
            display: flex;
            gap: 20px;
            margin-top: 8px;
        }

        .radio-item {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
        }

        .radio-item input[type="radio"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
        }

        .time-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        textarea.form-control {
            min-height: 80px;
            resize: vertical;
        }

        .modal-footer {
            padding: 16px 24px;
            border-top: 1px solid #e0e0e0;
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-primary {
            background: #28a745;
            color: white;
        }

        .btn-primary:hover {
            background: #218838;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        /* Date Range Picker */
        .date-range-display {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .date-range-display input {
            flex: 1;
            border: none;
            background: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 14px;
        }

        /* Toast Notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            padding: 16px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            z-index: 10000;
            display: flex;
            align-items: center;
            gap: 12px;
            animation: slideIn 0.3s ease;
        }

        .toast.success {
            border-left: 4px solid #28a745;
        }

        .toast.error {
            border-left: 4px solid #dc3545;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }

            .main {
                margin-left: 0;
            }

            .calendar-day {
                min-height: 80px;
                padding: 8px;
            }

            .time-inputs {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/dentist/dashboard"><i class="fas fa-chart-bar"></i> Dashboard</a></li>
            <li class="active"><a href="/dentist/schedule"><i class="fas fa-calendar-alt"></i> ตารางงาน</a></li>
            <li><a href="/dentist/appointments"><i class="fas fa-hospital"></i> นัดหมาย</a></li>
            <li><a href="/dentist/patients"><i class="fas fa-users"></i> ผู้ป่วย</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main">
        <!-- Top Bar -->
        <div class="top-bar">
            <h2 style="font-size: 20px; font-weight: 600; color: #333;">ตารางงาน</h2>
            <div class="user-section">
                <div class="avatar">
                    <% if (dentist && dentist.photo && dentist.photo !== 'default-avatar.png') { %>
                        <img src="/uploads/<%= dentist.photo %>" alt="Profile" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">
                    <% } else { %>
                        <%= (dentist && dentist.fname) ? dentist.fname.charAt(0).toUpperCase() : 'D' %>
                    <% } %>
                </div>
                <span style="font-size: 14px; font-weight: 500;">Dr. <%= dentist ? dentist.fname + ' ' + dentist.lname : 'Doctor' %></span>
            </div>
        </div>

        <!-- Calendar Container -->
        <div class="calendar-container">
            <div class="calendar-card">
                <div class="calendar-header">
                    <div class="calendar-title">
                        <button class="nav-btn" onclick="changeMonth(-1)">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <span class="month-year" id="monthYear">เมษายน 2025</span>
                        <button class="nav-btn" onclick="changeMonth(1)">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                    <button class="bulk-schedule-btn" onclick="openBulkScheduleModal()">
                        <i class="fas fa-calendar-plus"></i>
                        เปิดใช้งานทั้งหมด
                    </button>
                </div>

                <div class="calendar-grid" id="calendarGrid">
                    <!-- Calendar will be generated here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Single Day Schedule Modal -->
    <div class="modal" id="scheduleModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">ตั้งค่าตารางงาน</h3>
                <button class="modal-close" onclick="closeModal('scheduleModal')">&times;</button>
            </div>
            <form id="scheduleForm">
                <div class="modal-body">
                    <input type="hidden" id="selectedDate" name="date">
                    <input type="hidden" id="selectedDay" name="day">

                    <div class="form-group">
                        <label class="form-label">สถานะ:</label>
                        <div class="radio-group">
                            <label class="radio-item">
                                <input type="radio" name="status" value="working" checked onchange="toggleTimeInputs()">
                                <span>Working</span>
                            </label>
                            <label class="radio-item">
                                <input type="radio" name="status" value="dayoff" onchange="toggleTimeInputs()">
                                <span>Day Off</span>
                            </label>
                        </div>
                    </div>

                    <div class="form-group" id="dateDisplay">
                        <label class="form-label">วันที่:</label>
                        <div class="date-range-display">
                            <input type="text" id="displayDate" readonly>
                        </div>
                    </div>

                    <div id="timeInputsContainer">
                        <div class="time-inputs">
                            <div class="form-group">
                                <label class="form-label">เวลาเริ่มต้น:</label>
                                <input type="time" class="form-control" id="startTime" name="startTime" value="10:00">
                            </div>
                            <div class="form-group">
                                <label class="form-label">เวลาสิ้นสุด:</label>
                                <input type="time" class="form-control" id="endTime" name="endTime" value="20:00">
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">หมายเหตุ (ถ้ามี):</label>
                        <textarea class="form-control" id="note" name="note" placeholder="ใส่หมายเหตุเพิ่มเติม..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="saveSchedule()">
                        <i class="fas fa-check"></i> Confirm
                    </button>
                    <button type="button" class="btn btn-danger" id="deleteBtn" style="display: none;" onclick="deleteSchedule()">
                        <i class="fas fa-trash"></i> ลบ
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal('scheduleModal')">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Bulk Schedule Modal -->
    <div class="modal" id="bulkScheduleModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">ตั้งค่าตารางงานหลายวัน</h3>
                <button class="modal-close" onclick="closeModal('bulkScheduleModal')">&times;</button>
            </div>
            <form id="bulkScheduleForm">
                <div class="modal-body">
                    <div class="form-group">
                        <label class="form-label">ช่วงวันที่:</label>
                        <div class="date-range-display">
                            <input type="date" class="form-control" id="bulkStartDate" required>
                            <span>-</span>
                            <input type="date" class="form-control" id="bulkEndDate" required>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">สถานะ:</label>
                        <div class="radio-group">
                            <label class="radio-item">
                                <input type="radio" name="bulkStatus" value="working" checked onchange="toggleBulkTimeInputs()">
                                <span>Working</span>
                            </label>
                            <label class="radio-item">
                                <input type="radio" name="bulkStatus" value="dayoff" onchange="toggleBulkTimeInputs()">
                                <span>Day Off</span>
                            </label>
                        </div>
                    </div>

                    <div id="bulkTimeInputsContainer">
                        <div class="time-inputs">
                            <div class="form-group">
                                <label class="form-label">เวลาเริ่มต้น:</label>
                                <input type="time" class="form-control" id="bulkStartTime" value="10:00">
                            </div>
                            <div class="form-group">
                                <label class="form-label">เวลาสิ้นสุด:</label>
                                <input type="time" class="form-control" id="bulkEndTime" value="20:00">
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">หมายเหตุ (ถ้ามี):</label>
                        <textarea class="form-control" id="bulkNote" placeholder="ใส่หมายเหตุเพิ่มเติม..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="saveBulkSchedule()">
                        <i class="fas fa-check"></i> Confirm
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal('bulkScheduleModal')">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let currentDate = new Date();
        let scheduleData = {};
        let selectedDateForSchedule = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            renderCalendar();
            loadScheduleData();
        });

        // Render Calendar
        function renderCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            // Update month/year display
            const monthNames = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
                               'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
            document.getElementById('monthYear').textContent = `${monthNames[month]} ${year + 543}`;

            // Get first day of month and number of days
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();

            // Get previous month's last days
            const prevMonthLastDay = new Date(year, month, 0).getDate();

            const grid = document.getElementById('calendarGrid');
            grid.innerHTML = '';

            // Day headers
            const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            dayHeaders.forEach(day => {
                const header = document.createElement('div');
                header.className = 'calendar-day-header';
                header.textContent = day;
                grid.appendChild(header);
            });

            // Previous month days
            for (let i = startingDayOfWeek - 1; i >= 0; i--) {
                const dayCell = createDayCell(prevMonthLastDay - i, true, false);
                grid.appendChild(dayCell);
            }

            // Current month days
            for (let day = 1; day <= daysInMonth; day++) {
                const isToday = isCurrentDay(year, month, day);
                const dayCell = createDayCell(day, false, isToday);
                grid.appendChild(dayCell);
            }

            // Next month days
            const totalCells = grid.children.length - 7; // Subtract headers
            const remainingCells = 42 - totalCells; // 6 rows * 7 days
            for (let day = 1; day <= remainingCells; day++) {
                const dayCell = createDayCell(day, true, false);
                grid.appendChild(dayCell);
            }
        }

        function createDayCell(day, isOtherMonth, isToday) {
            const cell = document.createElement('div');
            cell.className = 'calendar-day';
            if (isOtherMonth) cell.classList.add('other-month');
            if (isToday) cell.classList.add('today');

            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = day;
            cell.appendChild(dayNumber);

            if (!isOtherMonth) {
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                const dayOfWeek = new Date(year, month, day).getDay();

                // Check if Sunday (closed)
                if (dayOfWeek === 0) {
                    cell.classList.add('disabled');
                } else {
                    // Check if has schedule
                    const hasSchedule = Object.values(scheduleData).some(s => s.date === dateStr);
                    if (hasSchedule) {
                        const indicator = document.createElement('div');
                        indicator.className = 'day-indicator';
                        cell.appendChild(indicator);
                    }

                    cell.onclick = () => openScheduleModal(dateStr, dayOfWeek);
                }
            }

            return cell;
        }

        function isCurrentDay(year, month, day) {
            const today = new Date();
            return today.getFullYear() === year && 
                   today.getMonth() === month && 
                   today.getDate() === day;
        }

        function changeMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            renderCalendar();
            loadScheduleData();
        }

        // Load Schedule Data
        async function loadScheduleData() {
            try {
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                const startDate = new Date(year, month, 1);
                const endDate = new Date(year, month + 1, 0);

                const response = await fetch(`/dentist/api/schedule/load?startDate=${startDate.toISOString().split('T')[0]}&endDate=${endDate.toISOString().split('T')[0]}`);
                const result = await response.json();

                if (result.success) {
                    scheduleData = {};
                    result.schedules.forEach(schedule => {
                        const key = `${schedule.date}-${schedule.hour}`;
                        scheduleData[key] = schedule;
                    });
                    renderCalendar();
                }
            } catch (error) {
                console.error('Error loading schedule:', error);
                showToast('เกิดข้อผิดพลาดในการโหลดข้อมูล', 'error');
            }
        }

        // Open Schedule Modal
        function openScheduleModal(dateStr, dayOfWeek) {
            selectedDateForSchedule = dateStr;
            const modal = document.getElementById('scheduleModal');
            
            document.getElementById('selectedDate').value = dateStr;
            document.getElementById('selectedDay').value = dayOfWeek;
            document.getElementById('displayDate').value = formatDateThai(dateStr);

            // Check existing schedule
            const existingSchedule = Object.values(scheduleData).find(s => s.date === dateStr);
            if (existingSchedule) {
                document.querySelector(`input[name="status"][value="${existingSchedule.status}"]`).checked = true;
                document.getElementById('startTime').value = existingSchedule.startTime;
                document.getElementById('endTime').value = existingSchedule.endTime;
                document.getElementById('note').value = existingSchedule.note || '';
                document.getElementById('deleteBtn').style.display = 'inline-block';
            } else {
                document.querySelector('input[name="status"][value="working"]').checked = true;
                document.getElementById('startTime').value = '10:00';
                document.getElementById('endTime').value = '20:00';
                document.getElementById('note').value = '';
                document.getElementById('deleteBtn').style.display = 'none';
            }

            toggleTimeInputs();
            modal.classList.add('active');
        }

        function openBulkScheduleModal() {
            const modal = document.getElementById('bulkScheduleModal');
            const today = new Date();
            const nextWeek = new Date(today);
            nextWeek.setDate(today.getDate() + 7);

            document.getElementById('bulkStartDate').value = today.toISOString().split('T')[0];
            document.getElementById('bulkEndDate').value = nextWeek.toISOString().split('T')[0];
            document.querySelector('input[name="bulkStatus"][value="working"]').checked = true;
            document.getElementById('bulkStartTime').value = '10:00';
            document.getElementById('bulkEndTime').value = '20:00';
            document.getElementById('bulkNote').value = '';

            toggleBulkTimeInputs();
            modal.classList.add('active');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        function toggleTimeInputs() {
            const status = document.querySelector('input[name="status"]:checked').value;
            const container = document.getElementById('timeInputsContainer');
            container.style.display = status === 'working' ? 'block' : 'none';
        }

        function toggleBulkTimeInputs() {
            const status = document.querySelector('input[name="bulkStatus"]:checked').value;
            const container = document.getElementById('bulkTimeInputsContainer');
            container.style.display = status === 'working' ? 'block' : 'none';
        }

        // Save Schedule
        async function saveSchedule() {
            const date = document.getElementById('selectedDate').value;
            const day = parseInt(document.getElementById('selectedDay').value);
            const status = document.querySelector('input[name="status"]:checked').value;
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            const note = document.getElementById('note').value;

            if (status === 'working' && startTime >= endTime) {
                showToast('เวลาสิ้นสุดต้องมากกว่าเวลาเริ่มต้น', 'error');
                return;
            }

            try {
                const response = await fetch('/dentist/api/schedule/save', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ date, day, status, startTime, endTime, note })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('บันทึกตารางงานเรียบร้อยแล้ว', 'success');
                    closeModal('scheduleModal');
                    await loadScheduleData();
                } else {
                    showToast(result.error, 'error');
                }
            } catch (error) {
                console.error('Error saving schedule:', error);
                showToast('เกิดข้อผิดพลาดในการบันทึก', 'error');
            }
        }

        async function saveBulkSchedule() {
            const startDate = document.getElementById('bulkStartDate').value;
            const endDate = document.getElementById('bulkEndDate').value;
            const status = document.querySelector('input[name="bulkStatus"]:checked').value;
            const startTime = document.getElementById('bulkStartTime').value;
            const endTime = document.getElementById('bulkEndTime').value;
            const note = document.getElementById('bulkNote').value;

            if (!startDate || !endDate) {
                showToast('กรุณาเลือกช่วงวันที่', 'error');
                return;
            }

            if (new Date(startDate) > new Date(endDate)) {
                showToast('วันที่เริ่มต้นต้องไม่มากกว่าวันที่สิ้นสุด', 'error');
                return;
            }

            if (status === 'working' && startTime >= endTime) {
                showToast('เวลาสิ้นสุดต้องมากกว่าเวลาเริ่มต้น', 'error');
                return;
            }

            try {
                // Generate dates in range
                const start = new Date(startDate);
                const end = new Date(endDate);
                const promises = [];

                for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {
                    const dayOfWeek = date.getDay();
                    if (dayOfWeek === 0) continue; // Skip Sundays

                    const dateStr = date.toISOString().split('T')[0];
                    promises.push(
                        fetch('/dentist/api/schedule/save', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                date: dateStr, 
                                day: dayOfWeek, 
                                status, 
                                startTime, 
                                endTime, 
                                note 
                            })
                        })
                    );
                }

                await Promise.all(promises);
                showToast('บันทึกตารางงานทั้งหมดเรียบร้อยแล้ว', 'success');
                closeModal('bulkScheduleModal');
                await loadScheduleData();
            } catch (error) {
                console.error('Error saving bulk schedule:', error);
                showToast('เกิดข้อผิดพลาดในการบันทึก', 'error');
            }
        }

        async function deleteSchedule() {
            if (!confirm('คุณต้องการลบตารางงานนี้หรือไม่?')) return;

            try {
                const date = document.getElementById('selectedDate').value;
                const response = await fetch('/dentist/api/schedule/delete', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ date, hour: 10 })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('ลบตารางงานเรียบร้อยแล้ว', 'success');
                    closeModal('scheduleModal');
                    await loadScheduleData();
                } else {
                    showToast(result.error, 'error');
                }
            } catch (error) {
                console.error('Error deleting schedule:', error);
                showToast('เกิดข้อผิดพลาดในการลบ', 'error');
            }
        }

        // Utility Functions
        function formatDateThai(dateStr) {
            const date = new Date(dateStr);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear() + 543;
            return `${day}/${month}/${year}`;
        }

        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                <span>${message}</span>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
    </script>
</body>
</html>