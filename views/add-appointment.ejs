<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book an Appointment - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            margin: 0;
        }

        /* Sidebar */
        .sidebar {
            width: 180px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            position: fixed;
            height: 100vh;
            padding: 0;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
            color: #4A90E2;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 2px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        /* Main Content */
        .main {
            margin-left: 180px;
            padding: 0;
            min-height: 100vh;
        }

        /* Top Bar */
        .top-bar {
            background: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .page-title {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 24px;
            font-weight: 600;
            color: #333;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .notification-container {
            position: relative;
        }

        .notification-icon {
            width: 20px;
            height: 20px;
            cursor: pointer;
            color: #666;
            transition: color 0.3s ease;
        }

        .notification-icon:hover {
            color: #4A90E2;
        }

        .profile-dropdown {
            position: relative;
        }

        .user-info {
            display: flex;
            align-items: center;
            cursor: pointer;
            gap: 10px;
            transition: all 0.3s ease;
        }

        .user-info:hover {
            transform: translateY(-1px);
        }

        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 8px;
            min-width: 180px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            z-index: 2000;
            margin-top: 8px;
            overflow: hidden;
        }

        .dropdown-menu.show {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .dropdown-menu a {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 15px;
            text-decoration: none;
            color: #333;
            font-size: 13px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .dropdown-menu a:hover {
            background-color: #f8f9fa;
            color: #4A90E2;
        }

        .dropdown-menu hr {
            margin: 5px 0;
            border: none;
            border-top: 1px solid #e1e5e9;
        }

        .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .user-details strong {
            display: block;
            font-size: 13px;
            color: #333;
        }

        .user-details small {
            color: #666;
            font-size: 11px;
        }

        /* Content */
        .content {
            padding: 30px;
        }

        /* Progress Steps */
        .progress-section {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .progress-steps {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 40px;
        }

        .step {
            display: flex;
            align-items: center;
            color: #6c757d;
            flex-direction: column;
            text-align: center;
            min-width: 120px;
        }

        .step.active {
            color: #4A90E2;
            font-weight: 600;
        }

        .step.completed {
            color: #10b981;
        }

        .step-number {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 12px;
            font-size: 18px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .step.active .step-number {
            background: #4A90E2;
            color: white;
            transform: scale(1.1);
        }

        .step.completed .step-number {
            background: #10b981;
            color: white;
        }

        .step-label {
            font-size: 14px;
            font-weight: 500;
        }

        .step-connector {
            flex: 1;
            height: 2px;
            background: #e9ecef;
            max-width: 100px;
        }

        .step.completed + .step-connector {
            background: #10b981;
        }

        /* Content Sections */
        .step-content {
            display: none;
        }

        .step-content.active {
            display: block;
            animation: fadeIn 0.4s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Form Styles */
        .form-section {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .section-title {
            font-size: 20px;
            font-weight: 600;
            color: #333;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        .form-control {
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .form-control:focus {
            outline: none;
            border-color: #4A90E2;
            background: white;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .form-control:disabled {
            background: #f1f3f4;
            color: #666;
        }

        /* Calendar Styles */
        .calendar-section {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .calendar-title {
            font-size: 24px;
            font-weight: 600;
            color: #333;
        }

        .calendar-nav {
            background: none;
            border: none;
            color: #4A90E2;
            font-size: 18px;
            cursor: pointer;
            padding: 10px 15px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .calendar-nav:hover {
            background: rgba(74, 144, 226, 0.1);
            transform: scale(1.05);
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
            background: #f1f3f4;
            border-radius: 12px;
            overflow: hidden;
        }

        .calendar-weekdays {
            display: contents;
        }

        .weekday {
            padding: 15px;
            text-align: center;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            font-weight: 600;
            font-size: 14px;
        }

        .calendar-day {
            background: white;
            min-height: 100px;
            padding: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            border: 2px solid transparent;
        }

        .calendar-day:hover {
            background: #f8f9fa;
            border-color: #4A90E2;
            transform: translateY(-2px);
        }

        .calendar-day.selected {
            background: rgba(74, 144, 226, 0.1);
            border-color: #4A90E2;
            transform: translateY(-2px);
        }

        .calendar-day.other-month {
            background: #f8f9fa;
            color: #999;
        }

        .calendar-day.today {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            border-color: #fdcb6e;
        }

        .calendar-day.past {
            background: #f8f9fa;
            color: #999;
            cursor: not-allowed;
            opacity: 0.5;
        }

        .calendar-day.past:hover {
            background: #f8f9fa;
            border-color: #e9ecef;
            transform: none;
        }

        .day-number {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 8px;
            color: #333;
        }

        .calendar-day.other-month .day-number,
        .calendar-day.past .day-number {
            color: #999;
        }

        .day-doctors {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .doctor-item {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 4px;
            border-radius: 4px;
            background: rgba(74, 144, 226, 0.1);
            font-size: 11px;
            transition: all 0.3s ease;
        }

        .doctor-item:hover {
            background: rgba(74, 144, 226, 0.2);
            transform: scale(1.02);
        }

        .doctor-mini-avatar {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 9px;
        }

        .doctor-name-mini {
            flex: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            font-weight: 500;
        }

        .doctor-status {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #10b981;
        }

        .doctor-status.busy {
            background: #ef4444;
        }

        /* Available Doctors */
        .doctors-section {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .doctors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .doctor-card {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .doctor-card:hover {
            border-color: #4A90E2;
            background: white;
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(74, 144, 226, 0.2);
        }

        .doctor-card.selected {
            border-color: #4A90E2;
            background: rgba(74, 144, 226, 0.1);
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(74, 144, 226, 0.3);
        }

        .doctor-card-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .doctor-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 20px;
        }

        .doctor-details h5 {
            margin: 0 0 5px 0;
            color: #333;
            font-size: 16px;
            font-weight: 600;
        }

        .doctor-details p {
            margin: 0;
            color: #666;
            font-size: 14px;
        }

        .doctor-treatments {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
            margin-bottom: 15px;
        }

        .treatment-tag {
            background: rgba(74, 144, 226, 0.1);
            color: #4A90E2;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .doctor-availability {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .time-slot {
            display: inline-block;
            background: #e8f5e8;
            color: #2e7d32;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 500;
        }

        .time-slot.busy {
            background: #fce4ec;
            color: #c2185b;
        }

        /* Time Selection */
        .time-section {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .selected-doctor-info {
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .date-selector {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin-bottom: 25px;
        }

        .date-nav {
            background: none;
            border: none;
            color: #4A90E2;
            font-size: 18px;
            cursor: pointer;
            padding: 10px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .date-nav:hover {
            background: rgba(74, 144, 226, 0.1);
            transform: scale(1.1);
        }

        .selected-date {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            text-align: center;
            min-width: 250px;
        }

        .time-slots-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 12px;
        }

        .time-slot-btn {
            padding: 15px 12px;
            border: 2px solid #e9ecef;
            background: #f8f9fa;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
            font-size: 14px;
            font-weight: 500;
        }

        .time-slot-btn:hover {
            border-color: #4A90E2;
            background: rgba(74, 144, 226, 0.1);
            transform: translateY(-2px);
        }

        .time-slot-btn.available {
            border-color: #10b981;
            background: #d1f2eb;
            color: #0c5a40;
        }

        .time-slot-btn.selected {
            border-color: #4A90E2;
            background: #4A90E2;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(74, 144, 226, 0.3);
        }

        .time-slot-btn.unavailable {
            border-color: #ef4444;
            background: #fee2e2;
            color: #991b1b;
            cursor: not-allowed;
        }

        /* Patient Search */
        .patient-section {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .search-container {
            position: relative;
            margin-bottom: 20px;
        }

        .search-input {
            width: 100%;
            padding: 12px 15px 12px 45px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .search-input:focus {
            outline: none;
            border-color: #4A90E2;
            background: white;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
            font-size: 16px;
        }

        .patient-dropdown {
            max-height: 200px;
            overflow-y: auto;
            border: 2px solid #e9ecef;
            border-top: none;
            border-radius: 0 0 8px 8px;
            background: white;
            position: absolute;
            width: 100%;
            z-index: 10;
            display: none;
        }

        .patient-option {
            padding: 12px 15px;
            cursor: pointer;
            border-bottom: 1px solid #f0f0f0;
            transition: all 0.2s ease;
        }

        .patient-option:hover {
            background: rgba(74, 144, 226, 0.1);
        }

        .patient-option:last-child {
            border-bottom: none;
        }

        .patient-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
        }

        .patient-phone {
            font-size: 12px;
            color: #666;
        }

        .selected-patient-info {
            background: linear-gradient(135deg, #d1f2eb, #a7f3d0);
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
            display: none;
            align-items: center;
            justify-content: space-between;
        }

        .clear-patient-btn {
            background: none;
            border: none;
            color: #ef4444;
            cursor: pointer;
            font-size: 16px;
            padding: 5px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

        .clear-patient-btn:hover {
            background: rgba(239, 68, 68, 0.1);
        }

        /* Confirmation */
        .confirmation-section {
            background: white;
            border-radius: 16px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .booking-id {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 30px;
            font-size: 20px;
            font-weight: 600;
        }

        .booking-details {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 12px;
            margin: 25px 0;
            text-align: left;
        }

        .booking-details h4 {
            margin: 0 0 20px 0;
            color: #333;
            text-align: center;
            font-size: 18px;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #e9ecef;
        }

        .detail-row:last-child {
            border-bottom: none;
        }

        .detail-label {
            color: #666;
            font-weight: 500;
        }

        .detail-value {
            color: #333;
            font-weight: 600;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-confirmed {
            background: #d1f2eb;
            color: #065f46;
        }

        /* Buttons */
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            justify-content: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(74, 144, 226, 0.3);
        }

        .btn-primary:disabled {
            background: #e9ecef;
            color: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 2px solid #e9ecef;
        }

        .btn-secondary:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
        }

        /* Navigation */
        .step-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 25px 0;
            margin-top: 20px;
        }

        /* Loading */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 60px;
            color: #666;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(74, 144, 226, 0.1);
            border-top: 3px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 4000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            min-width: 300px;
            display: none;
            align-items: center;
            gap: 10px;
        }

        .toast.show {
            display: flex;
            animation: slideInRight 0.3s ease;
        }

        .toast.success {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .toast.error {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .toast.info {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
        }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main {
                margin-left: 0;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .doctors-grid {
                grid-template-columns: 1fr;
            }
            
            .time-slots-grid {
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            }
            
            .step-navigation {
                flex-direction: column;
                gap: 15px;
            }
            
            .progress-steps {
                flex-direction: column;
                gap: 20px;
            }
            
            .step-connector {
                display: none;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/admin/dashboard"><i class="fas fa-chart-bar"></i> Dashboard</a></li>
            <li><a href="/admin/schedule"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
            <li class="active"><a href="/admin/appointments"><i class="fas fa-hospital"></i> Appointments</a></li>
            <li><a href="/admin/dentists"><i class="fas fa-user-md"></i> Dentists</a></li>
            <li><a href="/admin/patients"><i class="fas fa-users"></i> Patients</a></li>
            <li><a href="/admin/treatments"><i class="fas fa-tooth"></i> Treatments</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="page-title">
                <i class="fas fa-plus-circle"></i>
                Book New Appointment
            </div>
            <div class="user-section">
                <div class="notification-container">
                    <i class="fas fa-bell notification-icon"></i>
                </div>
                
                <div class="profile-dropdown">
                    <div class="user-info" onclick="toggleDropdown()">
                        <div class="avatar" id="userAvatar">A</div>
                        <div class="user-details">
                            <strong id="userName">Admin</strong>
                            <small>Administrator</small>
                        </div>
                        <i class="fas fa-caret-down"></i>
                    </div>
                    <div class="dropdown-menu" id="profileDropdown">
                        <a href="/admin/profile"><i class="fas fa-user"></i> My Profile</a>
                        <hr />
                        <a href="/logout"><i class="fas fa-sign-out-alt"></i> Log Out</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content -->
        <div class="content">
            <!-- Progress Section -->
            <div class="progress-section">
                <div class="progress-steps">
                    <div class="step active" id="step1">
                        <div class="step-number">1</div>
                        <div class="step-label">Select Date & Doctor</div>
                    </div>
                    <div class="step-connector"></div>
                    <div class="step" id="step2">
                        <div class="step-number">2</div>
                        <div class="step-label">Choose Time & Patient</div>
                    </div>
                    <div class="step-connector"></div>
                    <div class="step" id="step3">
                        <div class="step-number">3</div>
                        <div class="step-label">Confirm Booking</div>
                    </div>
                </div>
            </div>

            <!-- Toast Messages -->
            <div class="toast" id="toastMessage">
                <i class="fas fa-check-circle"></i>
                <span></span>
            </div>

            <!-- Step 1: Date and Doctor Selection -->
            <div class="step-content active" id="step1Content">
                <!-- Treatment Filter -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-filter"></i>
                        Filter by Treatment
                    </h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="treatmentFilter">Treatment:</label>
                            <select id="treatmentFilter" class="form-control">
                                <option value="">All Treatments</option>
                            </select>
                        </div>
                        <div class="form-group" style="display: flex; align-items: end; gap: 10px;">
                            <button type="button" class="btn btn-primary" onclick="applyTreatmentFilter()">
                                <i class="fas fa-filter"></i> Apply Filter
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="clearTreatmentFilter()">
                                <i class="fas fa-times"></i> Clear
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Calendar -->
                <div class="calendar-section">
                    <div class="calendar-header">
                        <button type="button" class="calendar-nav" onclick="changeCalendarMonth(-1)">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <div class="calendar-title" id="calendarTitle">April 2025</div>
                        <button type="button" class="calendar-nav" onclick="changeCalendarMonth(1)">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                    
                    <div class="calendar-grid" id="calendarGrid">
                        <div class="weekday">Sun</div>
                        <div class="weekday">Mon</div>
                        <div class="weekday">Tue</div>
                        <div class="weekday">Wed</div>
                        <div class="weekday">Thu</div>
                        <div class="weekday">Fri</div>
                        <div class="weekday">Sat</div>
                        <!-- Calendar days will be generated here -->
                    </div>
                </div>

                <!-- Available Doctors -->
                <div class="doctors-section" id="doctorsSection" style="display: none;">
                    <h3 class="section-title">
                        <i class="fas fa-user-md"></i>
                        Available Doctors for <span id="selectedDateText"></span>
                    </h3>
                    <div class="doctors-grid" id="doctorsGrid">
                        <!-- Available doctors will be shown here -->
                    </div>
                </div>

                <!-- Navigation -->
                <div class="step-navigation">
                    <a href="/admin/appointments" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Appointments
                    </a>
                    <button type="button" class="btn btn-primary" onclick="nextStep(2)" id="step1Next" disabled>
                        Next: Choose Time <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>

            <!-- Step 2: Time and Patient Selection -->
            <div class="step-content" id="step2Content">
                <!-- Selected Doctor Info -->
                <div class="time-section">
                    <div class="selected-doctor-info" id="selectedDoctorInfo">
                        <div class="doctor-avatar" id="selectedDoctorAvatar">D</div>
                        <div class="doctor-details">
                            <h3 id="selectedDoctorName">Dr. Name</h3>
                            <p id="selectedDoctorSpecialty">Specialty</p>
                        </div>
                    </div>

                    <!-- Date Navigation -->
                    <div class="date-selector">
                        <button type="button" class="date-nav" onclick="changeSelectedDate(-1)">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <div class="selected-date" id="selectedDateDisplay">Today</div>
                        <button type="button" class="date-nav" onclick="changeSelectedDate(1)">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <!-- Time Slots -->
                    <h4 style="margin-bottom: 15px; color: #333;">Available Time Slots</h4>
                    <div class="time-slots-grid" id="timeSlotsGrid">
                        <div class="loading" style="grid-column: 1 / -1;">
                            <div class="loading-spinner"></div>
                            <span>Loading available time slots...</span>
                        </div>
                    </div>
                </div>

                <!-- Patient Search -->
                <div class="patient-section">
                    <h3 class="section-title">
                        <i class="fas fa-user-search"></i>
                        Search & Select Patient
                    </h3>
                    <div class="search-container">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" 
                               id="patientSearch" 
                               class="search-input" 
                               placeholder="Search patient by name or phone number..."
                               autocomplete="off">
                        <div class="patient-dropdown" id="patientDropdown">
                            <!-- Patient options will be populated here -->
                        </div>
                    </div>
                    <input type="hidden" id="selectedPatientId" value="">
                    <div class="selected-patient-info" id="selectedPatientInfo">
                        <div>
                            <strong>Selected Patient:</strong> <span id="selectedPatientName"></span>
                        </div>
                        <button type="button" class="clear-patient-btn" onclick="clearPatientSelection()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>

                <!-- Appointment Details -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-clipboard-list"></i>
                        Appointment Details
                    </h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="treatmentSelect">Treatment: *</label>
                            <select id="treatmentSelect" class="form-control" required>
                                <option value="">Select Treatment</option>
                            </select>
                        </div>
                        <div class="form-group" style="grid-column: 1 / -1;">
                            <label for="symptoms">Symptoms/Additional Details:</label>
                            <textarea id="symptoms" 
                                    class="form-control" 
                                    rows="4" 
                                    placeholder="Please describe symptoms, concerns, or any additional details..."
                                    style="resize: vertical; min-height: 100px;"></textarea>
                        </div>
                    </div>
                </div>

                <!-- Navigation -->
                <div class="step-navigation">
                    <button type="button" class="btn btn-secondary" onclick="previousStep(1)">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                    <button type="button" class="btn btn-primary" onclick="nextStep(3)" id="step2Next" disabled>
                        Next: Confirm Booking <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>

            <!-- Step 3: Booking Confirmation -->
            <div class="step-content" id="step3Content">
                <div class="confirmation-section">
                    <div class="booking-id" id="bookingId">
                        <i class="fas fa-calendar-check"></i>
                        Booking Request: #REQ-<span id="requestNumber">000000</span>
                    </div>

                    <div class="booking-details">
                        <h4><i class="fas fa-file-alt"></i> Appointment Summary</h4>
                        <div class="detail-row">
                            <span class="detail-label">Patient Name:</span>
                            <span class="detail-value" id="finalPatientName">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Patient Phone:</span>
                            <span class="detail-value" id="finalPatientPhone">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Treatment:</span>
                            <span class="detail-value" id="finalTreatment">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Doctor:</span>
                            <span class="detail-value" id="finalDoctor">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Date:</span>
                            <span class="detail-value" id="finalDate">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Time:</span>
                            <span class="detail-value" id="finalTime">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Notes:</span>
                            <span class="detail-value" id="finalSymptoms">-</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Status:</span>
                            <span class="status-badge status-pending">Pending Confirmation</span>
                        </div>
                    </div>

                    <div class="step-navigation">
                        <button type="button" class="btn btn-secondary" onclick="previousStep(2)">
                            <i class="fas fa-edit"></i> Edit Details
                        </button>
                        <button type="button" class="btn btn-success" onclick="confirmBooking()">
                            <i class="fas fa-check"></i> Confirm Booking
                        </button>
                    </div>

                    <!-- Final Actions -->
                    <div class="step-navigation" style="margin-top: 30px;">
                        <button type="button" class="btn btn-secondary" onclick="startNewBooking()">
                            <i class="fas fa-plus"></i> Book Another Appointment
                        </button>
                        <a href="/admin/appointments" class="btn btn-primary">
                            <i class="fas fa-list"></i> View All Appointments
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentStep = 1;
        let selectedDoctor = null;
        let selectedDate = new Date().toISOString().split('T')[0];
        let selectedTime = null;
        let currentCalendarDate = new Date();
        let doctorsData = [];
        let patientsData = [];
        let treatmentsData = [];
        let doctorTreatmentMap = {};
        let allSchedules = [];
        let filteredTreatmentId = '';
        let filteredPatients = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
            setupPatientSearch();
            setupFormValidation();
        });

        // Initialize page data
        async function initializePage() {
            try {
                showToast('Loading clinic data...', 'info');
                
                await Promise.all([
                    loadTreatments(),
                    loadPatients(),
                    loadDentists(),
                    loadDentistTreatmentMap(),
                    loadUserInfo()
                ]);
                
                generateCalendar();
                showToast('Ready to book appointments', 'success');
                
            } catch (error) {
                console.error('Error initializing page:', error);
                showToast('Error loading data. Please refresh the page.', 'error');
            }
        }

        // Load user information
        async function loadUserInfo() {
            try {
                const response = await fetch('/admin/profile/api');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.email) {
                        const firstLetter = data.email.charAt(0).toUpperCase();
                        document.getElementById('userAvatar').textContent = firstLetter;
                        document.getElementById('userName').textContent = data.email.split('@')[0];
                    }
                }
            } catch (error) {
                console.error('Error loading user info:', error);
            }
        }

        // Load dentist-treatment mapping
        async function loadDentistTreatmentMap() {
            try {
                const response = await fetch('/admin/api/dentist-treatments/mappings');
                const data = await response.json();
                
                if (data.success && data.mappings) {
                    doctorTreatmentMap = {};
                    
                    for (const [dentistId, mappingData] of Object.entries(data.mappings)) {
                        doctorTreatmentMap[dentistId] = mappingData.treatments;
                    }
                    
                    console.log('Doctor-Treatment mapping loaded:', Object.keys(doctorTreatmentMap).length, 'dentists');
                } else {
                    // Fallback: assign all treatments to all dentists
                    await loadFallbackTreatmentMap();
                }
            } catch (error) {
                console.error('Error loading dentist-treatment mapping:', error);
                await loadFallbackTreatmentMap();
            }
        }

        async function loadFallbackTreatmentMap() {
            doctorTreatmentMap = {};
            doctorsData.forEach(dentist => {
                doctorTreatmentMap[dentist.dentist_id] = [...treatmentsData];
            });
        }

        // Load treatments
        async function loadTreatments() {
            try {
                const response = await fetch('/admin/api/treatments');
                const data = await response.json();
                
                if (data.success) {
                    treatmentsData = data.treatments;
                    populateTreatmentFilter();
                    populateTreatmentSelect();
                }
            } catch (error) {
                console.error('Error loading treatments:', error);
            }
        }

        // Load dentists
        async function loadDentists() {
            try {
                const response = await fetch('/admin/api/dentists');
                const data = await response.json();
                
                if (data.success) {
                    doctorsData = data.dentists;
                }
            } catch (error) {
                console.error('Error loading dentists:', error);
            }
        }

        // Load patients
        async function loadPatients() {
            try {
                const response = await fetch('/admin/api/patients');
                const data = await response.json();
                
                if (data.success) {
                    patientsData = data.patients;
                    filteredPatients = [...patientsData];
                }
            } catch (error) {
                console.error('Error loading patients:', error);
            }
        }

        // Populate treatment filter and select
        function populateTreatmentFilter() {
            const select = document.getElementById('treatmentFilter');
            select.innerHTML = '<option value="">All Treatments</option>';
            
            treatmentsData.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment.treatment_id;
                option.textContent = treatment.treatment_name;
                select.appendChild(option);
            });
        }

        function populateTreatmentSelect() {
            const select = document.getElementById('treatmentSelect');
            select.innerHTML = '<option value="">Select Treatment</option>';
            
            treatmentsData.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment.treatment_id;
                option.textContent = `${treatment.treatment_name} (${treatment.duration} min)`;
                select.appendChild(option);
            });
        }

        // Calendar functions
        function changeCalendarMonth(direction) {
            currentCalendarDate.setMonth(currentCalendarDate.getMonth() + direction);
            generateCalendar();
        }

        function generateCalendar() {
            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth();
            
            const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                              'July', 'August', 'September', 'October', 'November', 'December'];
            document.getElementById('calendarTitle').textContent = `${monthNames[month]} ${year}`;
            
            const grid = document.getElementById('calendarGrid');
            
            // Keep weekday headers and clear the rest
            const weekdayHeaders = grid.querySelectorAll('.weekday');
            grid.innerHTML = '';
            weekdayHeaders.forEach(header => grid.appendChild(header));
            
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                
                const dayElement = createDayElement(date, month);
                grid.appendChild(dayElement);
            }
            
            loadMonthSchedules(year, month);
        }

        function createDayElement(date, currentMonth) {
            const day = document.createElement('div');
            day.className = 'calendar-day';
            
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const dayNum = String(date.getDate()).padStart(2, '0');
            const dateString = `${year}-${month}-${dayNum}`;
            
            day.dataset.date = dateString;
            
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const dayOfWeek = date.getDay();
            const compareDate = new Date(date);
            compareDate.setHours(0, 0, 0, 0);
            
            if (date.getMonth() !== currentMonth) {
                day.classList.add('other-month');
            }
            
            if (compareDate.getTime() === today.getTime()) {
                day.classList.add('today');
            }
            
            if (compareDate < today) {
                day.classList.add('past');
            }
            
            if (dayOfWeek === 0) {
                day.classList.add('closed');
            }
            
            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = date.getDate();
            day.appendChild(dayNumber);
            
            if (compareDate < today) {
                dayNumber.innerHTML += '<br><small style="color: #dc3545; font-size: 10px;">Past</small>';
            }
            
            const doctorsContainer = document.createElement('div');
            doctorsContainer.className = 'day-doctors';
            day.appendChild(doctorsContainer);
            
            if (dayOfWeek !== 0 && date.getMonth() === currentMonth && compareDate >= today) {
                day.addEventListener('click', () => selectCalendarDate(dateString, day));
            }
            
            return day;
        }

        async function loadMonthSchedules(year, month) {
            try {
                const startDate = new Date(year, month, 1).toISOString().split('T')[0];
                const endDate = new Date(year, month + 1, 0).toISOString().split('T')[0];
                
                const schedulesPromises = doctorsData.map(async (dentist) => {
                    try {
                        const response = await fetch(`/admin/api/dentists/${dentist.dentist_id}/schedule-data?start_date=${startDate}&end_date=${endDate}`);
                        const data = await response.json();
                        
                        if (data.success && data.schedules) {
                            return data.schedules.map(schedule => ({
                                dentist_id: dentist.dentist_id,
                                dentist_name: `${dentist.fname} ${dentist.lname}`,
                                schedule_date: schedule.schedule_date,
                                start_time: schedule.start_time,
                                end_time: schedule.end_time,
                                status: schedule.status,
                                appointment_count: schedule.appointment_count || 0
                            }));
                        }
                        return [];
                    } catch (error) {
                        console.warn(`Error loading schedule for dentist ${dentist.dentist_id}:`, error);
                        return [];
                    }
                });
                
                const allDentistSchedules = await Promise.all(schedulesPromises);
                allSchedules = allDentistSchedules.flat();
                
                populateCalendarDoctors();
                
            } catch (error) {
                console.error('Error loading month schedules:', error);
                generateDefaultSchedules(year, month);
            }
        }

        function generateDefaultSchedules(year, month) {
            allSchedules = [];
            const startDate = new Date(year, month, 1);
            const endDate = new Date(year, month + 1, 0);
            
            for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
                const dayOfWeek = date.getDay();
                
                if (dayOfWeek === 0) continue;
                
                doctorsData.forEach(dentist => {
                    allSchedules.push({
                        dentist_id: dentist.dentist_id,
                        dentist_name: `${dentist.fname} ${dentist.lname}`,
                        schedule_date: date.toISOString().split('T')[0],
                        start_time: '10:00:00',
                        end_time: '20:00:00',
                        status: 'working',
                        appointment_count: 0
                    });
                });
            }
            
            populateCalendarDoctors();
        }

        function populateCalendarDoctors() {
            document.querySelectorAll('.day-doctors').forEach(container => {
                container.innerHTML = '';
            });
            
            const schedulesByDate = {};
            allSchedules.forEach(schedule => {
                const date = schedule.schedule_date;
                if (!schedulesByDate[date]) {
                    schedulesByDate[date] = [];
                }
                schedulesByDate[date].push(schedule);
            });
            
            Object.keys(schedulesByDate).forEach(date => {
                const dayElement = document.querySelector(`[data-date="${date}"]`);
                if (!dayElement || dayElement.classList.contains('closed') || dayElement.classList.contains('other-month')) return;
                
                const doctorsContainer = dayElement.querySelector('.day-doctors');
                const daySchedules = schedulesByDate[date];
                
                const filteredSchedules = daySchedules.filter(schedule => {
                    return shouldShowDoctor(schedule.dentist_id);
                });
                
                const doctorSet = new Set();
                filteredSchedules.forEach(schedule => {
                    if (schedule.status === 'working') {
                        doctorSet.add(`${schedule.dentist_id}|${schedule.dentist_name}`);
                    }
                });
                
                Array.from(doctorSet).forEach(doctorInfo => {
                    const [dentistId, doctorName] = doctorInfo.split('|');
                    const doctorSchedules = filteredSchedules.filter(s => s.dentist_id == dentistId);
                    
                    const hasAppointments = doctorSchedules.some(s => s.appointment_count > 0);
                    const doctorItem = createDoctorItem(doctorName, hasAppointments);
                    doctorsContainer.appendChild(doctorItem);
                });
            });
        }

        function createDoctorItem(doctorName, hasAppointments) {
            const item = document.createElement('div');
            item.className = 'doctor-item';
            
            const nameParts = doctorName.split(' ');
            const initials = nameParts.map(part => part.charAt(0)).join('');
            
            item.innerHTML = `
                <div class="doctor-mini-avatar">${initials}</div>
                <div class="doctor-name-mini">${doctorName}</div>
                <div class="doctor-status ${hasAppointments ? 'busy' : ''}"></div>
            `;
            
            return item;
        }

        function shouldShowDoctor(dentistId) {
            if (!filteredTreatmentId) return true;
            
            const dentistTreatments = doctorTreatmentMap[dentistId] || [];
            return dentistTreatments.some(treatment => treatment.treatment_id == filteredTreatmentId);
        }

        function applyTreatmentFilter() {
            filteredTreatmentId = document.getElementById('treatmentFilter').value;
            populateCalendarDoctors();
            
            if (filteredTreatmentId) {
                const selectedTreatment = treatmentsData.find(t => t.treatment_id == filteredTreatmentId);
                showToast(`Filtered by: ${selectedTreatment.treatment_name}`, 'success');
            } else {
                showToast('Showing all doctors', 'success');
            }
        }

        function clearTreatmentFilter() {
            document.getElementById('treatmentFilter').value = '';
            filteredTreatmentId = '';
            populateCalendarDoctors();
            showToast('Filter cleared', 'success');
        }

        function selectCalendarDate(dateStr, dayElement) {
            document.querySelectorAll('.calendar-day.selected').forEach(day => {
                day.classList.remove('selected');
            });
            
            dayElement.classList.add('selected');
            selectedDate = dateStr;
            
            showAvailableDoctors(dateStr);
        }

        async function showAvailableDoctors(dateStr) {
            const doctorsSection = document.getElementById('doctorsSection');
            const doctorsGrid = document.getElementById('doctorsGrid');
            const dateText = document.getElementById('selectedDateText');
            
            const date = new Date(dateStr);
            dateText.textContent = date.toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            
            doctorsGrid.innerHTML = `
                <div class="loading" style="grid-column: 1 / -1;">
                    <div class="loading-spinner"></div>
                    <span>Loading available doctors...</span>
                </div>
            `;
            
            doctorsSection.style.display = 'block';
            
            try {
                const daySchedules = allSchedules.filter(schedule => schedule.schedule_date === dateStr);
                
                if (daySchedules.length === 0) {
                    doctorsGrid.innerHTML = `
                        <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">
                            <i class="fas fa-info-circle" style="font-size: 32px; margin-bottom: 15px; color: #ddd;"></i><br>
                            <h4>No doctors available on this date</h4>
                            <p>Please select a different date.</p>
                        </div>
                    `;
                    return;
                }
                
                const doctorGroups = {};
                daySchedules.forEach(schedule => {
                    if (schedule.status === 'working' && shouldShowDoctor(schedule.dentist_id)) {
                        if (!doctorGroups[schedule.dentist_id]) {
                            doctorGroups[schedule.dentist_id] = {
                                schedules: [],
                                dentist_name: schedule.dentist_name
                            };
                        }
                        doctorGroups[schedule.dentist_id].schedules.push(schedule);
                    }
                });
                
                if (Object.keys(doctorGroups).length === 0) {
                    doctorsGrid.innerHTML = `
                        <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">
                            <i class="fas fa-filter" style="font-size: 32px; margin-bottom: 15px; color: #ddd;"></i><br>
                            <h4>No doctors available for selected treatment</h4>
                            <p>Please clear the filter or select a different date.</p>
                        </div>
                    `;
                    return;
                }
                
                let doctorsHTML = '';
                for (const dentistId of Object.keys(doctorGroups)) {
                    const doctor = doctorsData.find(d => d.dentist_id == dentistId);
                    if (doctor) {
                        doctorsHTML += await createDoctorCard(doctor, doctorGroups[dentistId].schedules);
                    }
                }
                
                doctorsGrid.innerHTML = doctorsHTML;
                
                // Smooth scroll to doctors section
                setTimeout(() => {
                    doctorsSection.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'start' 
                    });
                }, 100);
                
            } catch (error) {
                console.error('Error loading doctors for date:', error);
                doctorsGrid.innerHTML = `
                    <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #ef4444;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 32px; margin-bottom: 15px;"></i><br>
                        <h4>Error loading doctor information</h4>
                        <p>Please try again or contact support.</p>
                    </div>
                `;
            }
        }

        async function createDoctorCard(doctor, schedules) {
            const initials = doctor.fname.charAt(0) + doctor.lname.charAt(0);
            
            let timeSlots = '';
            let hasAnyAppointments = false;
            
            schedules.forEach(schedule => {
                const hasAppointments = schedule.appointment_count > 0;
                if (hasAppointments) hasAnyAppointments = true;
                
                const startTime = schedule.start_time.substring(0, 5);
                const endTime = schedule.end_time.substring(0, 5);
                
                timeSlots += `
                    <span class="time-slot ${hasAppointments ? 'busy' : ''}">
                        ${startTime}-${endTime}${hasAppointments ? ` (${schedule.appointment_count})` : ''}
                    </span>
                `;
            });
            
            if (!timeSlots) {
                timeSlots = '<span class="time-slot">10:00-20:00</span>';
            }
            
            const doctorTreatments = doctorTreatmentMap[doctor.dentist_id] || [];
            let treatmentTags = '';
            
            if (doctorTreatments.length === 0) {
                treatmentsData.slice(0, 3).forEach(treatment => {
                    treatmentTags += `<span class="treatment-tag">${treatment.treatment_name}</span>`;
                });
            } else {
                doctorTreatments.slice(0, 5).forEach(treatment => {
                    treatmentTags += `<span class="treatment-tag">${treatment.treatment_name}</span>`;
                });
                
                if (doctorTreatments.length > 5) {
                    treatmentTags += `<span class="treatment-tag">+${doctorTreatments.length - 5} more</span>`;
                }
            }
            
            return `
                <div class="doctor-card" onclick="selectDoctorFromCard(${doctor.dentist_id}, '${doctor.fname}', '${doctor.lname}', '${doctor.specialty || 'General Dentistry'}', this)">
                    <div class="doctor-card-header">
                        <div class="doctor-avatar">${initials}</div>
                        <div class="doctor-details">
                            <h5>Dr. ${doctor.fname} ${doctor.lname}</h5>
                            <p>${doctor.specialty || 'General Dentistry'}</p>
                        </div>
                    </div>
                    <div class="doctor-treatments">
                        ${treatmentTags}
                    </div>
                    <div class="doctor-availability">
                        <strong>Available Times:</strong><br>
                        ${timeSlots}
                    </div>
                </div>
            `;
        }

        function selectDoctorFromCard(doctorId, fname, lname, specialty, cardElement) {
            document.querySelectorAll('.doctor-card.selected').forEach(card => {
                card.classList.remove('selected');
            });
            
            cardElement.classList.add('selected');
            
            selectedDoctor = {
                id: doctorId,
                name: `${fname} ${lname}`,
                specialty: specialty,
                fname: fname,
                lname: lname
            };
            
            document.getElementById('step1Next').disabled = false;
            
            showToast(`Dr. ${fname} ${lname} selected`, 'success');
            
            // Smooth scroll to navigation
            setTimeout(() => {
                document.querySelector('.step-navigation').scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'end' 
                });
            }, 300);
        }

        // Patient search functionality
        function setupPatientSearch() {
            const searchInput = document.getElementById('patientSearch');
            const dropdown = document.getElementById('patientDropdown');
            
            searchInput.addEventListener('input', function() {
                const query = this.value.toLowerCase().trim();
                
                if (query.length === 0) {
                    dropdown.style.display = 'none';
                    filteredPatients = [...patientsData];
                    return;
                }
                
                filteredPatients = patientsData.filter(patient => {
                    const fullName = `${patient.fname} ${patient.lname}`.toLowerCase();
                    const phone = patient.phone || '';
                    return fullName.includes(query) || phone.includes(query);
                });
                
                displayPatientOptions();
            });

            searchInput.addEventListener('focus', function() {
                if (this.value.length > 0) {
                    displayPatientOptions();
                }
            });

            document.addEventListener('click', function(e) {
                if (!e.target.closest('.search-container')) {
                    dropdown.style.display = 'none';
                }
            });
        }

        function displayPatientOptions() {
            const dropdown = document.getElementById('patientDropdown');
            
            if (filteredPatients.length === 0) {
                dropdown.innerHTML = '<div style="padding: 15px; text-align: center; color: #666; font-style: italic;">No patients found</div>';
            } else {
                let optionsHTML = '';
                filteredPatients.slice(0, 10).forEach(patient => {
                    optionsHTML += `
                        <div class="patient-option" onclick="selectPatient(${patient.patient_id}, '${patient.fname}', '${patient.lname}', '${patient.phone}')">
                            <div class="patient-name">${patient.fname} ${patient.lname}</div>
                            <div class="patient-phone">${patient.phone}</div>
                        </div>
                    `;
                });
                dropdown.innerHTML = optionsHTML;
            }
            
            dropdown.style.display = 'block';
        }

        function selectPatient(patientId, fname, lname, phone) {
            const searchInput = document.getElementById('patientSearch');
            const dropdown = document.getElementById('patientDropdown');
            const selectedPatientId = document.getElementById('selectedPatientId');
            const selectedPatientInfo = document.getElementById('selectedPatientInfo');
            const selectedPatientName = document.getElementById('selectedPatientName');
            
            searchInput.value = `${fname} ${lname} - ${phone}`;
            dropdown.style.display = 'none';
            
            selectedPatientId.value = patientId;
            selectedPatientName.textContent = `${fname} ${lname} (${phone})`;
            selectedPatientInfo.style.display = 'flex';
            
            validateStep2();
            showToast(`Patient ${fname} ${lname} selected`, 'success');
            
            // Smooth scroll to appointment details
            setTimeout(() => {
                document.querySelector('.form-section').scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'start' 
                });
            }, 300);
        }

        function clearPatientSelection() {
            const searchInput = document.getElementById('patientSearch');
            const selectedPatientId = document.getElementById('selectedPatientId');
            const selectedPatientInfo = document.getElementById('selectedPatientInfo');
            
            searchInput.value = '';
            selectedPatientId.value = '';
            selectedPatientInfo.style.display = 'none';
            
            validateStep2();
        }

        // Form validation
        function setupFormValidation() {
            const treatmentSelect = document.getElementById('treatmentSelect');
            
            treatmentSelect.addEventListener('change', validateStep2);
            
            // Store validation function globally
            window.validateStep2 = validateStep2;
        }

        function validateStep2() {
            const hasPatient = document.getElementById('selectedPatientId').value !== '';
            const hasTreatment = document.getElementById('treatmentSelect').value !== '';
            const hasTime = selectedTime !== null;
            
            document.getElementById('step2Next').disabled = !(hasPatient && hasTreatment && hasTime);
        }

        // Step navigation
        function nextStep(step) {
            if (step === 2 && !selectedDoctor) {
                showToast('Please select a doctor first', 'error');
                return;
            }
            
            if (step === 3) {
                const hasPatient = document.getElementById('selectedPatientId').value;
                const hasTreatment = document.getElementById('treatmentSelect').value;
                const hasTime = selectedTime;
                
                if (!hasPatient || !hasTreatment || !hasTime) {
                    showToast('Please fill in all required information', 'error');
                    return;
                }
            }

            currentStep = step;
            updateStepDisplay();
            
            if (step === 2) {
                initializeStep2();
            } else if (step === 3) {
                initializeStep3();
            }
            
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function previousStep(step) {
            currentStep = step;
            updateStepDisplay();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function updateStepDisplay() {
            for (let i = 1; i <= 3; i++) {
                const stepElement = document.getElementById(`step${i}`);
                const contentElement = document.getElementById(`step${i}Content`);
                
                stepElement.classList.remove('active', 'completed');
                contentElement.classList.remove('active');
                
                if (i < currentStep) {
                    stepElement.classList.add('completed');
                } else if (i === currentStep) {
                    stepElement.classList.add('active');
                    contentElement.classList.add('active');
                }
            }
        }

        function initializeStep2() {
            document.getElementById('selectedDoctorName').textContent = `Dr. ${selectedDoctor.name}`;
            document.getElementById('selectedDoctorSpecialty').textContent = selectedDoctor.specialty;
            document.getElementById('selectedDoctorAvatar').textContent = 
                selectedDoctor.fname.charAt(0) + selectedDoctor.lname.charAt(0);
            
            updateSelectedDateDisplay();
            loadTimeSlots();
            
            // Update treatment select with doctor's available treatments
            updateTreatmentSelectForDoctor();
        }

        function updateTreatmentSelectForDoctor() {
            const select = document.getElementById('treatmentSelect');
            const doctorTreatments = doctorTreatmentMap[selectedDoctor.id] || [];
            
            select.innerHTML = '<option value="">Select Treatment</option>';
            
            if (doctorTreatments.length === 0) {
                // Show all treatments if no specific mapping
                treatmentsData.forEach(treatment => {
                    const option = document.createElement('option');
                    option.value = treatment.treatment_id;
                    option.textContent = `${treatment.treatment_name} (${treatment.duration} min)`;
                    select.appendChild(option);
                });
            } else {
                // Show only doctor's treatments
                doctorTreatments.forEach(treatment => {
                    const option = document.createElement('option');
                    option.value = treatment.treatment_id;
                    option.textContent = `${treatment.treatment_name} (${treatment.duration} min)`;
                    select.appendChild(option);
                });
            }
        }

        function updateSelectedDateDisplay() {
            const date = new Date(selectedDate);
            const options = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            };
            document.getElementById('selectedDateDisplay').textContent = date.toLocaleDateString('en-US', options);
        }

        function changeSelectedDate(direction) {
            const date = new Date(selectedDate);
            date.setDate(date.getDate() + direction);
            selectedDate = date.toISOString().split('T')[0];
            
            updateSelectedDateDisplay();
            loadTimeSlots();
            
            // Clear selected time
            selectedTime = null;
            validateStep2();
        }

        async function loadTimeSlots() {
            const grid = document.getElementById('timeSlotsGrid');
            
            grid.innerHTML = `
                <div class="loading" style="grid-column: 1 / -1;">
                    <div class="loading-spinner"></div>
                    <span>Loading available time slots...</span>
                </div>
            `;

            try {
                const date = new Date(selectedDate);
                const today = new Date();
                const dayOfWeek = date.getDay();
                const isToday = date.toDateString() === today.toDateString();
                const currentHour = today.getHours();
                
                if (dayOfWeek === 0) {
                    grid.innerHTML = `
                        <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #ef4444;">
                            <i class="fas fa-times-circle" style="font-size: 32px; margin-bottom: 15px;"></i><br>
                            <h4>Clinic is closed on Sundays</h4>
                            <p>Please select a different day.</p>
                        </div>
                    `;
                    return;
                }

                const response = await fetch(`/admin/api/dentists/${selectedDoctor.id}/schedule-data?start_date=${selectedDate}&end_date=${selectedDate}`);
                
                let timeSlots = '';
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.schedules.length > 0) {
                        data.schedules.forEach(schedule => {
                            if (schedule.status === 'working') {
                                const startHour = parseInt(schedule.start_time.split(':')[0]);
                                const endHour = parseInt(schedule.end_time.split(':')[0]);
                                
                                for (let hour = startHour; hour < endHour; hour++) {
                                    const timeStr = `${hour.toString().padStart(2, '0')}:00`;
                                    const hasAppointment = schedule.appointment_count > 0;
                                    const isPastTime = isToday && hour <= currentHour;
                                    
                                    let slotClass = 'available';
                                    let slotText = 'Available';
                                    let clickHandler = `selectTimeSlot('${timeStr}')`;
                                    
                                    if (isPastTime) {
                                        slotClass = 'unavailable';
                                        slotText = 'Past Time';
                                        clickHandler = '';
                                    } else if (hasAppointment) {
                                        slotClass = 'unavailable';
                                        slotText = 'Booked';
                                        clickHandler = '';
                                    }
                                    
                                    timeSlots += `
                                        <div class="time-slot-btn ${slotClass}" 
                                             onclick="${clickHandler}"
                                             data-time="${timeStr}">
                                            <strong>${timeStr}</strong><br>
                                            <small>${slotText}</small>
                                        </div>
                                    `;
                                }
                            }
                        });
                    }
                }
                
                // Default clinic hours if no specific schedule
                if (!timeSlots) {
                    for (let hour = 10; hour <= 19; hour++) {
                        const timeStr = `${hour.toString().padStart(2, '0')}:00`;
                        const isPastTime = isToday && hour <= currentHour;
                        
                        let slotClass = 'available';
                        let slotText = 'Available';
                        let clickHandler = `selectTimeSlot('${timeStr}')`;
                        
                        if (isPastTime) {
                            slotClass = 'unavailable';
                            slotText = 'Past Time';
                            clickHandler = '';
                        }
                        
                        timeSlots += `
                            <div class="time-slot-btn ${slotClass}" 
                                 onclick="${clickHandler}"
                                 data-time="${timeStr}">
                                <strong>${timeStr}</strong><br>
                                <small>${slotText}</small>
                            </div>
                        `;
                    }
                }
                
                grid.innerHTML = timeSlots;
                
            } catch (error) {
                console.error('Error loading time slots:', error);
                grid.innerHTML = `
                    <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #ef4444;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 32px; margin-bottom: 15px;"></i><br>
                        <h4>Error loading time slots</h4>
                        <p>Please try again or contact support.</p>
                    </div>
                `;
            }
        }

        function selectTimeSlot(time) {
            document.querySelectorAll('.time-slot-btn.selected').forEach(btn => {
                btn.classList.remove('selected');
                btn.classList.add('available');
            });
            
            const button = document.querySelector(`[data-time="${time}"]`);
            if (button) {
                button.classList.remove('available');
                button.classList.add('selected');
                selectedTime = time;
                
                validateStep2();
                showToast('Time slot selected', 'success');
                
                // Smooth scroll to patient search if no patient selected
                if (!document.getElementById('selectedPatientId').value) {
                    setTimeout(() => {
                        document.querySelector('.patient-section').scrollIntoView({ 
                            behavior: 'smooth', 
                            block: 'start' 
                        });
                    }, 300);
                }
            }
        }

        function initializeStep3() {
            const requestNumber = Date.now().toString().slice(-6);
            document.getElementById('requestNumber').textContent = requestNumber;
            
            const patientId = document.getElementById('selectedPatientId').value;
            const treatmentId = document.getElementById('treatmentSelect').value;
            const symptoms = document.getElementById('symptoms').value;
            
            const selectedPatient = patientsData.find(p => p.patient_id == patientId);
            const selectedTreatment = treatmentsData.find(t => t.treatment_id == treatmentId);
            
            document.getElementById('finalPatientName').textContent = 
                selectedPatient ? `${selectedPatient.fname} ${selectedPatient.lname}` : 'Unknown';
            document.getElementById('finalPatientPhone').textContent = 
                selectedPatient ? selectedPatient.phone : 'N/A';
            document.getElementById('finalTreatment').textContent = 
                selectedTreatment ? selectedTreatment.treatment_name : 'Unknown';
            document.getElementById('finalDoctor').textContent = `Dr. ${selectedDoctor.name}`;
            document.getElementById('finalDate').textContent = 
                new Date(selectedDate).toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
            document.getElementById('finalTime').textContent = selectedTime;
            document.getElementById('finalSymptoms').textContent = symptoms || 'None specified';
        }

        async function confirmBooking() {
            try {
                const confirmBtn = event.target;
                const originalText = confirmBtn.innerHTML;
                
                confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Booking...';
                confirmBtn.disabled = true;
                
                const patientId = document.getElementById('selectedPatientId').value;
                const treatmentId = document.getElementById('treatmentSelect').value;
                const symptoms = document.getElementById('symptoms').value;
                
                const bookingData = {
                    patient_id: patientId,
                    dentist_id: selectedDoctor.id,
                    treatment_id: treatmentId,
                    appointment_time: `${selectedDate}T${selectedTime}:00`,
                    notes: symptoms || ''
                };

                const response = await fetch('/admin/api/appointments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(bookingData)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    showToast('Appointment booked successfully!', 'success');
                    
                    document.querySelector('.status-pending').textContent = 'Confirmed';
                    document.querySelector('.status-pending').className = 'status-badge status-confirmed';
                    
                    confirmBtn.innerHTML = '<i class="fas fa-check"></i> Booking Confirmed!';
                    confirmBtn.className = 'btn btn-success';
                    
                } else {
                    throw new Error(result.error || 'Failed to book appointment');
                }

            } catch (error) {
                console.error('Error confirming booking:', error);
                showToast(error.message, 'error');
                
                // Reset button
                const confirmBtn = event.target;
                confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirm Booking';
                confirmBtn.disabled = false;
            }
        }

        function startNewBooking() {
            location.reload();
        }

        function showToast(message, type = 'success') {
            const toast = document.getElementById('toastMessage');
            const icon = toast.querySelector('i');
            
            toast.className = `toast ${type} show`;
            
            if (type === 'success') {
                icon.className = 'fas fa-check-circle';
            } else if (type === 'error') {
                icon.className = 'fas fa-exclamation-circle';
            } else {
                icon.className = 'fas fa-info-circle';
            }
            
            toast.querySelector('span').textContent = message;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }

        function toggleDropdown() {
            const menu = document.getElementById('profileDropdown');
            menu.classList.toggle('show');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const profileDropdown = document.querySelector('.profile-dropdown');
            if (!profileDropdown.contains(event.target)) {
                document.getElementById('profileDropdown').classList.remove('show');
            }
        });
    </script>
</body>
</html>