<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Treatment History - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            margin: 0;
        }

        /* Sidebar */
        .sidebar {
            width: 180px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            position: fixed;
            height: 100vh;
            padding: 0;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
            color: #4A90E2;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 2px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        /* Main Content */
        .main {
            margin-left: 180px;
            padding: 0;
            min-height: 100vh;
        }

        /* Top Bar */
        .top-bar {
            background: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #666;
            font-size: 14px;
        }

        .breadcrumb a {
            color: #4A90E2;
            text-decoration: none;
        }

        .breadcrumb a:hover {
            text-decoration: underline;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .notification-container {
            position: relative;
        }

        .notification-icon {
            position: relative;
            width: 20px;
            height: 20px;
            cursor: pointer;
            color: #666;
            transition: color 0.3s ease;
        }

        .notification-icon:hover {
            color: #4A90E2;
        }

        .notification-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff4757;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: 600;
            display: none;
        }

        .notification-badge.show {
            display: flex;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .profile-dropdown {
            position: relative;
        }

        .user-info {
            display: flex;
            align-items: center;
            cursor: pointer;
            gap: 10px;
        }

        .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .user-details strong {
            display: block;
            font-size: 13px;
            color: #333;
        }

        .user-details small {
            color: #666;
            font-size: 11px;
        }

        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
            min-width: 160px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .dropdown-menu a {
            display: block;
            padding: 10px 15px;
            text-decoration: none;
            color: #333;
            font-size: 13px;
        }

        .dropdown-menu a:hover {
            background-color: #f8f9fa;
        }

        /* Content */
        .content {
            padding: 30px;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .page-title h1 {
            font-size: 24px;
            color: #333;
            margin: 0 0 5px 0;
            font-weight: 600;
        }

        .page-title p {
            color: #666;
            margin: 0;
            font-size: 13px;
        }

        .patient-info-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .patient-avatar-large {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            font-weight: 600;
        }

        .patient-details {
            flex: 1;
        }

        .patient-details h2 {
            margin: 0 0 5px 0;
            font-size: 20px;
            color: #333;
        }

        .patient-details p {
            margin: 2px 0;
            color: #666;
            font-size: 14px;
        }

        .filter-section {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 25px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .search-filters {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .search-filters label {
            font-weight: 500;
            color: #555;
            font-size: 14px;
        }

        .filter-input {
            padding: 8px 12px;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
            font-size: 14px;
            outline: none;
        }

        .filter-input:focus {
            border-color: #4A90E2;
            box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.1);
        }

        .stats-info {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #666;
            font-size: 14px;
        }

        .stats-info i {
            color: #4A90E2;
            font-size: 16px;
        }

        /* Treatment History Section */
        .history-section {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }

        .history-header {
            padding: 20px 25px;
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
            border-bottom: 1px solid #e1e5e9;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .history-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }

        .timeline-container {
            padding: 25px;
        }

        .year-section {
            margin-bottom: 30px;
        }

        .year-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e1e5e9;
        }

        .year-header h4 {
            font-size: 18px;
            color: #333;
            margin: 0;
        }

        .year-stats {
            background: #f8f9fa;
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 12px;
            color: #666;
            font-weight: 500;
        }

        .treatment-timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline-line {
            position: absolute;
            left: 15px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: linear-gradient(to bottom, #4A90E2, #e1e5e9);
        }

        .treatment-item {
            position: relative;
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .treatment-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border-color: #4A90E2;
        }

        .treatment-item::before {
            content: '';
            position: absolute;
            left: -35px;
            top: 20px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #4A90E2;
            border: 3px solid white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .treatment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .treatment-date {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #4A90E2;
            font-weight: 600;
            font-size: 14px;
        }

        .treatment-date i {
            font-size: 16px;
        }

        .treatment-status {
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-completed {
            background: #e8f5e8;
            color: #2e7d32;
        }

        .status-pending {
            background: #fff3e0;
            color: #f57c00;
        }

        .status-cancelled {
            background: #ffebee;
            color: #d32f2f;
        }

        .treatment-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .treatment-details h5 {
            margin: 0 0 5px 0;
            font-size: 16px;
            color: #333;
            font-weight: 600;
        }

        .treatment-details p {
            margin: 0;
            color: #666;
            font-size: 13px;
        }

        .view-details-btn {
            padding: 8px 16px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .view-details-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-icon {
            font-size: 48px;
            color: #ddd;
            margin-bottom: 20px;
        }

        .empty-state h3 {
            margin: 0 0 10px 0;
            color: #999;
        }

        .empty-state p {
            margin: 0 0 20px 0;
            font-size: 14px;
        }

        /* Loading */
        .loading {
            text-align: center;
            padding: 60px;
            color: #666;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(74, 144, 226, 0.1);
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 4000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease;
        }

        .toast.success {
            background: #10b981;
        }

        .toast.error {
            background: #ef4444;
        }

        .toast.info {
            background: #3b82f6;
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main {
                margin-left: 0;
            }
            
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .filter-section {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .patient-info-card {
                flex-direction: column;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/admin/dashboard"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
            <li><a href="/admin/appointments"><i class="fas fa-hospital"></i> Appointments</a></li>
            <li><a href="/admin/dentists"><i class="fas fa-user-md"></i> Dentists</a></li>
            <li class="active"><a href="/admin/patients"><i class="fas fa-users"></i> Patients</a></li>
            <li><a href="/admin/treatments"><i class="fas fa-tooth"></i> Treatments</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="breadcrumb">
                <a href="/admin/patients">Patients</a>
                <i class="fas fa-chevron-right"></i>
                <span id="patientName">Treatment History</span>
            </div>
            <div class="user-section">
                <div class="notification-container">
                    <i class="fas fa-bell notification-icon" onclick="toggleNotifications()"></i>
                    <div class="notification-badge" id="notificationBadge">0</div>
                </div>
                
                <div class="profile-dropdown">
                    <div class="user-info" onclick="toggleDropdown()">
                        <div class="avatar" id="userAvatar">A</div>
                        <div class="user-details">
                            <strong>Hello Admin</strong>
                            <small>administrator</small>
                        </div>
                        <i class="fas fa-caret-down"></i>
                    </div>
                    <div class="dropdown-menu" id="profileDropdown">
                        <a href="/admin/profile">My Profile</a>
                        <hr />
                        <a href="/logout">Log Out</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content -->
        <div class="content">
            <!-- Patient Info Card -->
            <div class="patient-info-card" id="patientInfoCard" style="display: none;">
                <div class="patient-avatar-large" id="patientAvatarLarge">JD</div>
                <div class="patient-details">
                    <h2 id="patientFullName">Loading...</h2>
                    <p><i class="fas fa-phone"></i> <span id="patientPhone">-</span></p>
                    <p><i class="fas fa-envelope"></i> <span id="patientEmail">-</span></p>
                    <p><i class="fas fa-birthday-cake"></i> <span id="patientAge">-</span></p>
                </div>
                <div class="action-buttons">
                    <a href="#" id="editPatientBtn" class="view-details-btn">
                        <i class="fas fa-edit"></i> Edit Patient
                    </a>
                    <a href="#" id="viewPatientBtn" class="view-details-btn">
                        <i class="fas fa-eye"></i> View Profile
                    </a>
                </div>
            </div>

            <!-- Filter Section -->
            <div class="filter-section">
                <div class="search-filters">
                    <label>Filter by Date:</label>
                    <input type="date" id="startDate" class="filter-input" onchange="applyFilters()" />
                    <span>to</span>
                    <input type="date" id="endDate" class="filter-input" onchange="applyFilters()" />
                    
                    <label>Treatment:</label>
                    <select id="treatmentFilter" class="filter-input" onchange="applyFilters()">
                        <option value="">All Treatments</option>
                    </select>
                    
                    <label>Status:</label>
                    <select id="statusFilter" class="filter-input" onchange="applyFilters()">
                        <option value="">All Status</option>
                        <option value="confirm">Completed</option>
                        <option value="pending">Pending</option>
                        <option value="cancel">Cancelled</option>
                    </select>
                </div>
                <div class="stats-info">
                    <i class="fas fa-history"></i>
                    <span><strong id="totalTreatments">0</strong> total treatments</span>
                </div>
            </div>

            <!-- Loading -->
            <div class="loading" id="loading">
                <div class="loading-spinner"></div>
                <p>Loading treatment history...</p>
            </div>

            <!-- History Section -->
            <div class="history-section" id="historySection" style="display: none;">
                <div class="history-header">
                    <h3>Treatment Timeline</h3>
                    <button class="view-details-btn" onclick="refreshData()">
                        <i class="fas fa-refresh"></i>
                        Refresh
                    </button>
                </div>
                
                <div class="timeline-container" id="timelineContainer">
                    <!-- Timeline content will be loaded here -->
                </div>
            </div>

            <!-- Empty State -->
            <div class="empty-state" id="emptyState" style="display: none;">
                <div class="empty-icon">
                    <i class="fas fa-history"></i>
                </div>
                <h3>No treatment history found</h3>
                <p>This patient hasn't had any treatments yet.</p>
                <a href="/admin/appointments/add" class="view-details-btn">
                    <i class="fas fa-plus"></i>
                    Book First Appointment
                </a>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let patientId = null;
        let allTreatments = [];
        let filteredTreatments = [];
        let patientData = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Get patient ID from URL
            const urlParts = window.location.pathname.split('/');
            patientId = urlParts[urlParts.indexOf('patients') + 1];
            
            if (patientId) {
                loadPatientInfo();
                loadTreatmentHistory();
            } else {
                showToast('Invalid patient ID', 'error');
                window.location.href = '/admin/patients';
            }
            
            updateUserAvatar();
        });

        // Load patient information
        async function loadPatientInfo() {
            try {
                const response = await fetch(`/admin/api/patients/${patientId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                if (data.success) {
                    patientData = data.patient;
                    displayPatientInfo(patientData);
                } else {
                    throw new Error(data.error || 'Failed to load patient info');
                }
            } catch (error) {
                console.error('Error loading patient info:', error);
                showToast('Failed to load patient information', 'error');
            }
        }

        // Display patient information
        function displayPatientInfo(patient) {
            const initials = (patient.fname ? patient.fname.charAt(0) : 'U') + 
                           (patient.lname ? patient.lname.charAt(0) : 'P');
            const fullName = `${patient.fname || 'Unknown'} ${patient.lname || 'Patient'}`;
            const age = calculateAge(patient.dob);

            document.getElementById('patientAvatarLarge').textContent = initials;
            document.getElementById('patientFullName').textContent = fullName;
            document.getElementById('patientName').textContent = fullName;
            document.getElementById('patientPhone').textContent = patient.phone || 'Not provided';
            document.getElementById('patientEmail').textContent = patient.email || 'Not provided';
            document.getElementById('patientAge').textContent = age;
            
            // Update action buttons
            document.getElementById('editPatientBtn').href = `/admin/patients/${patientId}/edit`;
            document.getElementById('viewPatientBtn').href = `/admin/patients/${patientId}`;
            
            document.getElementById('patientInfoCard').style.display = 'flex';
        }

        // Load treatment history from database
        async function loadTreatmentHistory() {
            const loading = document.getElementById('loading');
            const historySection = document.getElementById('historySection');
            const emptyState = document.getElementById('emptyState');
            
            loading.style.display = 'block';
            historySection.style.display = 'none';
            emptyState.style.display = 'none';
            
            try {
                // Call the actual API endpoint that will be added to your controller
                const response = await fetch(`/admin/api/patients/${patientId}/treatments`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success && data.treatments && data.treatments.length > 0) {
                    allTreatments = data.treatments;
                    filteredTreatments = [...allTreatments];
                    
                    populateTreatmentFilter();
                    renderTreatmentHistory();
                    updateStats();
                    
                    historySection.style.display = 'block';
                } else {
                    emptyState.style.display = 'block';
                }
                
            } catch (error) {
                console.error('Error loading treatment history:', error);
                emptyState.style.display = 'block';
                showToast('Failed to load treatment history: ' + error.message, 'error');
            } finally {
                loading.style.display = 'none';
            }
        }

        // Populate treatment filter dropdown
        function populateTreatmentFilter() {
            const treatmentFilter = document.getElementById('treatmentFilter');
            const uniqueTreatments = [...new Set(allTreatments.map(t => t.treatment_name))];
            
            // Clear existing options except "All Treatments"
            treatmentFilter.innerHTML = '<option value="">All Treatments</option>';
            
            uniqueTreatments.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment;
                option.textContent = treatment;
                treatmentFilter.appendChild(option);
            });
        }

        // Render treatment history timeline
        function renderTreatmentHistory() {
            const container = document.getElementById('timelineContainer');
            
            // Group treatments by year
            const groupedByYear = groupTreatmentsByYear(filteredTreatments);
            
            if (Object.keys(groupedByYear).length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="fas fa-search"></i>
                        </div>
                        <h3>No treatments match your filters</h3>
                        <p>Try adjusting your search criteria</p>
                    </div>
                `;
                return;
            }
            
            let html = '<div class="timeline-line"></div>';
            
            Object.keys(groupedByYear).sort((a, b) => b - a).forEach(year => {
                const yearTreatments = groupedByYear[year];
                html += `
                    <div class="year-section">
                        <div class="year-header">
                            <h4>${year}</h4>
                            <div class="year-stats">${yearTreatments.length} treatment${yearTreatments.length > 1 ? 's' : ''}</div>
                        </div>
                        <div class="treatment-timeline">
                `;
                
                yearTreatments.forEach(treatment => {
                    const date = new Date(treatment.date);
                    const formattedDate = formatTreatmentDate(date);
                    const statusClass = getStatusClass(treatment.queue_status);
                    const statusText = getStatusText(treatment.queue_status);
                    
                    html += `
                        <div class="treatment-item" onclick="viewTreatmentDetails(${treatment.queue_id})">
                            <div class="treatment-header">
                                <div class="treatment-date">
                                    <i class="fas fa-calendar"></i>
                                    ${formattedDate}
                                </div>
                                <div class="treatment-status ${statusClass}">${statusText}</div>
                            </div>
                            <div class="treatment-info">
                                <div class="treatment-details">
                                    <h5>${treatment.treatment_name}</h5>
                                    <p><i class="fas fa-user-md"></i> ${treatment.dentist_name}</p>
                                    ${treatment.diagnosis ? `<p><i class="fas fa-notes-medical"></i> ${treatment.diagnosis.substring(0, 100)}${treatment.diagnosis.length > 100 ? '...' : ''}</p>` : ''}
                                </div>
                                <a href="/admin/patients/${patientId}/treatments/${treatment.queue_id}" class="view-details-btn">
                                    <i class="fas fa-eye"></i>
                                    View Details
                                </a>
                            </div>
                        </div>
                    `;
                });
                
                html += `
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        // Group treatments by year
        function groupTreatmentsByYear(treatments) {
            const grouped = {};
            treatments.forEach(treatment => {
                const year = new Date(treatment.date).getFullYear();
                if (!grouped[year]) {
                    grouped[year] = [];
                }
                grouped[year].push(treatment);
            });
            
            // Sort treatments within each year by date (newest first)
            Object.keys(grouped).forEach(year => {
                grouped[year].sort((a, b) => new Date(b.date) - new Date(a.date));
            });
            
            return grouped;
        }

        // Format treatment date
        function formatTreatmentDate(date) {
            const options = { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            };
            return date.toLocaleDateString('en-US', options);
        }

        // Get status CSS class
        function getStatusClass(status) {
            switch (status) {
                case 'confirm': return 'status-completed';
                case 'pending': return 'status-pending';
                case 'cancel': return 'status-cancelled';
                default: return 'status-pending';
            }
        }

        // Get status display text
        function getStatusText(status) {
            switch (status) {
                case 'confirm': return 'Completed';
                case 'pending': return 'Pending';
                case 'cancel': return 'Cancelled';
                default: return 'Unknown';
            }
        }

        // Apply filters
        function applyFilters() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const treatmentFilter = document.getElementById('treatmentFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            
            filteredTreatments = allTreatments.filter(treatment => {
                // Date filter
                const treatmentDate = new Date(treatment.date);
                let matchesDate = true;
                
                if (startDate) {
                    matchesDate = matchesDate && treatmentDate >= new Date(startDate);
                }
                if (endDate) {
                    const endDateTime = new Date(endDate);
                    endDateTime.setHours(23, 59, 59, 999); // End of day
                    matchesDate = matchesDate && treatmentDate <= endDateTime;
                }
                
                // Treatment filter
                const matchesTreatment = !treatmentFilter || treatment.treatment_name === treatmentFilter;
                
                // Status filter
                const matchesStatus = !statusFilter || treatment.queue_status === statusFilter;
                
                return matchesDate && matchesTreatment && matchesStatus;
            });
            
            renderTreatmentHistory();
            updateStats();
        }

        // Update statistics
        function updateStats() {
            document.getElementById('totalTreatments').textContent = filteredTreatments.length;
        }

        // Calculate age from date of birth
        function calculateAge(dob) {
            if (!dob) return 'Unknown age';
            
            const today = new Date();
            const birthDate = new Date(dob);
            let age = today.getFullYear() - birthDate.getFullYear();
            const monthDiff = today.getMonth() - birthDate.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            
            return age > 0 ? `${age} years old` : 'Unknown age';
        }

        // View treatment details
        function viewTreatmentDetails(queueId) {
            window.location.href = `/admin/patients/${patientId}/treatments/${queueId}`;
        }

        // Update user avatar
        async function updateUserAvatar() {
            try {
                const response = await fetch('/admin/profile/api');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        const firstLetter = data.email ? data.email.charAt(0).toUpperCase() : 'A';
                        document.getElementById('userAvatar').textContent = firstLetter;
                    }
                }
            } catch (error) {
                console.error('Error fetching user info:', error);
                document.getElementById('userAvatar').textContent = 'A';
            }
        }

        // Refresh data
        async function refreshData() {
            showToast('Refreshing treatment history...', 'info');
            await loadTreatmentHistory();
            showToast('Data refreshed successfully', 'success');
        }

        // Toggle notifications dropdown
        function toggleNotifications() {
            // Placeholder for notifications functionality
            showToast('Notifications feature coming soon', 'info');
        }

        // Toggle profile dropdown
        function toggleDropdown() {
            const menu = document.getElementById('profileDropdown');
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
                ${message}
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }, 3000);
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            const profileDropdown = document.querySelector('.profile-dropdown');
            if (!profileDropdown.contains(event.target)) {
                document.getElementById('profileDropdown').style.display = 'none';
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            // ESC to close dropdowns
            if (event.key === 'Escape') {
                document.getElementById('profileDropdown').style.display = 'none';
            }
        });

        // Add slideOutRight animation
        const additionalStyles = document.createElement('style');
        additionalStyles.textContent = `
            @keyframes slideOutRight {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(additionalStyles);
    </script>
</body>
</html>