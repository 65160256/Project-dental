<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book an Appointment - Smile Clinic</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
        }

        /* Sidebar */
        .sidebar {
            width: 200px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            color: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .sidebar ul li:hover a,
        .sidebar ul li.active a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        /* Main Content */
        .main-content {
            margin-left: 200px;
            flex: 1;
            background: white;
            border-radius: 20px 0 0 20px;
            min-height: 100vh;
            position: relative;
        }

        /* Header */
        .header {
            background: white;
            padding: 20px 30px;
            border-bottom: 1px solid #e1e5e9;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 20px 0 0 0;
        }

        .header h1 {
            font-size: 28px;
            color: #333;
            margin: 0;
            font-weight: 600;
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
        }

        .user-info h4 {
            margin: 0;
            font-size: 14px;
            color: #333;
        }

        .user-info p {
            margin: 0;
            font-size: 12px;
            color: #666;
        }

        /* Form Container */
        .form-container {
            background: white;
            margin: 30px;
            border-radius: 15px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            max-width: 600px;
            margin: 30px auto;
        }

        .form-title {
            font-size: 24px;
            color: #333;
            margin-bottom: 30px;
            text-align: center;
            font-weight: 600;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .required {
            color: #e74c3c;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: white;
        }

        .form-control:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        select.form-control {
            cursor: pointer;
        }

        textarea.form-control {
            resize: vertical;
            min-height: 80px;
        }

        /* Patient Selection */
        .patient-section {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border: 1px solid #e1e5e9;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 25px;
        }

        .patient-toggle {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .toggle-option {
            flex: 1;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
        }

        .toggle-option.active {
            border-color: #4A90E2;
            background: linear-gradient(135deg, #e8f4f8, #f0f9ff);
            color: #4A90E2;
            font-weight: 600;
        }

        .new-patient-form {
            display: none;
        }

        .new-patient-form.active {
            display: block;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        /* Buttons */
        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .form-actions {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 30px;
        }

        /* Loading Spinner */
        .loading {
            display: none;
            text-align: center;
            color: #666;
        }

        .spinner {
            width: 30px;
            height: 30px;
            border: 3px solid rgba(74, 144, 226, 0.1);
            border-top: 3px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            max-width: 400px;
        }

        .toast.success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .toast.error {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .email-validation {
            margin-top: 5px;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .email-validation.valid {
            color: #28a745;
        }

        .email-validation.invalid {
            color: #dc3545;
        }

        .email-validation.checking {
            color: #6c757d;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }

            .main-content {
                margin-left: 0;
                border-radius: 0;
            }

            .header {
                border-radius: 0;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .form-container {
                margin: 15px;
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">ü¶∑</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/admin/dashboard">üìÖ Schedule</a></li>
            <li class="active"><a href="/admin/appointments">üè• Appointments</a></li>
            <li><a href="/admin/dentists">üë®‚Äç‚öïÔ∏è Dentists</a></li>
            <li><a href="/admin/patients">üë• Patients</a></li>
            <li><a href="/admin/treatments">ü¶∑ Treatments</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="header">
            <h1>Book an Appointment</h1>
            <div class="user-profile">
                <div class="user-avatar">A</div>
                <div class="user-info">
                    <h4>Hello Admin</h4>
                    <p>Administrator</p>
                </div>
            </div>
        </div>

        <!-- Form Container -->
        <div class="form-container">
            <h2 class="form-title">Book an Appointment</h2>

            <form id="appointmentForm">
                <!-- Patient Selection -->
                <div class="patient-section">
                    <div class="form-group">
                        <label class="form-label">Patient Type</label>
                        <div class="patient-toggle">
                            <div class="toggle-option active" data-type="existing">
                                Existing Patient
                            </div>
                            <div class="toggle-option" data-type="new">
                                New Patient
                            </div>
                        </div>
                    </div>

                    <!-- Existing Patient Selection -->
                    <div id="existingPatientSection">
                        <div class="form-group">
                            <label class="form-label" for="patientSelect">Name <span class="required">*</span></label>
                            <select class="form-control" id="patientSelect" required>
                                <option value="">Select a patient...</option>
                            </select>
                        </div>
                    </div>

                    <!-- New Patient Form -->
                    <div class="new-patient-form" id="newPatientSection">
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label" for="newFirstName">First Name <span class="required">*</span></label>
                                <input type="text" class="form-control" id="newFirstName">
                            </div>
                            <div class="form-group">
                                <label class="form-label" for="newLastName">Last Name <span class="required">*</span></label>
                                <input type="text" class="form-control" id="newLastName">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label" for="newPhone">Phone <span class="required">*</span></label>
                                <input type="tel" class="form-control" id="newPhone">
                            </div>
                            <div class="form-group">
                                <label class="form-label" for="newDOB">Date of Birth</label>
                                <input type="date" class="form-control" id="newDOB">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label" for="newEmail">Email <span class="required">*</span></label>
                                <input type="email" class="form-control" id="newEmail">
                                <div class="email-validation" id="emailValidation"></div>
                            </div>
                            <div class="form-group">
                                <label class="form-label" for="newIDCard">ID Card</label>
                                <input type="text" class="form-control" id="newIDCard">
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="newAddress">Address</label>
                            <textarea class="form-control" id="newAddress" rows="2"></textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="newPassword">Password <span class="required">*</span></label>
                            <input type="password" class="form-control" id="newPassword" minlength="6">
                        </div>
                    </div>
                </div>

                <!-- Treatment Selection -->
                <div class="form-group">
                    <label class="form-label" for="treatmentSelect">Treatment needed <span class="required">*</span></label>
                    <select class="form-control" id="treatmentSelect" required>
                        <option value="">Select treatment...</option>
                    </select>
                </div>

                <!-- Dentist Selection -->
                <div class="form-group">
                    <label class="form-label" for="dentistSelect">Select preferred dentist <span style="color: #999;">(optional)</span></label>
                    <select class="form-control" id="dentistSelect">
                        <option value="">Any available dentist</option>
                    </select>
                </div>

                <!-- Symptom Details -->
                <div class="form-group">
                    <label class="form-label" for="symptomDetails">Symptom Details</label>
                    <textarea class="form-control" id="symptomDetails" rows="3" placeholder="Please describe your symptoms or reason for visit..."></textarea>
                </div>

                <!-- Appointment Date and Time -->
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="bookingDate">Booking Date <span class="required">*</span></label>
                        <input type="date" class="form-control" id="bookingDate" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="selectedTime">Selected time <span class="required">*</span></label>
                        <select class="form-control" id="selectedTime" required>
                            <option value="">Select time...</option>
                        </select>
                    </div>
                </div>

                <!-- Phone (for existing patients) -->
                <div class="form-group" id="phoneGroup" style="display: none;">
                    <label class="form-label" for="phoneInput">Phone</label>
                    <input type="tel" class="form-control" id="phoneInput">
                </div>

                <!-- Loading -->
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Processing your appointment...</p>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="window.history.back()">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="confirmBtn">Confirm</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Global variables
        let patients = [];
        let treatments = [];
        let dentists = [];
        let isEmailValid = false;
        let emailCheckTimeout = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            setupEventListeners();
            setMinDate();
        });

        // Load data from APIs
        async function loadData() {
            try {
                await Promise.all([
                    loadPatients(),
                    loadTreatments(),
                    loadDentists()
                ]);
            } catch (error) {
                console.error('Error loading data:', error);
                showToast('Failed to load form data', 'error');
            }
        }

        async function loadPatients() {
            try {
                const response = await fetch('/admin/api/patients');
                const data = await response.json();
                if (data.success) {
                    patients = data.patients;
                    populatePatientSelect();
                }
            } catch (error) {
                console.error('Error loading patients:', error);
            }
        }

        async function loadTreatments() {
            try {
                const response = await fetch('/admin/api/treatments');
                const data = await response.json();
                if (data.success) {
                    treatments = data.treatments;
                    populateTreatmentSelect();
                }
            } catch (error) {
                console.error('Error loading treatments:', error);
            }
        }

        async function loadDentists() {
            try {
                const response = await fetch('/admin/api/dentists');
                const data = await response.json();
                if (data.success) {
                    dentists = data.dentists;
                    populateDentistSelect();
                }
            } catch (error) {
                console.error('Error loading dentists:', error);
            }
        }

        function populatePatientSelect() {
            const select = document.getElementById('patientSelect');
            select.innerHTML = '<option value="">Select a patient...</option>';
            patients.forEach(patient => {
                const option = document.createElement('option');
                option.value = patient.patient_id;
                option.textContent = `${patient.fname} ${patient.lname}`;
                select.appendChild(option);
            });
        }

        function populateTreatmentSelect() {
            const select = document.getElementById('treatmentSelect');
            select.innerHTML = '<option value="">Select treatment...</option>';
            treatments.forEach(treatment => {
                const option = document.createElement('option');
                option.value = treatment.treatment_id;
                option.textContent = `${treatment.treatment_name} (${treatment.duration} min)`;
                select.appendChild(option);
            });
        }

        function populateDentistSelect() {
            const select = document.getElementById('dentistSelect');
            select.innerHTML = '<option value="">Any available dentist</option>';
            dentists.forEach(dentist => {
                const option = document.createElement('option');
                option.value = dentist.dentist_id;
                option.textContent = `Dr. ${dentist.fname} ${dentist.lname} - ${dentist.specialty}`;
                select.appendChild(option);
            });
        }

        function setupEventListeners() {
            // Patient type toggle
            document.querySelectorAll('.toggle-option').forEach(option => {
                option.addEventListener('click', function() {
                    const type = this.dataset.type;
                    togglePatientType(type);
                });
            });

            // Email validation
            document.getElementById('newEmail').addEventListener('blur', checkEmailAvailability);

            // Date change
            document.getElementById('bookingDate').addEventListener('change', loadAvailableSlots);

            // Form submission
            document.getElementById('appointmentForm').addEventListener('submit', handleSubmit);
        }

        function togglePatientType(type) {
            // Update toggle buttons
            document.querySelectorAll('.toggle-option').forEach(opt => opt.classList.remove('active'));
            document.querySelector(`[data-type="${type}"]`).classList.add('active');

            // Show/hide sections
            const existingSection = document.getElementById('existingPatientSection');
            const newSection = document.getElementById('newPatientSection');
            const phoneGroup = document.getElementById('phoneGroup');

            if (type === 'new') {
                existingSection.style.display = 'none';
                newSection.classList.add('active');
                phoneGroup.style.display = 'none';
            } else {
                existingSection.style.display = 'block';
                newSection.classList.remove('active');
                phoneGroup.style.display = 'block';
            }
        }

        function setMinDate() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('bookingDate').min = today;
        }

        async function loadAvailableSlots() {
            const date = document.getElementById('bookingDate').value;
            const dentistId = document.getElementById('dentistSelect').value;
            
            if (!date) return;

            try {
                let url = `/admin/api/appointments/slots?date=${date}`;
                if (dentistId) {
                    url += `&dentist_id=${dentistId}`;
                }

                const response = await fetch(url);
                const data = await response.json();
                
                if (data.success) {
                    populateTimeSlots(data.slots);
                }
            } catch (error) {
                console.error('Error loading time slots:', error);
                showToast('Failed to load available time slots', 'error');
            }
        }

        function populateTimeSlots(slots) {
            const select = document.getElementById('selectedTime');
            select.innerHTML = '<option value="">Select time...</option>';
            
            const availableSlots = slots.filter(slot => slot.is_available);
            
            if (availableSlots.length === 0) {
                const option = document.createElement('option');
                option.value = '';
                option.textContent = 'No available slots';
                option.disabled = true;
                select.appendChild(option);
                return;
            }

            availableSlots.forEach(slot => {
                const option = document.createElement('option');
                option.value = `${slot.hour}:00`;
                option.textContent = `${slot.hour}:00 - Dr. ${slot.dentist_fname} ${slot.dentist_lname}`;
                option.dataset.dentistId = slot.dentist_id;
                select.appendChild(option);
            });
        }

        async function checkEmailAvailability() {
            const email = document.getElementById('newEmail').value.trim();
            const validation = document.getElementById('emailValidation');
            
            if (emailCheckTimeout) {
                clearTimeout(emailCheckTimeout);
            }

            if (!email) {
                validation.innerHTML = '';
                isEmailValid = false;
                return;
            }

            // Basic email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                validation.innerHTML = '‚ùå Invalid email format';
                validation.className = 'email-validation invalid';
                isEmailValid = false;
                return;
            }

            validation.innerHTML = 'üîÑ Checking availability...';
            validation.className = 'email-validation checking';

            emailCheckTimeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/admin/api/check-email?email=${encodeURIComponent(email)}`);
                    const data = await response.json();
                    
                    if (data.success) {
                        if (data.exists) {
                            validation.innerHTML = '‚ùå Email already exists';
                            validation.className = 'email-validation invalid';
                            isEmailValid = false;
                        } else {
                            validation.innerHTML = '‚úÖ Email available';
                            validation.className = 'email-validation valid';
                            isEmailValid = true;
                        }
                    }
                } catch (error) {
                    validation.innerHTML = '‚ö†Ô∏è Could not verify email';
                    validation.className = 'email-validation invalid';
                    isEmailValid = false;
                }
            }, 500);
        }

        async function handleSubmit(e) {
            e.preventDefault();
            
            const isNewPatient = document.querySelector('.toggle-option.active').dataset.type === 'new';
            
            if (!validateForm(isNewPatient)) {
                return;
            }

            const loading = document.getElementById('loading');
            const confirmBtn = document.getElementById('confirmBtn');
            
            loading.style.display = 'block';
            confirmBtn.disabled = true;

            try {
                let patientId;
                
                if (isNewPatient) {
                    patientId = await createNewPatient();
                } else {
                    patientId = document.getElementById('patientSelect').value;
                }

                await createAppointment(patientId, isNewPatient ? 'new' : 'existing');
                
                showToast('Appointment booked successfully!', 'success');
                
                // Redirect after 2 seconds
                setTimeout(() => {
                    window.location.href = '/admin/appointments';
                }, 2000);
                
            } catch (error) {
                console.error('Error:', error);
                showToast(error.message || 'Failed to book appointment', 'error');
            } finally {
                loading.style.display = 'none';
                confirmBtn.disabled = false;
            }
        }

        function validateForm(isNewPatient) {
            const requiredFields = ['treatmentSelect', 'bookingDate', 'selectedTime'];
            
            if (isNewPatient) {
                requiredFields.push('newFirstName', 'newLastName', 'newPhone', 'newEmail', 'newPassword');
                
                if (!isEmailValid) {
                    showToast('Please enter a valid and available email address', 'error');
                    return false;
                }
                
                const password = document.getElementById('newPassword').value;
                if (password.length < 6) {
                    showToast('Password must be at least 6 characters long', 'error');
                    return false;
                }
            } else {
                requiredFields.push('patientSelect');
            }

            for (const fieldId of requiredFields) {
                const field = document.getElementById(fieldId);
                if (!field.value.trim()) {
                    showToast(`Please fill in all required fields`, 'error');
                    field.focus();
                    return false;
                }
            }

            return true;
        }

        async function createNewPatient() {
            const patientData = {
                fname: document.getElementById('newFirstName').value.trim(),
                lname: document.getElementById('newLastName').value.trim(),
                phone: document.getElementById('newPhone').value.trim(),
                dob: document.getElementById('newDOB').value || null,
                email: document.getElementById('newEmail').value.trim(),
                idcard: document.getElementById('newIDCard').value.trim() || null,
                address: document.getElementById('newAddress').value.trim() || null,
                password: document.getElementById('newPassword').value
            };

            const response = await fetch('/admin/patients/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(patientData)
            });

            const result = await response.json();
            
            if (!response.ok || !result.success) {
                throw new Error(result.error || 'Failed to create patient');
            }

            // Reload patients to get the new patient ID
            await loadPatients();
            const newPatient = patients.find(p => 
                p.fname === patientData.fname && 
                p.lname === patientData.lname && 
                p.email === patientData.email
            );
            
            if (!newPatient) {
                throw new Error('Could not find newly created patient');
            }
            
            return newPatient.patient_id;
        }

        async function createAppointment(patientId, patientType) {
            const selectedTimeOption = document.getElementById('selectedTime').selectedOptions[0];
            const dentistId = selectedTimeOption.dataset.dentistId;
            const date = document.getElementById('bookingDate').value;
            const time = document.getElementById('selectedTime').value;
            const appointmentTime = `${date} ${time}:00`;

            const appointmentData = {
                patient_id: parseInt(patientId),
                treatment_id: parseInt(document.getElementById('treatmentSelect').value),
                dentist_id: parseInt(dentistId),
                appointment_time: appointmentTime,
                notes: document.getElementById('symptomDetails').value || null,
                patient_type: patientType
            };

            const response = await fetch('/admin/api/appointments/book', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(appointmentData)
            });

            const result = await response.json();
            
            if (!response.ok || !result.success) {
                throw new Error(result.error || 'Failed to create appointment');
            }
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }, 4000);
        }

        // Auto-resize textareas
        document.querySelectorAll('textarea').forEach(textarea => {
            textarea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = this.scrollHeight + 'px';
            });
        });
    </script>
</body>
</html>