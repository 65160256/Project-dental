<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dentist Schedule - Smile Clinic</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            margin: 0;
        }

        /* Sidebar - Consistent with other pages */
        .sidebar {
            width: 180px;
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            position: fixed;
            height: 100vh;
            padding: 0;
            color: #fff;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .sidebar .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar .logo .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            background: white;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-size: 24px;
            color: #4A90E2;
        }

        .sidebar .logo h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .sidebar ul {
            list-style: none;
            padding: 10px 0;
            margin: 0;
        }

        .sidebar ul li {
            margin: 2px 0;
        }

        .sidebar ul li a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sidebar ul li.active a,
        .sidebar ul li:hover a {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border-radius: 8px;
            margin: 0 10px;
        }

        /* Main Content */
        .main {
            margin-left: 180px;
            padding: 0;
            min-height: 100vh;
        }

        /* Top Bar */
        .top-bar {
            background: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }

        .back-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .back-btn {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
        }

        .back-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
        }

        .page-info h1 {
            font-size: 24px;
            color: #333;
            margin: 0 0 5px 0;
            font-weight: 600;
        }

        .page-info p {
            color: #666;
            margin: 0;
            font-size: 13px;
        }

        .dentist-badge {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .notification-container {
            position: relative;
        }

        .notification-icon {
            position: relative;
            width: 20px;
            height: 20px;
            cursor: pointer;
            color: #666;
            transition: color 0.3s ease;
        }

        .notification-icon:hover {
            color: #4A90E2;
        }

        .profile-dropdown {
            position: relative;
        }

        .user-info {
            display: flex;
            align-items: center;
            cursor: pointer;
            gap: 10px;
        }

        .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #4A90E2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .user-details strong {
            display: block;
            font-size: 13px;
            color: #333;
        }

        .user-details small {
            color: #666;
            font-size: 11px;
        }

        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
            min-width: 160px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .dropdown-menu a {
            display: block;
            padding: 10px 15px;
            text-decoration: none;
            color: #333;
            font-size: 13px;
        }

        .dropdown-menu a:hover {
            background-color: #f8f9fa;
        }

        /* Content */
        .content {
            padding: 30px;
        }

        /* Breadcrumb */
        .breadcrumb {
            background: white;
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 14px;
        }

        .breadcrumb a {
            color: #4A90E2;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .breadcrumb a:hover {
            color: #2DA8FF;
        }

        .breadcrumb .separator {
            color: #ccc;
        }

        .breadcrumb .current {
            color: #666;
            font-weight: 500;
        }

        /* Main Content Grid */
        .main-content {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 25px;
        }

        /* Left Panel - Dentist Info */
        .dentist-info-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            height: fit-content;
            text-align: center;
        }

        .dentist-photo {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 15px;
            border: 3px solid #e1e5e9;
        }

        .dentist-name {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .dentist-specialty {
            color: #666;
            font-size: 14px;
            margin-bottom: 15px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }

        .stat-item {
            background: #f8f9fa;
            padding: 12px;
            border-radius: 8px;
            text-align: center;
        }

        .stat-number {
            font-size: 18px;
            font-weight: 700;
            color: #4A90E2;
            margin-bottom: 2px;
        }

        .stat-label {
            font-size: 11px;
            color: #666;
            text-transform: uppercase;
        }

        /* Right Panel - Schedule */
        .schedule-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            overflow: hidden;
        }

        .schedule-header {
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
            padding: 20px 25px;
            border-bottom: 1px solid #e1e5e9;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .schedule-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .calendar-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 3px 8px rgba(74, 144, 226, 0.3);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 1px solid #e9ecef;
        }

        .btn-secondary:hover {
            background: #e9ecef;
        }

        /* Month Navigation */
        .month-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 25px;
            border-bottom: 1px solid #f1f3f4;
        }

        .month-nav-btn {
            background: none;
            border: none;
            color: #4A90E2;
            font-size: 16px;
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .month-nav-btn:hover {
            background: rgba(74, 144, 226, 0.1);
        }

        .current-month {
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }

        /* Calendar */
        .calendar-container {
            padding: 20px 25px;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background: #e1e5e9;
            border-radius: 8px;
            overflow: hidden;
        }

        .calendar-header-cell {
            background: #f8f9fa;
            padding: 12px 8px;
            text-align: center;
            font-size: 12px;
            font-weight: 600;
            color: #666;
        }

        .calendar-cell {
            background: white;
            min-height: 80px;
            padding: 8px;
            position: relative;
            cursor: pointer;
            transition: background 0.2s ease;
        }

        .calendar-cell:hover {
            background: #f8f9fa;
        }

        .calendar-cell.other-month {
            background: #fafbfc;
            color: #ccc;
        }

        .calendar-cell.today {
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.1), rgba(45, 168, 255, 0.1));
        }

        .calendar-cell.has-schedule {
            background: linear-gradient(135deg, #e8f5e8, #d4edda);
        }

        .calendar-cell.day-off {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
        }

        .calendar-cell.has-appointments {
            background: linear-gradient(135deg, #fce4ec, #f8bbd9);
        }

        .cell-date {
            font-size: 12px;
            font-weight: 600;
            color: #333;
            margin-bottom: 4px;
        }

        .cell-schedule {
            font-size: 10px;
            color: #666;
            line-height: 1.2;
        }

        .schedule-indicator {
            position: absolute;
            top: 4px;
            right: 4px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #10b981;
        }

        .schedule-indicator.day-off {
            background: #f59e0b;
        }

        .schedule-indicator.has-appointments {
            background: #e91e63;
        }

        /* Schedule Details Modal */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
            z-index: 3000;
            display: none;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            position: relative;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f3f4;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #666;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .close:hover {
            background: #f8f9fa;
            color: #333;
        }

        .schedule-detail {
            margin-bottom: 15px;
        }

        .detail-label {
            font-weight: 600;
            color: #555;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .detail-value {
            color: #333;
            font-size: 14px;
            padding: 8px 12px;
            background: #f8f9fa;
            border-radius: 6px;
        }

        .schedule-list {
            max-height: 200px;
            overflow-y: auto;
        }

        .schedule-item {
            padding: 10px;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            margin-bottom: 8px;
            background: white;
        }

        .schedule-item.day-off {
            background: #fff3cd;
            border-color: #ffeaa7;
        }

        .schedule-item.has-appointments {
            background: #fce4ec;
            border-color: #f8bbd9;
        }

        .schedule-time {
            font-weight: 600;
            color: #4A90E2;
            font-size: 13px;
        }

        .schedule-status {
            font-size: 12px;
            color: #666;
        }

        .appointment-info {
            font-size: 11px;
            color: #e91e63;
            font-weight: 500;
            margin-top: 2px;
        }

        /* Loading */
        .loading {
            display: none;
            text-align: center;
            padding: 60px;
            color: #666;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(74, 144, 226, 0.1);
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
            z-index: 4000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease;
            min-width: 300px;
        }

        .toast.success {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .toast.error {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .toast.info {
            background: linear-gradient(135deg, #4A90E2, #2DA8FF);
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .dentist-info-card {
                order: -1;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main {
                margin-left: 0;
            }
            
            .top-bar {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .calendar-grid {
                gap: 2px;
            }
            
            .calendar-cell {
                min-height: 60px;
                padding: 4px;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">🦷</div>
            <h3>Smile Clinic</h3>
        </div>
        <ul>
            <li><a href="/admin/dashboard"><i class="fas fa-chart-bar"></i> Dashboard</a></li>
            <li><a href="/admin/schedule"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
            <li><a href="/admin/appointments"><i class="fas fa-hospital"></i> Appointments</a></li>
            <li class="active"><a href="/admin/dentists"><i class="fas fa-user-md"></i> Dentists</a></li>
            <li><a href="/admin/patients"><i class="fas fa-users"></i> Patients</a></li>
            <li><a href="/admin/treatments"><i class="fas fa-tooth"></i> Treatments</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="back-section">
                <a href="/admin/dentists" class="back-btn" id="backButton">
                    <i class="fas fa-arrow-left"></i>
                    Back to Dentists
                </a>
                <div class="page-info">
                    <h1>Dentist Schedule</h1>
                    <p>View and manage dentist working hours</p>
                </div>
            </div>
            <div class="dentist-badge" id="dentistBadge">
                Loading...
            </div>
            <div class="user-section">
                <div class="notification-container">
                    <i class="fas fa-bell notification-icon" onclick="toggleNotifications()"></i>
                </div>
                
                <div class="profile-dropdown">
                    <div class="user-info" onclick="toggleDropdown()">
                        <div class="avatar" id="userAvatar">A</div>
                        <div class="user-details">
                            <strong>Hello Admin</strong>
                            <small>administrator</small>
                        </div>
                        <i class="fas fa-caret-down"></i>
                    </div>
                    <div class="dropdown-menu" id="profileDropdown">
                        <a href="/admin/profile"><i class="fas fa-user"></i> My Profile</a>
                        <hr />
                        <a href="/logout"><i class="fas fa-sign-out-alt"></i> Log Out</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content -->
        <div class="content">
            <!-- Breadcrumb -->
            <div class="breadcrumb">
                <a href="/admin/dentists"><i class="fas fa-user-md"></i> Dentists</a>
                <span class="separator"><i class="fas fa-chevron-right"></i></span>
                <a href="/admin/dentists/1" id="dentistLink">Dentist Information</a>
                <span class="separator"><i class="fas fa-chevron-right"></i></span>
                <span class="current">Work Schedule</span>
            </div>

            <!-- Loading -->
            <div class="loading" id="loading">
                <div class="loading-spinner"></div>
                <p>Loading schedule data from database...</p>
            </div>

            <!-- Main Content -->
            <div class="main-content" id="mainContent" style="display: none;">
                <!-- Left Panel - Dentist Info -->
                <div class="dentist-info-card">
                    <img id="dentistPhoto" src="/uploads/default-avatar.png" alt="Dentist Photo" class="dentist-photo">
                    <div class="dentist-name" id="dentistName">Loading...</div>
                    <div class="dentist-specialty" id="dentistSpecialty">Loading...</div>
                    
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-number" id="totalSchedules">0</div>
                            <div class="stat-label">Schedules</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="totalAppointments">0</div>
                            <div class="stat-label">Appointments</div>
                        </div>
                    </div>
                </div>

                <!-- Right Panel - Schedule Calendar -->
                <div class="schedule-card">
                    <div class="schedule-header">
                        <h3>
                            <i class="fas fa-calendar-alt"></i>
                            Work Schedule
                        </h3>
                        <div class="calendar-controls">
                            <button class="btn btn-secondary" onclick="goToToday()">
                                <i class="fas fa-calendar-day"></i>
                                Today
                            </button>
                            <button class="btn btn-primary" onclick="refreshSchedule()">
                                <i class="fas fa-sync-alt"></i>
                                Refresh
                            </button>
                        </div>
                    </div>

                    <!-- Month Navigation -->
                    <div class="month-navigation">
                        <button class="month-nav-btn" onclick="changeMonth(-1)">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <div class="current-month" id="currentMonth">Loading...</div>
                        <button class="month-nav-btn" onclick="changeMonth(1)">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <!-- Calendar -->
                    <div class="calendar-container">
                        <div class="calendar-grid" id="calendarGrid">
                            <!-- Calendar will be rendered here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Schedule Details Modal -->
    <div id="scheduleModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">Schedule Details</h3>
                <button class="close" onclick="closeModal()">&times;</button>
            </div>
            <div id="modalBody">
                <!-- Schedule details will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let dentistId = null;
        let dentistData = null;
        let scheduleData = [];
        let currentDate = new Date();
        let currentMonth = new Date().getMonth();
        let currentYear = new Date().getFullYear();

        // Days of the week
        const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const monthNames = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            extractDentistId();
            updateUserAvatar();
            initializePage();
        });

        // Extract dentist ID from URL
        function extractDentistId() {
            const path = window.location.pathname;
            const matches = path.match(/\/dentists\/(\d+)\/schedule$/);
            if (matches) {
                dentistId = parseInt(matches[1]);
                updateNavigationLinks();
            } else {
                showToast('Invalid dentist schedule URL', 'error');
                setTimeout(() => window.location.href = '/admin/dentists', 2000);
            }
        }

        // Update navigation links with correct dentist ID
        function updateNavigationLinks() {
            const backButton = document.getElementById('backButton');
            const dentistLink = document.getElementById('dentistLink');
            
            if (backButton) {
                backButton.href = `/admin/dentists`;
            }
            if (dentistLink) {
                dentistLink.href = `/admin/dentists/${dentistId}`;
            }
        }

        // Update user avatar
        async function updateUserAvatar() {
            try {
                const response = await fetch('/admin/profile/api');
                if (response.ok) {
                    const data = await response.json();
                    const firstLetter = data.email ? data.email.charAt(0).toUpperCase() : 'A';
                    document.getElementById('userAvatar').textContent = firstLetter;
                } else {
                    document.getElementById('userAvatar').textContent = 'A';
                }
            } catch (error) {
                console.error('Error fetching user info:', error);
                document.getElementById('userAvatar').textContent = 'A';
            }
        }

        // Initialize page data
        async function initializePage() {
            const loading = document.getElementById('loading');
            const mainContent = document.getElementById('mainContent');
            
            loading.style.display = 'block';
            mainContent.style.display = 'none';
            
            try {
                await Promise.all([
                    loadDentistData(),
                    loadScheduleData()
                ]);
                
                renderCalendar();
                
                loading.style.display = 'none';
                mainContent.style.display = 'grid';
                
                showToast('Schedule loaded from database', 'success');
            } catch (error) {
                console.error('Error initializing page:', error);
                showToast('Error loading data: ' + error.message, 'error');
                loading.style.display = 'none';
            }
        }

        // Load dentist data from API
        async function loadDentistData() {
            if (!dentistId) return;

            try {
                console.log(`Loading dentist data for ID: ${dentistId}`);
                const response = await fetch(`/admin/api/dentists/${dentistId}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    dentistData = data.dentist;
                    populateDentistInfo();
                    console.log('Dentist data loaded successfully:', dentistData);
                } else {
                    throw new Error(data.error || 'Failed to load dentist data');
                }
                
            } catch (error) {
                console.error('Error loading dentist data:', error);
                showToast('Failed to load dentist data: ' + error.message, 'error');
            }
        }

        // Populate dentist information
        function populateDentistInfo() {
            if (!dentistData) return;

            const fullName = `Dr. ${dentistData.fname || ''} ${dentistData.lname || ''}`.trim();
            document.getElementById('dentistName').textContent = fullName;
            document.getElementById('dentistSpecialty').textContent = dentistData.specialty || 'General Practice';
            document.getElementById('dentistBadge').textContent = `Dr. ${dentistData.fname} ${dentistData.lname}`;

            // Display photo with fallback to avatar
            displayDentistPhoto(dentistData);

            // Update stats with actual data from database
            document.getElementById('totalSchedules').textContent = dentistData.total_schedules || 0;
            document.getElementById('totalAppointments').textContent = dentistData.total_appointments || 0;
        }

        // Display dentist photo with avatar fallback
        function displayDentistPhoto(dentist) {
            const photoElement = document.getElementById('dentistPhoto');
            
            if (dentist.photo && 
                dentist.photo !== 'default-avatar.png' && 
                dentist.photo !== null && 
                dentist.photo !== '' && 
                dentist.photo !== 'null') {
                
                const imagePath = `/uploads/${dentist.photo}`;
                
                // Test loading the image
                const testImg = new Image();
                testImg.onload = function() {
                    photoElement.src = imagePath;
                };
                
                testImg.onerror = function() {
                    showAvatarFallback(dentist);
                };
                
                testImg.src = imagePath;
                
            } else {
                showAvatarFallback(dentist);
            }
        }

        // Show avatar fallback
        function showAvatarFallback(dentist) {
            const photoElement = document.getElementById('dentistPhoto');
            
            // Generate avatar from name
            const initials = (dentist.fname && dentist.lname) 
                ? (dentist.fname.charAt(0) + dentist.lname.charAt(0)).toUpperCase()
                : 'DR';

            const avatarSvg = generateAvatarSVG(initials, dentist.fname || 'Dentist');
            photoElement.src = avatarSvg;
        }

        // Generate SVG Avatar
        function generateAvatarSVG(initials, name) {
            const colors = [
                '#4A90E2', '#2DA8FF', '#28a745', '#17a2b8', 
                '#ffc107', '#fd7e14', '#e83e8c', '#6f42c1'
            ];
            
            // Select color based on name
            const colorIndex = (name.charCodeAt(0) + name.charCodeAt(name.length - 1)) % colors.length;
            const backgroundColor = colors[colorIndex];
            
            const svg = `
                <svg width="120" height="120" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="60" cy="60" r="60" fill="${backgroundColor}"/>
                    <text x="60" y="75" font-family="Arial, sans-serif" font-size="36" 
                          font-weight="600" fill="white" text-anchor="middle">${initials}</text>
                </svg>
            `;
            
            return 'data:image/svg+xml;base64,' + btoa(svg);
        }

        // Load real schedule data from database
        async function loadScheduleData() {
            if (!dentistId) return;

            try {
                // Calculate date range for current month
                const startDate = new Date(currentYear, currentMonth, 1);
                const endDate = new Date(currentYear, currentMonth + 1, 0);
                
                const startDateStr = startDate.toISOString().split('T')[0];
                const endDateStr = endDate.toISOString().split('T')[0];

                console.log(`Loading schedule for dentist ${dentistId} from ${startDateStr} to ${endDateStr}`);

                const response = await fetch(`/admin/api/dentists/${dentistId}/schedule-data?start_date=${startDateStr}&end_date=${endDateStr}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    scheduleData = data.schedules || [];
                    console.log(`Loaded ${scheduleData.length} schedule records from database`);
                } else {
                    throw new Error(data.error || 'Failed to load schedule data');
                }
                
            } catch (error) {
                console.error('Error loading schedule data:', error);
                scheduleData = [];
                showToast('Failed to load schedule data: ' + error.message, 'error');
            }
        }

        // Render calendar with real database data
        function renderCalendar() {
            updateCurrentMonthDisplay();
            
            const calendarGrid = document.getElementById('calendarGrid');
            calendarGrid.innerHTML = '';

            // Add day headers
            daysOfWeek.forEach(day => {
                const headerCell = document.createElement('div');
                headerCell.className = 'calendar-header-cell';
                headerCell.textContent = day;
                calendarGrid.appendChild(headerCell);
            });

            // Get first day of month and number of days
            const firstDay = new Date(currentYear, currentMonth, 1);
            const lastDay = new Date(currentYear, currentMonth + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();

            // Add empty cells for days before month starts
            for (let i = 0; i < startingDayOfWeek; i++) {
                const emptyCell = document.createElement('div');
                emptyCell.className = 'calendar-cell other-month';
                calendarGrid.appendChild(emptyCell);
            }

            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const cell = document.createElement('div');
                cell.className = 'calendar-cell';
                
                const currentDateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                const today = new Date().toISOString().split('T')[0];
                
                // Check if it's today
                if (currentDateStr === today) {
                    cell.classList.add('today');
                }

                // Get schedule for this date from database
                const daySchedules = scheduleData.filter(s => s.schedule_date === currentDateStr);
                
                // Create cell content
                const cellDate = document.createElement('div');
                cellDate.className = 'cell-date';
                cellDate.textContent = day;
                cell.appendChild(cellDate);

                if (daySchedules.length > 0) {
                    const hasWorkingHours = daySchedules.some(s => s.status === 'working');
                    const hasDayOff = daySchedules.some(s => s.status === 'dayoff');
                    const hasAppointments = daySchedules.some(s => s.appointment_count > 0);
                    
                    if (hasDayOff) {
                        cell.classList.add('day-off');
                        const indicator = document.createElement('div');
                        indicator.className = 'schedule-indicator day-off';
                        cell.appendChild(indicator);
                        
                        const scheduleInfo = document.createElement('div');
                        scheduleInfo.className = 'cell-schedule';
                        scheduleInfo.textContent = 'Day Off';
                        cell.appendChild(scheduleInfo);
                    } else if (hasWorkingHours) {
                        if (hasAppointments) {
                            cell.classList.add('has-appointments');
                            const indicator = document.createElement('div');
                            indicator.className = 'schedule-indicator has-appointments';
                            cell.appendChild(indicator);
                        } else {
                            cell.classList.add('has-schedule');
                            const indicator = document.createElement('div');
                            indicator.className = 'schedule-indicator';
                            cell.appendChild(indicator);
                        }
                        
                        const workingSchedules = daySchedules.filter(s => s.status === 'working');
                        if (workingSchedules.length > 0) {
                            // Sort by hour to get first and last
                            workingSchedules.sort((a, b) => a.hour - b.hour);
                            const firstSchedule = workingSchedules[0];
                            const lastSchedule = workingSchedules[workingSchedules.length - 1];
                            
                            const scheduleInfo = document.createElement('div');
                            scheduleInfo.className = 'cell-schedule';
                            scheduleInfo.textContent = `${firstSchedule.start_time.substr(0, 5)} - ${lastSchedule.end_time.substr(0, 5)}`;
                            cell.appendChild(scheduleInfo);

                            // Show appointment count if any
                            if (hasAppointments) {
                                const totalAppointments = daySchedules.reduce((sum, s) => sum + s.appointment_count, 0);
                                const appointmentInfo = document.createElement('div');
                                appointmentInfo.className = 'appointment-info';
                                appointmentInfo.textContent = `${totalAppointments} appointment${totalAppointments > 1 ? 's' : ''}`;
                                cell.appendChild(appointmentInfo);
                            }
                        }
                    }
                }

                // Add click event to show details
                cell.addEventListener('click', () => showScheduleDetails(currentDateStr, daySchedules));
                
                calendarGrid.appendChild(cell);
            }
        }

        // Update current month display
        function updateCurrentMonthDisplay() {
            const currentMonthElement = document.getElementById('currentMonth');
            currentMonthElement.textContent = `${monthNames[currentMonth]} ${currentYear}`;
        }

        // Change month
        function changeMonth(direction) {
            currentMonth += direction;
            
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            } else if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            
            loadScheduleData().then(() => {
                renderCalendar();
            });
        }

        // Go to today
        function goToToday() {
            const today = new Date();
            currentMonth = today.getMonth();
            currentYear = today.getFullYear();
            
            loadScheduleData().then(() => {
                renderCalendar();
            });
        }

        // Refresh schedule
        async function refreshSchedule() {
            showToast('Refreshing schedule from database...', 'info');
            
            try {
                await loadScheduleData();
                renderCalendar();
                showToast('Schedule refreshed successfully', 'success');
            } catch (error) {
                showToast('Failed to refresh schedule', 'error');
            }
        }

        // Show schedule details in modal with real data
        function showScheduleDetails(date, schedules) {
            const modal = document.getElementById('scheduleModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            
            const dateObj = new Date(date + 'T00:00:00');
            const formattedDate = dateObj.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            modalTitle.textContent = `Schedule for ${formattedDate}`;
            
            let modalContent = `
                <div class="schedule-detail">
                    <div class="detail-label">Date</div>
                    <div class="detail-value">${formattedDate}</div>
                </div>
                <div class="schedule-detail">
                    <div class="detail-label">Database Records</div>
                    <div class="detail-value">${schedules.length} schedule entries found</div>
                </div>
            `;
            
            if (schedules.length === 0) {
                modalContent += `
                    <div class="schedule-detail">
                        <div class="detail-label">Status</div>
                        <div class="detail-value">No schedule set for this day</div>
                    </div>
                `;
            } else {
                modalContent += `
                    <div class="schedule-detail">
                        <div class="detail-label">Schedule Details</div>
                        <div class="schedule-list">
                `;
                
                // Sort schedules by hour
                schedules.sort((a, b) => a.hour - b.hour);
                
                schedules.forEach(schedule => {
                    const scheduleClass = schedule.status === 'dayoff' ? 'day-off' : 
                                        schedule.appointment_count > 0 ? 'has-appointments' : '';
                    modalContent += `
                        <div class="schedule-item ${scheduleClass}">
                            <div class="schedule-time">
                                ${schedule.start_time.substr(0, 5)} - ${schedule.end_time.substr(0, 5)}
                            </div>
                            <div class="schedule-status">
                                ${schedule.status === 'dayoff' ? 'Day Off' : 'Working Hours'}
                                ${schedule.note ? ` - ${schedule.note}` : ''}
                            </div>
                            ${schedule.appointment_count > 0 ? `
                                <div class="appointment-info">
                                    ${schedule.appointment_count} appointment${schedule.appointment_count > 1 ? 's' : ''} scheduled
                                </div>
                            ` : ''}
                        </div>
                    `;
                });
                
                modalContent += `
                        </div>
                    </div>
                `;
            }
            
            modalBody.innerHTML = modalContent;
            modal.style.display = 'flex';
        }

        // Close modal
        function closeModal() {
            const modal = document.getElementById('scheduleModal');
            modal.style.display = 'none';
        }

        // Toggle notifications dropdown
        function toggleNotifications() {
            showToast('Notification feature available in full system', 'info');
        }

        // Toggle profile dropdown
        function toggleDropdown() {
            const menu = document.getElementById('profileDropdown');
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            // Remove existing toasts
            document.querySelectorAll('.toast').forEach(toast => toast.remove());
            
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(toast);
            
            // Auto remove after 4 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.style.animation = 'slideOutRight 0.3s ease';
                    setTimeout(() => {
                        if (toast.parentNode) {
                            toast.remove();
                        }
                    }, 300);
                }
            }, 4000);
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            // Close profile dropdown
            const profileDropdown = document.querySelector('.profile-dropdown');
            if (!profileDropdown.contains(event.target)) {
                document.getElementById('profileDropdown').style.display = 'none';
            }
            
            // Close modal when clicking outside
            const modal = document.getElementById('scheduleModal');
            if (event.target === modal) {
                closeModal();
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            // ESC to close modal and dropdowns
            if (event.key === 'Escape') {
                closeModal();
                document.getElementById('profileDropdown').style.display = 'none';
            }
            
            // Arrow keys to navigate months
            if (event.key === 'ArrowLeft' && !event.ctrlKey && !event.metaKey) {
                changeMonth(-1);
            }
            if (event.key === 'ArrowRight' && !event.ctrlKey && !event.metaKey) {
                changeMonth(1);
            }
            
            // T for today
            if (event.key === 't' || event.key === 'T') {
                if (!event.ctrlKey && !event.metaKey) {
                    goToToday();
                }
            }
            
            // R for refresh
            if (event.key === 'r' || event.key === 'R') {
                if (!event.ctrlKey && !event.metaKey) {
                    event.preventDefault();
                    refreshSchedule();
                }
            }
        });

        // Handle online/offline status
        window.addEventListener('online', () => {
            showToast('Connection restored', 'success');
        });

        window.addEventListener('offline', () => {
            showToast('Connection lost', 'error');
        });

        // Auto-refresh every 5 minutes to keep data current
        setInterval(() => {
            loadScheduleData().then(() => {
                renderCalendar();
            });
        }, 300000);

        // Enhanced error handling
        window.addEventListener('error', function(e) {
            console.error('JavaScript error:', e.error);
            showToast('An unexpected error occurred', 'error');
        });

        // Performance monitoring
        window.addEventListener('load', function() {
            const loadTime = performance.now();
            console.log(`Real schedule page loaded in ${Math.round(loadTime)}ms`);
        });
    </script>
</body>
</html>