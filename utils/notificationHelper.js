// utils/notificationHelper.js
const db = require('../config/db');

const NotificationHelper = {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
  async createNewAppointmentNotification(appointmentId, patientId, dentistId) {
    try {
      const [patientData] = await db.execute(
        'SELECT fname, lname, phone FROM patient WHERE patient_id = ?',
        [patientId]
      );
      
      const [dentistData] = await db.execute(
        'SELECT fname, lname FROM dentist WHERE dentist_id = ?',
        [dentistId]
      );
      
      const [appointmentData] = await db.execute(
        'SELECT time, treatment_id FROM queue WHERE queue_id = ?',
        [appointmentId]
      );

      if (patientData.length === 0 || dentistData.length === 0 || appointmentData.length === 0) {
        console.error('Cannot create notification: Missing data');
        return;
      }

      const patient = patientData[0];
      const dentist = dentistData[0];
      const appointment = appointmentData[0];
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
      const [treatmentData] = await db.execute(
        'SELECT treatment_name FROM treatment WHERE treatment_id = ?',
        [appointment.treatment_id]
      );
      const treatmentName = treatmentData[0]?.treatment_name || '‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤';
      
      const appointmentTime = new Date(appointment.time);
      const formattedDate = appointmentTime.toLocaleDateString('th-TH', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      });
      const formattedTime = appointmentTime.toLocaleTimeString('th-TH', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });

      // Notification for Admin
      await db.execute(`
        INSERT INTO notifications (type, title, message, queue_id, dentist_id, patient_id, is_read, is_new)
        VALUES (?, ?, ?, ?, ?, ?, 0, 1)
      `, [
        'new_appointment',
        'üÜï ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà',
        `${patient.fname} ${patient.lname} ‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏±‡∏ö ‡∏ó‡∏û.${dentist.fname} ${dentist.lname} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${treatmentName} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô.`,
        appointmentId,
        dentistId,
        patientId
      ]);

      // Notification for Dentist
      await db.execute(`
        INSERT INTO notifications (type, title, message, queue_id, dentist_id, patient_id, is_read, is_new)
        VALUES (?, ?, ?, ?, ?, ?, 0, 1)
      `, [
        'new_appointment',
        'üÜï ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà',
        `‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ${patient.fname} ${patient.lname} (${patient.phone}) ‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${treatmentName} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô.`,
        appointmentId,
        dentistId,
        patientId
      ]);

      console.log(`‚úÖ Created appointment notification for appointment ${appointmentId}`);

    } catch (error) {
      console.error('Error creating appointment notification:', error);
    }
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  async createConfirmationNotification(appointmentId, patientId, dentistId) {
    try {
      const [appointmentData] = await db.execute(`
        SELECT q.time, t.treatment_name, CONCAT(d.fname, ' ', d.lname) as dentist_name,
               CONCAT(p.fname, ' ', p.lname) as patient_name
        FROM queue q
        JOIN dentist d ON q.dentist_id = d.dentist_id
        JOIN treatment t ON q.treatment_id = t.treatment_id
        JOIN patient p ON q.patient_id = p.patient_id
        WHERE q.queue_id = ?
      `, [appointmentId]);

      if (appointmentData.length === 0) return;

      const appointment = appointmentData[0];
      const appointmentTime = new Date(appointment.time);
      const formattedDate = appointmentTime.toLocaleDateString('th-TH', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      });
      const formattedTime = appointmentTime.toLocaleTimeString('th-TH', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });

      // Notification for Patient
      await db.execute(`
        INSERT INTO notifications (type, title, message, queue_id, dentist_id, patient_id, is_read, is_new)
        VALUES (?, ?, ?, ?, ?, ?, 0, 1)
      `, [
        'appointment_confirmed',
        '‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
        `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏±‡∏ö ${appointment.dentist_name} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${appointment.treatment_name} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô. ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
        appointmentId,
        dentistId,
        patientId
      ]);

      // Notification for Admin
      await db.execute(`
        INSERT INTO notifications (type, title, message, queue_id, dentist_id, patient_id, is_read, is_new)
        VALUES (?, ?, ?, ?, ?, ?, 0, 1)
      `, [
        'appointment_confirmed',
        '‚úÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢',
        `‡∏ó‡∏û.${appointment.dentist_name} ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á ${appointment.patient_name} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô.`,
        appointmentId,
        dentistId,
        patientId
      ]);

      console.log(`‚úÖ Created confirmation notification for appointment ${appointmentId}`);

    } catch (error) {
      console.error('Error creating confirmation notification:', error);
    }
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  async createCancellationNotification(appointmentId, patientId, dentistId, cancelledBy, reason = null) {
    try {
      const [appointmentData] = await db.execute(`
        SELECT q.time, t.treatment_name, 
               CONCAT(d.fname, ' ', d.lname) as dentist_name,
               CONCAT(p.fname, ' ', p.lname) as patient_name,
               p.phone
        FROM queue q
        JOIN dentist d ON q.dentist_id = d.dentist_id
        JOIN patient p ON q.patient_id = p.patient_id
        JOIN treatment t ON q.treatment_id = t.treatment_id
        WHERE q.queue_id = ?
      `, [appointmentId]);

      if (appointmentData.length === 0) return;

      const appointment = appointmentData[0];
      const appointmentTime = new Date(appointment.time);
      const formattedDate = appointmentTime.toLocaleDateString('th-TH', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      });
      const formattedTime = appointmentTime.toLocaleTimeString('th-TH', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });

      const reasonText = reason ? ` ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}` : '';

      if (cancelledBy === 'patient') {
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Admin ‡πÅ‡∏•‡∏∞ Dentist
        await db.execute(`
          INSERT INTO notifications (type, title, message, appointment_id, dentist_id, patient_id, is_read, is_new)
          VALUES (?, ?, ?, ?, ?, ?, 0, 1)
        `, [
          'appointment_cancelled',
          '‚ùå ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢',
          `${appointment.patient_name} ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏±‡∏ö ${appointment.dentist_name} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô.${reasonText}`,
          appointmentId,
          dentistId,
          patientId
        ]);

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Dentist
        await db.execute(`
          INSERT INTO notifications (type, title, message, appointment_id, dentist_id, patient_id, is_read, is_new)
          VALUES (?, ?, ?, ?, ?, ?, 0, 1)
        `, [
          'appointment_cancelled',
          '‚ùå ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢',
          `${appointment.patient_name} (${appointment.phone}) ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô.${reasonText}`,
          appointmentId,
          dentistId,
          patientId
        ]);
      } else if (cancelledBy === 'dentist') {
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Patient
        await db.execute(`
          INSERT INTO notifications (type, title, message, appointment_id, dentist_id, patient_id, is_read, is_new)
          VALUES (?, ?, ?, ?, ?, ?, 0, 1)
        `, [
          'appointment_cancelled',
          '‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏±‡∏ö ${appointment.dentist_name} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô. ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å${reasonText}`,
          appointmentId,
          dentistId,
          patientId
        ]);

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Admin
        await db.execute(`
          INSERT INTO notifications (type, title, message, appointment_id, dentist_id, patient_id, is_read, is_new)
          VALUES (?, ?, ?, ?, ?, ?, 0, 1)
        `, [
          'appointment_cancelled',
          '‚ùå ‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢',
          `‡∏ó‡∏û.${appointment.dentist_name} ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á ${appointment.patient_name} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô.${reasonText}`,
          appointmentId,
          dentistId,
          patientId
        ]);
      } else {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢ Admin
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Patient
        await db.execute(`
          INSERT INTO notifications (type, title, message, appointment_id, dentist_id, patient_id, is_read, is_new)
          VALUES (?, ?, ?, ?, ?, ?, 0, 1)
        `, [
          'appointment_cancelled',
          '‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏±‡∏ö ${appointment.dentist_name} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô. ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å${reasonText}`,
          appointmentId,
          dentistId,
          patientId
        ]);

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Dentist
        await db.execute(`
          INSERT INTO notifications (type, title, message, appointment_id, dentist_id, patient_id, is_read, is_new)
          VALUES (?, ?, ?, ?, ?, ?, 0, 1)
        `, [
          'appointment_cancelled',
          '‚ùå ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          `‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á ${appointment.patient_name} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô. ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô${reasonText}`,
          appointmentId,
          dentistId,
          patientId
        ]);
      }

      console.log(`‚úÖ Created cancellation notification for appointment ${appointmentId}`);

    } catch (error) {
      console.error('Error creating cancellation notification:', error);
    }
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
  async createReminderNotification(appointmentId, patientId, dentistId) {
    try {
      const [appointmentData] = await db.execute(`
        SELECT q.time, t.treatment_name, 
               CONCAT(d.fname, ' ', d.lname) as dentist_name,
               CONCAT(p.fname, ' ', p.lname) as patient_name,
               d.specialty
        FROM queue q
        JOIN dentist d ON q.dentist_id = d.dentist_id
        JOIN treatment t ON q.treatment_id = t.treatment_id
        JOIN patient p ON q.patient_id = p.patient_id
        WHERE q.queue_id = ?
      `, [appointmentId]);

      if (appointmentData.length === 0) return;

      const appointment = appointmentData[0];
      const appointmentTime = new Date(appointment.time);
      const formattedDate = appointmentTime.toLocaleDateString('th-TH', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      });
      const formattedTime = appointmentTime.toLocaleTimeString('th-TH', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });

      // Notification for Patient
      await db.execute(`
        INSERT INTO notifications (type, title, message, queue_id, dentist_id, patient_id, is_read, is_new)
        VALUES (?, ?, ?, ?, ?, ?, 0, 1)
      `, [
        'appointment_reminder',
        '‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ',
        `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô. ‡∏Å‡∏±‡∏ö ${appointment.dentist_name} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${appointment.treatment_name}`,
        appointmentId,
        dentistId,
        patientId
      ]);

      // Notification for Dentist
      await db.execute(`
        INSERT INTO notifications (type, title, message, queue_id, dentist_id, patient_id, is_read, is_new)
        VALUES (?, ?, ?, ?, ?, ?, 0, 1)
      `, [
        'appointment_reminder',
        '‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ',
        `‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏Å‡∏±‡∏ö ${appointment.patient_name} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime} ‡∏ô. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${appointment.treatment_name}`,
        appointmentId,
        dentistId,
        patientId
      ]);

      console.log(`‚úÖ Created reminder notification for appointment ${appointmentId}`);

    } catch (error) {
      console.error('Error creating reminder notification:', error);
    }
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
  async createTreatmentRecordNotification(appointmentId, patientId, dentistId) {
    try {
      const [appointmentData] = await db.execute(`
        SELECT t.treatment_name, 
               CONCAT(d.fname, ' ', d.lname) as dentist_name,
               CONCAT(p.fname, ' ', p.lname) as patient_name,
               q.time
        FROM queue q
        JOIN dentist d ON q.dentist_id = d.dentist_id
        JOIN treatment t ON q.treatment_id = t.treatment_id
        JOIN patient p ON q.patient_id = p.patient_id
        WHERE q.queue_id = ?
      `, [appointmentId]);

      if (appointmentData.length === 0) return;

      const appointment = appointmentData[0];
      const appointmentTime = new Date(appointment.time);
      const formattedDate = appointmentTime.toLocaleDateString('th-TH', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      });

      // Notification for Patient
      await db.execute(`
        INSERT INTO notifications (type, title, message, queue_id, dentist_id, patient_id, is_read, is_new)
        VALUES (?, ?, ?, ?, ?, ?, 0, 1)
      `, [
        'treatment_completed',
        'üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
        `${appointment.dentist_name} ‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤${appointment.treatment_name}‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤`,
        appointmentId,
        dentistId,
        patientId
      ]);

      // Notification for Admin
      await db.execute(`
        INSERT INTO notifications (type, title, message, queue_id, dentist_id, patient_id, is_read, is_new)
        VALUES (?, ?, ?, ?, ?, ?, 0, 1)
      `, [
        'treatment_completed',
        'üìù ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤',
        `‡∏ó‡∏û.${appointment.dentist_name} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤${appointment.treatment_name}‡∏Ç‡∏≠‡∏á ${appointment.patient_name} ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${formattedDate}`,
        appointmentId,
        dentistId,
        patientId
      ]);

      console.log(`‚úÖ Created treatment record notification for appointment ${appointmentId}`);

    } catch (error) {
      console.error('Error creating treatment record notification:', error);
    }
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô
  async createScheduleChangeNotification(dentistId, changeType, dateRange, details = '') {
    try {
      const [dentistData] = await db.execute(
        'SELECT fname, lname FROM dentist WHERE dentist_id = ?',
        [dentistId]
      );

      if (dentistData.length === 0) return;

      const dentist = dentistData[0];
      const dentistName = `‡∏ó‡∏û.${dentist.fname} ${dentist.lname}`;

      let title = '';
      let message = '';

      if (changeType === 'added') {
        title = 'üìÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô';
        message = `${dentistName} ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô${dateRange} ${details}`;
      } else if (changeType === 'removed') {
        title = 'üóìÔ∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô';
        message = `${dentistName} ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô${dateRange} ${details}`;
      } else if (changeType === 'dayoff') {
        title = 'üèñÔ∏è ‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Ç‡∏≠‡∏´‡∏¢‡∏∏‡∏î';
        message = `${dentistName} ‡∏Ç‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà${dateRange} ${details}`;
      }

      // Notification for Admin only
      await db.execute(`
        INSERT INTO notifications (type, title, message, dentist_id, is_read, is_new)
        VALUES (?, ?, ?, ?, 0, 1)
      `, [
        'schedule_change',
        title,
        message,
        dentistId
      ]);

      console.log(`‚úÖ Created schedule change notification for dentist ${dentistId}`);

    } catch (error) {
      console.error('Error creating schedule change notification:', error);
    }
  }
};

module.exports = NotificationHelper;