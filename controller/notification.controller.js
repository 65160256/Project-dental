const NotificationModel = require('../models/Notification.model');
const DentistModel = require('../models/Dentist.model');
const PatientModel = require('../models/Patient.model');

const notificationController = {
  // ========== ADMIN NOTIFICATIONS ==========

  // Get all notifications for admin
  getAdminNotifications: async (req, res) => {
  try {
    const limit = Math.max(1, parseInt(req.query.limit, 10) || 20);
    const offset = Math.max(0, parseInt(req.query.offset, 10) || 0);
    const unread_only = req.query.unread_only === 'true';
    const type = req.query.type;

    console.log('üîç Notification Query Debug:', { limit, offset, unread_only, type });

    // ‡πÉ‡∏ä‡πâ Model ‡πÅ‡∏ó‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const notifications = await NotificationModel.getAdminNotifications({
      unread_only,
      type,
      limit,
      offset
    });

    // Get counts
    const counts = await NotificationModel.getNotificationCounts();

    res.json({
      success: true,
      notifications: notifications.map(n => ({
        ...n,
        time_ago: getTimeAgo(n.created_at)
      })),
      total: counts.total,
      unread: counts.unread,
      limit,
      offset
    });

  } catch (error) {
    console.error('‚ùå Error in getAdminNotifications:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      details: error.message
    });
  }
},

  // ========== DENTIST NOTIFICATIONS ==========
getDentistNotifications: async (req, res) => {
  try {
    // 0) ‡∏´‡∏≤ userId ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏™ (session ‡∏´‡∏£‡∏∑‡∏≠ auth middleware)
    const userId =
      req.session?.user?.user_id ??
      req.session?.userId ??
      req.user?.user_id;

    if (!Number.isInteger(Number(userId))) {
      return res.status(401).json({ success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    // 1) ‡∏î‡∏∂‡∏á dentist_id ‡∏à‡∏≤‡∏Å user_id ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Model
    const dentist = await DentistModel.findByUserId(Number(userId));

    if (!dentist) {
      return res.status(404).json({ success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡πå' });
    }
    const dentistId = Number(dentist.dentist_id);

    // 2) ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö limit/offset ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô int ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const limitRaw = Number(req.query.limit);
    const offsetRaw = Number(req.query.offset);
    const limit = Number.isInteger(limitRaw) ? Math.max(1, Math.min(100, limitRaw)) : 20;
    const offset = Number.isInteger(offsetRaw) ? Math.max(0, offsetRaw) : 0;

    // 3) ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç unread
    const unread_only = req.query.unread_only === 'true';

    // 4) ‡πÉ‡∏ä‡πâ Model ‡πÅ‡∏ó‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const notifications = await NotificationModel.getDentistNotifications(dentistId, {
      unread_only,
      limit,
      offset
    });

    // 5) ‡∏ô‡∏±‡∏ö unread ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≠‡∏ü‡∏±‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
    const counts = await NotificationModel.getNotificationCounts({ dentist_id: dentistId });

    return res.json({
      success: true,
      notifications: notifications.map(n => ({ ...n, time_ago: getTimeAgo(n.created_at) })),
      total: counts.total,
      unread: counts.unread,
      limit,
      offset
    });
  } catch (error) {
    console.error('Error in getDentistNotifications:', error);
    return res.status(500).json({ success: false, error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' });
  }
},




  // ========== PATIENT NOTIFICATIONS ==========

  // Get notifications for specific patient
getPatientNotifications: async (req, res) => {
  try {
    const userId = req.session.userId;

    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
      });
    }

    // Get patient_id from user_id ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Model
    const patient = await PatientModel.findByUserId(userId);

    if (!patient) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢'
      });
    }

    const patientId = patient.patient_id;

    // ‡∏£‡∏±‡∏ö parameters
    const limit = Math.max(1, parseInt(req.query.limit, 10) || 20);
    const offset = Math.max(0, parseInt(req.query.offset, 10) || 0);
    const unread_only = req.query.unread_only === 'true';

    // ‡πÉ‡∏ä‡πâ Model ‡πÅ‡∏ó‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const notifications = await NotificationModel.getPatientNotifications(patientId, {
      unread_only,
      limit,
      offset
    });

    // Get unread count for this patient
    const counts = await NotificationModel.getNotificationCounts({ patient_id: patientId });

    res.json({
      success: true,
      notifications: notifications.map(n => ({
        ...n,
        time_ago: getTimeAgo(n.created_at)
      })),
      total: counts.total,
      unread: counts.unread,
      limit,
      offset
    });

  } catch (error) {
    console.error('Error in getPatientNotifications:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'
    });
  }
},

  // ========== COMMON FUNCTIONS ==========

  // Mark notification as read
  markAsRead: async (req, res) => {
    try {
      const { id } = req.params;

      // ‡πÉ‡∏ä‡πâ Model ‡πÅ‡∏ó‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const result = await NotificationModel.markAsReadById(id);

      if (!result.success) {
        return res.status(404).json({
          success: false,
          error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'
        });
      }

      res.json({
        success: true,
        message: '‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      });

    } catch (error) {
      console.error('Error in markAsRead:', error);
      res.status(500).json({
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
      });
    }
  },

  // Mark all as read - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö patient
markAllAsRead: async (req, res) => {
  try {
    const userId = req.session.user?.user_id || req.session.userId;
    const userType = req.query.userType || req.body.userType;

    let filters = {};

    if (userType === 'dentist') {
      const dentist = await DentistModel.findByUserId(userId);
      if (dentist) {
        filters.dentist_id = dentist.dentist_id;
      }
    } else if (userType === 'patient') {
      const patient = await PatientModel.findByUserId(userId);
      if (patient) {
        filters.patient_id = patient.patient_id;
      }
    }

    // ‡πÉ‡∏ä‡πâ Model ‡πÅ‡∏ó‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const result = await NotificationModel.markAllAsReadByFilter(filters);

    res.json({
      success: true,
      message: `‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß (${result.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`
    });

  } catch (error) {
    console.error('Error in markAllAsRead:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
    });
  }
},

  // Delete notification
  deleteNotification: async (req, res) => {
    try {
      const { id } = req.params;

      // ‡πÉ‡∏ä‡πâ Model ‡πÅ‡∏ó‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const result = await NotificationModel.deleteById(id);

      if (!result.success) {
        return res.status(404).json({
          success: false,
          error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'
        });
      }

      res.json({
        success: true,
        message: '‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      });

    } catch (error) {
      console.error('Error in deleteNotification:', error);
      res.status(500).json({
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
      });
    }
  },

 // Get unread count - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö patient
getUnreadCount: async (req, res) => {
  try {
    const userId = req.session.user?.user_id || req.session.userId;
    const userType = req.query.userType;

    let filters = {};

    if (userType === 'dentist') {
      const dentist = await DentistModel.findByUserId(userId);
      if (dentist) {
        filters.dentist_id = dentist.dentist_id;
      }
    } else if (userType === 'patient') {
      const patient = await PatientModel.findByUserId(userId);
      if (patient) {
        filters.patient_id = patient.patient_id;
      }
    }
    // Admin - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà filters

    // ‡πÉ‡∏ä‡πâ Model ‡πÅ‡∏ó‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const count = await NotificationModel.getUnreadCount(filters);

    res.json({
      success: true,
      unread_count: count
    });

  } catch (error) {
    console.error('Error in getUnreadCount:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
    });
  }
}
};

// Helper function: Calculate time ago
function getTimeAgo(date) {
  const now = new Date();
  const past = new Date(date);
  const diffMs = now - past;
  const diffMins = Math.floor(diffMs / 60000);
  const diffHours = Math.floor(diffMs / 3600000);
  const diffDays = Math.floor(diffMs / 86400000);
  
  if (diffMins < 1) return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
  if (diffMins < 60) return `${diffMins} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
  if (diffHours < 24) return `${diffHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
  if (diffDays < 7) return `${diffDays} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
  
  return past.toLocaleDateString('th-TH', {
    day: '2-digit',
    month: 'short',
    year: 'numeric'
  });
}

module.exports = notificationController;